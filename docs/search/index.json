[{"content":"背景 在干净的Linux或容器中，有时没有curl/wget等工具，需要同步文件、下载文件很麻烦，但python作为自带的组件提供了很方便的功能\n命令 FTP文件下载\n1 python -c \u0026#34;from ftplib import FTP; ftp = FTP(\u0026#39;192.168.1.25\u0026#39;, \u0026#39;FtpUserName\u0026#39;, \u0026#39;FtpUserPasswd\u0026#39;); ftp.retrbinary(\u0026#39;RETR /Path/To/YourFile\u0026#39;, open(\u0026#39;YourFile\u0026#39;, \u0026#39;wb\u0026#39;).write); ftp.quit()\u0026#34; Http文件下载(自动获取文件名)\n1 python -c \u0026#34;import urllib.request;url=\u0026#39;http://download.redis.io/releases/redis-5.0.5.tar.gz\u0026#39;; urllib.request.urlretrieve(url, url.split(\u0026#39;/\u0026#39;)[-1])\u0026#34; ","date":"2024-01-25T09:38:39+08:00","permalink":"https://96bear.github.io/p/%E4%B8%80%E8%A1%8Cshell%E5%90%8C%E6%AD%A5ftp%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/","title":"一行shell同步ftp下载文件"},{"content":"情况 ABP项目中引入了aspose.words，Win下正常运行，通过DockerFile构造并运行的容器报错缺少libSkiaSharp，完整报错请看文章末。\n解决方法 在打包模块.csproj中新增引入：\n1 2 3 4 \u0026lt;ItemGroup\u0026gt; \u0026lt;PackageReference Include=\u0026#34;SkiaSharp\u0026#34; Version=\u0026#34;2.88.6\u0026#34; /\u0026gt; \u0026lt;PackageReference Include=\u0026#34;SkiaSharp.NativeAssets.Linux.NoDependencies\u0026#34; Version=\u0026#34;2.88.6\u0026#34; /\u0026gt; \u0026lt;/ItemGroup\u0026gt; 2.88.0版本存在任意代码执行漏洞，所以使用2.88.6版本。\n完整报错 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 ~# docker logs 4a82 --since 2m Unhandled exception. System.TypeInitializationException: The type initializer for \u0026#39;SkiaSharp.SKObject\u0026#39; threw an exception. ---\u0026gt; System.DllNotFoundException: Unable to load shared library \u0026#39;libSkiaSharp\u0026#39; or one of its dependencies. In order to help diagnose loading problems, consider using a tool like strace. If you\u0026#39;re using glibc, consider setting the LD_DEBUG environment variable: /app/runtimes/linux-x64/native/libSkiaSharp.so: cannot open shared object file: No such file or directory /usr/share/dotnet/shared/Microsoft.NETCore.App/7.0.14/libSkiaSharp.so: cannot open shared object file: No such file or directory /app/libSkiaSharp.so: cannot open shared object file: No such file or directory /app/runtimes/linux-x64/native/liblibSkiaSharp.so: cannot open shared object file: No such file or directory /usr/share/dotnet/shared/Microsoft.NETCore.App/7.0.14/liblibSkiaSharp.so: cannot open shared object file: No such file or directory /app/liblibSkiaSharp.so: cannot open shared object file: No such file or directory /app/runtimes/linux-x64/native/libSkiaSharp: cannot open shared object file: No such file or directory /usr/share/dotnet/shared/Microsoft.NETCore.App/7.0.14/libSkiaSharp: cannot open shared object file: No such file or directory /app/libSkiaSharp: cannot open shared object file: No such file or directory /app/runtimes/linux-x64/native/liblibSkiaSharp: cannot open shared object file: No such file or directory /usr/share/dotnet/shared/Microsoft.NETCore.App/7.0.14/liblibSkiaSharp: cannot open shared object file: No such file or directory /app/liblibSkiaSharp: cannot open shared object file: No such file or directory at SkiaSharp.SkiaApi.sk_version_get_milestone() at SkiaSharp.SkiaSharpVersion.get_Native() at SkiaSharp.SkiaSharpVersion.CheckNativeLibraryCompatible(Boolean throwIfIncompatible) at SkiaSharp.SKObject..cctor() --- End of inner exception stack trace --- at SkiaSharp.SKObject.DeregisterHandle(IntPtr handle, SKObject instance) at SkiaSharp.SKObject.set_Handle(IntPtr value) at SkiaSharp.SKNativeObject.Dispose(Boolean disposing) at SkiaSharp.SKObject.Dispose(Boolean disposing) at SkiaSharp.SKBitmap.Dispose(Boolean disposing) at SkiaSharp.SKNativeObject.Finalize() ","date":"2024-01-08T11:35:36+08:00","permalink":"https://96bear.github.io/p/net%E5%AE%B9%E5%99%A8%E5%86%85%E7%BC%BA%E5%B0%91libskiasharp/","title":"Net容器内缺少libSkiaSharp"},{"content":"开源项目LinuxMirrors\n项目地址：SuperManito/LinuxMirrors: GNU/Linux 一键更换系统软件源脚本 (github.com)\n项目使用：bash \u0026lt;(curl -sSL https://linuxmirrors.cn/main.sh)\n交互式使用即可\n","date":"2024-01-08T11:33:18+08:00","permalink":"https://96bear.github.io/p/linux%E4%B8%80%E9%94%AE%E6%8D%A2%E6%BA%90/","title":"Linux一键换源"},{"content":"官方下载 10.0.7：https://download3.vmware.com/software/wkst/file/VMware-workstation-full-10.0.7-2844087.exe\n12.5.9：https://download3.vmware.com/software/wkst/file/VMware-workstation-full-12.5.9-7535481.exe\n14.1.5：http://download3.vmware.com/software/wkst/file/VMware-workstation-full-14.1.5-10950780.exe\n15.5.1：https://download3.vmware.com/software/wkst/file/VMware-workstation-full-15.5.1-15018445.exe\n15.5.2 : https://download3.vmware.com/software/wkst/file/VMware-workstation-full-15.5.2-15785246.exe\n16.0.0 : https://download3.vmware.com/software/wkst/file/VMware-workstation-full-16.0.0-16894299.exe\n16.1.0 : https://download3.vmware.com/software/wkst/file/VMware-workstation-full-16.1.0-117198959.exe\n16.1.2 : https://download3.vmware.com/software/wkst/file/VMware-workstation-full-16.1.2-17966106.exe\n各版本序列号 10.x：1Z0G9-67285-FZG78-ZL3Q2-234JG\n11.x：YG74R-86G1M-M8DLP-XEQNT-XAHW2\n12.x：ZC3TK-63GE6-481JY-WWW5T-Z7ATA\n14.x：AU108-FLF9P-H8EJZ-7XMQ9-XG0U8\n15.x：YZ510-0LX8J-0815Z-YGMEE-ZAHA0\n16.x：YF390-0HF8P-M81RQ-2DXQE-M2UT6\n","date":"2023-12-21T18:04:10+08:00","permalink":"https://96bear.github.io/p/vmware%E5%AE%98%E6%96%B9%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80%E5%A4%87%E5%BF%98/","title":"Vmware官方下载地址备忘"},{"content":"发布博客流程 作为备忘\n1 hugo new post/hugo站点起步.md 在content/post下生成一份文档，完成编辑\n1 hugo -d docs --buildDrafts 生成静态页面文件到docs目录\n1 2 3 git add . git commit -m \u0026#34;msg\u0026#34; git push 迁移wordpress博客\n1 2 3 4 5 6 7 git clone https://github.com/lonekorean/wordpress-export-to-markdown mv blog.WordPress.2023-08-31.xml wordpress-export-to-markdown/export.xml cd wordpress-export-to-markdown npm install node index.js # 交互cli，自动生成dir、md，并下载img # 查看输出目录 ","date":"2023-11-25T17:07:27+08:00","permalink":"https://96bear.github.io/p/hugo%E7%AB%99%E7%82%B9%E8%B5%B7%E6%AD%A5/","title":"Hugo站点起步"},{"content":"函数维度：pyinstrument pip install pyinstrument pyinstrument your-script.py\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 Usage: pyinstrument [options] scriptfile [arg] ... Options: --version show program\u0026#39;s version number and exit -h, --help show this help message and exit --load-prev=ID instead of running a script, load a previous report -m MODULE_NAME run library module as a script, like \u0026#39;python -m module\u0026#39; --from-path (POSIX only) instead of the working directory, look for scriptfile in the PATH environment variable -o OUTFILE, --outfile=OUTFILE save to \u0026lt;outfile\u0026gt; -r RENDERER, --renderer=RENDERER how the report should be rendered. One of: \u0026#39;text\u0026#39;, \u0026#39;html\u0026#39;, \u0026#39;json\u0026#39;, \u0026#39;speedscope\u0026#39;, or python import path to a renderer class -t, --timeline render as a timeline - preserve ordering and don\u0026#39;t condense repeated calls --hide=EXPR glob-style pattern matching the file paths whose frames to hide. Defaults to \u0026#39;*/lib/*\u0026#39;. --hide-regex=REGEX regex matching the file paths whose frames to hide. Useful if --hide doesn\u0026#39;t give enough control. --show=EXPR glob-style pattern matching the file paths whose frames to show, regardless of --hide or --hide-regex. For example, use --show \u0026#39;*/\u0026lt;library\u0026gt;/*\u0026#39; to show frames within a library that would otherwise be hidden. --show-regex=REGEX regex matching the file paths whose frames to always show. Useful if --show doesn\u0026#39;t give enough control. --show-all show everything --unicode (text renderer only) force unicode text output --no-unicode (text renderer only) force ascii text output --color (text renderer only) force ansi color text output --no-color (text renderer only) force no color text output 给出的结果以web页面做友好地展示 代码维度：line_profiler pip install line_profiler\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #使用@profile 装饰要执行的函数 @profile def fun(n): pass fun(100) \u0026#34;\u0026#34;\u0026#34; Wrote profile results to primes.py.lprof Timer unit: 1e-06 s File: primes.py Function: primes at line 2 Total time: 0.00019 s Line # Hits Time Per Hit % Time Line Contents ============================================================== 2 @profile 3 def primes(n): 4 1 2 2.0 1.1 if n==2: 5 return [2] 6 1 1 1.0 0.5 elif n\u0026lt;2: 7 return [] 8 1 4 4.0 2.1 s=range(3,n+1,2) \u0026#34;\u0026#34;\u0026#34; ","date":"2023-06-30T00:00:00Z","permalink":"https://96bear.github.io/p/pyinstrument%E5%92%8Cline_profiler%E4%B8%8D%E5%90%8C%E7%BB%B4%E5%BA%A6%E7%9A%84python%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E6%A8%A1%E5%9D%97/","title":"pyinstrument和line_profiler——不同维度的python性能分析模块"},{"content":"官网：https://www.cpolar.com/ 安装后只需要绑定账号，然后一行命令 cpolar http 80\n实测： ","date":"2023-06-29T00:00:00Z","permalink":"https://96bear.github.io/p/%E5%85%8D%E8%B4%B9%E4%BE%BF%E6%8D%B7%E7%9A%84%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E6%9C%8D%E5%8A%A1cpolar/","title":"免费便捷的内网穿透服务cpolar"},{"content":"VmWare越用约大，已经达到了52个G，这种情况下虚拟机的压缩传输都成了大问题\n如何缩小 在已经安装VMtools的虚拟机中执行 vmware-toolbox-cmd disk shrink / 注意：先删除所有快照，否则会报错 静静等待进度达到100\n成果 52 =\u0026gt; 17.9G\n","date":"2023-06-05T00:00:00Z","permalink":"https://96bear.github.io/p/vmware%E7%BC%A9%E5%B0%8F%E7%A3%81%E7%9B%98%E5%8D%A0%E7%94%A8%E5%A4%A7%E5%B0%8F/","title":"VmWare缩小磁盘占用大小"},{"content":"转载自：点击蓝色名字订阅 Linux运维进阶之路 2022-09-05 08:49 发表于上海\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 #查看僵尸进程 ps -al | gawk \u0026#39;{print $2,$4}\u0026#39; | grep Z # 匹配电子邮件的地址 cat index.html | egrep -o \u0026#34;[A-Za-z0-9._]+@[A-Za-z0-9.]+\\.[a-zA-Z]{2,4}\u0026#34; \u0026gt; ans.txt #匹配http URL cat index.html | egrep -o \u0026#34;http://[A-Za-z0-9.]+\\.[a-zA-Z]{2,3}\u0026#34; \u0026gt; ans.txt #纯文本形式下载网页 lynx -dump www.baidu.com \u0026gt; plain.txt #只打印HTTP头部信息，无须远程下载文件 curl --head www.baidu.com #使用POST提交数据 curl -d \u0026#34;param2=nickwolfe¶m2=12345\u0026#34; http://www.linuxidc.com/login.cgi #显示分组途经的网关 traceroute www.baidu.com #列出系统中的开放端口以及运行在端口上的服务 lsof -i #nc命令建立socket连接 #设置监听　nc -l 5555 #连接到套接字 nc 192.0.0.1 5555 #快速文件传输 #接收端　nc -l 5555 \u0026gt; destination_filename #发送端　nc 192.0.0.1 5555 \u0026lt; source_filename #找出指定目录最大的n个文件 du -ak target_dir | sort -nrk 1 | head -n 4 # du中a为递归,k为kb；sort中n为数字,r为降序,k指定列 #向终端中的所有登陆用户发送广播信息 cat message.txt | wall #创建新的screen窗口 screen #打印所有的.txt和.pdf文件 find . \\( -name \u0026#34;*.txt\u0026#34; -o -name \u0026#34;*.pdf\u0026#34; \\) -print # -exec command {} \\;是连用的，所有符合的都会放置在{}中，去执行command #将文件分割成多个大小为10kb的文件 split -b 10k data.file #打印两个文件的交集 comm A.txt B.txt -3 | sed \u0026#39;s/^\\t//\u0026#39; #sed移除空白行 sed \u0026#39;/^$/d\u0026#39; file mysql备份 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 #!/bin/bash set -e USER=\u0026#34;backup\u0026#34; PASSWORD=\u0026#34;backup\u0026#34; # 数据库数据目录 # DATA_DIR=\u0026#34;/data/mysql\u0026#34; BIN_INDEX=$DATA_DIR\u0026#34;/mysql-bin.index\u0026#34; # 备份目录 # BACKUP_DIR=\u0026#34;/data/backup/mysql\u0026#34; BACKUP_LOG=\u0026#34;/var/log/mysql/backup.log\u0026#34; DATE=`date +\u0026#34;%Y%m%d\u0026#34;` TIME=`date +\u0026#34;%Y%m%d%H\u0026#34;` LOG_TIME=`date +\u0026#34;%Y-%m-%d %H:%M:%S\u0026#34;` DELETE_BINLOG_TIME=\u0026#34;7 day\u0026#34; INCREMENT_INTERVAL=\u0026#34;3 hour\u0026#34; note() { printf \u0026#34;[$LOG_TIME] note: $*\\n\u0026#34; \u0026gt;\u0026gt; $BACKUP_LOG; } warning() { printf \u0026#34;[$LOG_TIME] warning: $*\\n\u0026#34; \u0026gt;\u0026gt; $BACKUP_LOG; } error() { printf \u0026#34;[$LOG_TIME] error: $*\\n\u0026#34; \u0026gt;\u0026gt; $BACKUP_LOG; exit 1; } full_backup() { local dbs=`ls -l $DATA_DIR | grep \u0026#34;^d\u0026#34; | awk -F \u0026#34; \u0026#34; \u0026#39;{print $9}\u0026#39;` for db in $dbs do local backup_dir=$BACKUP_DIR\u0026#34;/full/\u0026#34;$db local filename=$db\u0026#34;.\u0026#34;$DATE local backup_file=$backup_dir\u0026#34;/\u0026#34;$filename\u0026#34;.sql\u0026#34; if [ ! -d $backup_dir ] then mkdir -p $backup_dir || { error \u0026#34;创建数据库 $db 全量备份目录 $backup_dir 失败\u0026#34;; continue; } note \u0026#34;数据库 $db 全量备份目录 $backup_dir 不存在，创建完成\u0026#34;; fi note \u0026#34;full backup $db start ...\u0026#34; mysqldump --user=${USER} --password=${PASSWORD} --flush-logs --skip-lock-tables --quick $db \u0026gt; $backup_file || { warning \u0026#34;数据库 $db 备份失败\u0026#34;; continue; } cd $backup_dir tar -cPzf $filename\u0026#34;.tar.gz\u0026#34; $filename\u0026#34;.sql\u0026#34; rm -f $backup_file chown -fR mysql:mysql $backup_dir note \u0026#34;数据库 $db 备份成功\u0026#34;; note \u0026#34;full backup $db end.\u0026#34; done } increment_backup() { local StartTime=`date \u0026#34;-d $INCREMENT_INTERVAL ago\u0026#34; +\u0026#34;%Y-%m-%d %H:%M:%S\u0026#34;` local DELETE_BINLOG_END_TIME=`date \u0026#34;-d $DELETE_BINLOG_TIME ago\u0026#34; +\u0026#34;%Y-%m-%d %H:%M:%S\u0026#34;` local dbs=`ls -l $DATA_DIR | grep \u0026#34;^d\u0026#34; | awk -F \u0026#34; \u0026#34; \u0026#39;{print $9}\u0026#39;` mysql -u$USER -p$PASSWORD -e \u0026#34;purge master logs before \u0026#39;$DELETE_BINLOG_END_TIME\u0026#39;\u0026#34; \u0026amp;\u0026amp; note \u0026#34;delete $DELETE_BINLOG_TIME days before log\u0026#34;; filename=`cat $BIN_INDEX | awk -F \u0026#34;/\u0026#34; \u0026#39;{print $2}\u0026#39;` for i in $filename do for db in $dbs do local backup_dir=$BACKUP_DIR\u0026#34;/increment/\u0026#34;$db local filename=$db\u0026#34;.\u0026#34;$TIME local backup_file=$backup_dir\u0026#34;/\u0026#34;$filename\u0026#34;.sql\u0026#34; if [ ! -d $backup_dir ] then mkdir -p $backup_dir || { error \u0026#34;创建数据库 $db 增量备份目录 $backup_dir 失败\u0026#34;; continue; } note \u0026#34;数据库 $db 增量备份目录 $backup_dir 不存在，创建完成\u0026#34;; fi note \u0026#34;increment backup $db form time $StartTime start ...\u0026#34; mysqlbinlog -d $db --start-datetime=\u0026#34;$StartTime\u0026#34; $DATA_DIR/$i \u0026gt;\u0026gt; $backup_file || { warning \u0026#34;数据库 $db 备份失败\u0026#34;; continue; } note \u0026#34;increment backup $db end.\u0026#34; done done for db in $dbs do local backup_dir=$BACKUP_DIR\u0026#34;/increment/\u0026#34;$db local filename=$db\u0026#34;.\u0026#34;$TIME local backup_file=$backup_dir\u0026#34;/\u0026#34;$filename\u0026#34;.sql\u0026#34; cd $backup_dir tar -cPzf $filename\u0026#34;.tar.gz\u0026#34; $filename\u0026#34;.sql\u0026#34; rm -f $backup_file note \u0026#34;数据库 $db 备份成功\u0026#34;; done } case \u0026#34;$1\u0026#34; in full) full_backup ;; increment) increment_backup ;; *) exit 2 ;; esac exit 1 目录备份 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 #!/bin/bash # # # 时间 DATE=$(date \u0026#39;+%Y-%m-%d_%H_%M_%S\u0026#39;) # 备份目录 BACKUPDIR=\u0026#34;/home/backups\u0026#34; # 需要备份的目录 SORFILE=/opt # 目标文件名 DESFILE=/home/backups/$SORFILE.$(date \u0026#39;+%Y-%m-%d_%H_%M_%S\u0026#39;).zip [ ! -d $BACKUPDIR ] \u0026amp;\u0026amp; mkdir -p $BACKUPDIR cd $BACKUPDIR echo \u0026#34;start backup $SORFILE ...\u0026#34; sleep 3 #echo \u0026#34;$DESFILE\u0026#34; #tar cvf $DESFILE $SORFILE #gzip -f .zip $DESFILE zip -r $DESFILE $SORFILE \u0026amp;\u0026gt;/dev/null if [ \u0026#34;$?\u0026#34; == \u0026#34;0\u0026#34; ] then echo $(date +%Y-%m-%d)\u0026#34; zip sucess\u0026#34;\u0026gt;\u0026gt;backup.log else echo $(date +%Y-%m-%d)\u0026#34; zip failed\u0026#34;\u0026gt;\u0026gt;backup.log exit 0 fi # 删除3天前的备份 find $BACKUPDIR -type f -ctime +3 | xargs rm -rf PING查询 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/bin/bash #用途：根据网络配置对网络地址192.168.0进行修改，检查是否是活动状态 #{start..end}shell扩展生成一组地址 for ip in 192.168.0.{1..255} do ( ping $ip -c 2 \u0026amp;\u0026gt; /dev/null # \u0026gt; 标准输出重定向，和1\u0026gt;一致 # 2\u0026gt;\u0026amp;1 将标准错误输出　重定向　到标准输出 # \u0026amp;\u0026gt;file 将标准输出和标准错误输出都重定向到文件filename中 if [ $? -eq 0 ];then echo $ip is alive fi )\u0026amp; done wait #并行ping,加速 磁盘IO检查 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 ##iostat是查看磁盘活动统计情况 ##显示所有设备负载情况 r/s: 每秒完成的读 I/O 设备次数。即 rio/s；w/s: 每秒完成的写 I/O 设备次数。即 wio/s等 iostat ##每隔2秒刷新磁盘IO信息，并且每次显示3次 iostat 2 3 #显示某个磁盘的IO信息 iostat -d sda1 ##显示tty和cpu信息 iostat -t ##以M为单位显示磁盘IO信息 iostat -m ##查看TPS和吞吐量信息 kB_read/s：每秒从设备（drive expressed）读取的数据量；kB_wrtn/s：每秒向设备（drive expressed）写入的数据量；kB_read：读取的总数据量；kB_wrtn：写入的总数量数据量； iostat -d -k 1 1 #查看设备使用率（%util）、响应时间（await） iostat -d -x -k 1 1 #查看CPU状态 iostat -c 1 3 #统计进程(pid)的stat,进程的stat自然包括进程的IO状况 pidstat #只显示IO pidstat -d 1 #-d IO 信息,-r 缺页及内存信息-u CPU使用率-t 以线程为统计单位1 1秒统计一次 pidstat -u -r -d -t 1 #文件级IO分析,查看当前文件由哪些进程打开 lsof ls /proc/pid/fd #利用 sar 报告磁盘 I/O 信息DEV 正在监视的块设备 tps 每秒钟物理设备的 I/O 传输总量 rd_sec/s 每秒从设备读取的扇区数量 wr_sec/s 每秒向设备写入的扇区数量 avgrq-sz I/O 请求的平均扇区数 #avgqu-sz I/O 请求的平均队列长度 await I/O 请求的平均等待时间，单位为毫秒 svctm I/O 请求的平均服务时间，单位为毫秒 %util I/O 请求所占用的时间的百分比，即设备利用率 sar -pd 10 3 #iotop top的io版 iotop #查看页面缓存信息 其中的Cached 指用于pagecache的内存大小（diskcache-SwapCache）。随着写入缓存页，Dirty 的值会增加 一旦开始把缓存页写入硬盘,Writeback的值会增加直到写入结束。 cat /proc/meminfo #查看有多少个pdflush进程 Linux 用pdflush进程把数据从缓存页写入硬盘 #pdflush的行为受/proc/sys/vm中的参数的控制/proc/sys/vm/dirty_writeback_centisecs (default 500): 1/100秒, 多长时间唤醒pdflush将缓存页数据写入硬盘。默认5秒唤醒2个（更多个）线程。如果wrteback的时间长于dirty_writeback_centisecs的时间，可能会出问题 cat /proc/sys/vm/nr_pdflush_threads #查看I/O 调度器 #调度算法 #noop anticipatory deadline [cfq] #deadline : deadline 算法保证对既定的IO请求以最小的延迟时间。 #anticipatory：有个IO发生后，如果又有进程请求IO，则产生一个默认6ms猜测时间，猜测下一个进程请求IO是干什么。这对于随机读取会造成较大的延时。对数据库应用很糟糕，而对于Web Server等则会表现不错。 #cfq: 对每个进程维护一个IO队列，各个进程发来的IO请求会被cfq以轮循方式处理，对每一个IO请求都是公平。适合离散读的应用。 #noop: 对所有IO请求都用FIFO队列形式处理。默认IO不会存在性能问题。 cat /sys/block/[disk]/queue/scheduler #改变IO调度器 $ echo deadline \u0026gt; /sys/block/sdX/queue/scheduler #提高调度器请求队列的 $ echo 4096 \u0026gt; /sys/block/sdX/queue/nr_requests 性能相关 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 #查看当前系统load uptime #查看系统状态和每个进程的系统资源使用状况 top #可视化显示CPU的使用状况 htop #查看每个CPU的负载信息 mpstat -P ALL 1 #每隔1秒查看磁盘IO的统计信息 iostat -xkdz 1 #每隔一秒查看虚拟内存的使用信息 vmstat 1 #查看内存使用统计信息 free #查看网络使用信息 nicstat -z 1 #类似vmstat的显示优化的工具 dstat 1 #查看系统活动状态，比如系统分页统计，块设备IO统计等 sar #网络连接状态查看 netstat -s #进程资源使用信息查看 pidstat 1 pidstat -d 1 #查看某个进程的系统调用信息 -p后面是进程id，-tttT 进程系统后的系统调用时间 strace -tttT -p 12670 #统计IO设备输入输出的系统调用信息 strace -c dd if=/dev/zero of=/dev/null bs=512 count=1024k #tcpdump 查看网络数据包 tcpdump -nr /tmp/out.tcpdump #块设备的读写事件信息统计 btrace /dev/sdb #iotop查看某个进程的IO操作统计信息 iotop -bod5 #slabtop 查看内核 slab内存分配器的使用信息 slabtop -sc #系统参数设置 sysctl -a #系统性能指标统计信息 perf stat gzip file1 #系统cpu活动状态查看 perf record -a -g -F 997 sleep 10 进程相关 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 ## processes 进程管理 ##ps查看当前系统执行的线程列表，进行瞬间状态，不是连续状态，连续状态需要使用top名称查看 更多常用参数请使用 man ps查看 ps ##显示所有进程详细信息 ps aux ##-u 显示某个用户的进程列表 ps -f -u www-data ## -C 通过名字或者命令搜索进程 ps -C apache2 ## --sort 根据进程cpu使用率降序排列，查看前5个进程 -pcpu表示降序 pcpu升序 ps aux --sort=-pcpu | head -5 ##-f 用树结构显示进程的层次关系，父子进程情况下 ps -f --forest -C apache2 ##显示一个父进程的所有子进程 ps -o pid,uname,comm -C apache2 ps --ppid 2359 ##显示一个进程的所有线程 -L 参数 ps -p 3150 -L ##显示进程的执行时间 -o参数 ps -e -o pid,comm,etime ##watch命令可以用来实时捕捉ps显示进程 watch -n 1 \u0026#39;ps -e -o pid,uname,cmd,pmem,pcpu --sort=-pmem,-pcpu | head -15\u0026#39; ##jobs 查看后台运行的进程 jobs命令执行的结果，＋表示是一个当前的作业，减号表是是一个当前作业之后的一个作业，jobs -l选项可显示所有任务的PID,jobs的状态可以是running, stopped, Terminated,但是如果任务被终止了（kill），shell 从当前的shell环境已知的列表中删除任务的进程标识；也就是说，jobs命令显示的是当前shell环境中所起的后台正在运行或者被挂起的任务信息 jobs ##查看后台运营的进程号 jobs -p ##查看现在被终止或者退出的进程号 jobs -n ##kill命令 终止一个前台进程可以使用Ctrl+C键 kill 通过top或者ps获取进程id号 kill [-s 信号 | -p ] [ -a ] 进程号 ... ##发送指定的信号到相应进程。不指定型号将发送SIGTERM（15）终止指定进程。关闭进程号12的进程 kill 12 ##等同于在前台运行PID为123的进程时按下Ctrl+C键 kill -2 123 ##如果任无法终止该程序可用“-KILL” 参数，其发送的信号为SIGKILL(9) ，将强制结束进程 kill -9 123 ##列出所有信号名称 ##HUP 1 终端断线 ##INT 2 中断（同 Ctrl + C） ##QUIT 3 退出（同 Ctrl + \\） ##TERM 15 终止 ##KILL 9 强制终止 ##CONT 18 继续（与STOP相反， fg/bg命令） ##STOP 19 暂停（同 Ctrl + Z） kill -l ##得到指定信号的数值 kill -l KILL ##杀死指定用户所有进程 kill -u peidalinux kill -9 $(ps -ef | grep peidalinux) ##将后台中的命令调至前台继续运行 将进程123调至前台执行 fg 123 ##将一个在后台暂停的命令，变成继续执行 bg 123 ##该命令可以在你退出帐户/关闭终端之后继续运行相应的进程。nohup就是不挂起的意思 下面输出被重定向到myout.file文件中 nohup command \u0026gt; myout.file 2\u0026gt;\u0026amp;1 \u0026amp; ##at：计划任务，在特定的时间执行某项工作，在特定的时间执行一次。 ## 格式：at HH:MM YYYY-MM-DD //HH（小时）:MM（分钟） YYYY（年）-MM（月份）-DD（日） ##HH[am pm]+D(天) days //HH（小时）[am（上午）pm（下午）]+days（天） at 12:00（时间） //at命令设定12:00执行一项操作 #at\u0026gt;useradd aaa //在at命令里设定添加用户aaa #ctrl+d //退出at命令 #tail -f /etc/passwd //查看/etc/passwd文件后十行是否增加了一个用户aaa ##计划任务设定后，在没有执行之前我们可以用atq命令来查看系统没有执行工作任务。 atq ##启动计划任务后，如果不想启动设定好的计划任务可以使用atrm命令删除。 atrm 1 //删除计划任务1 ##pstree命令：列出当前的进程，以及它们的树状结构 格式：pstree [选项] [pid|user] pstree ##nice命令：改变程序执行的优先权等级 应用程序优先权值的范围从-20～19，数字越小，优先权就越高。一般情况下，普通应用程序的优先权值（CPU使用权值）都是0，如果让常用程序拥有较高的优先权等级，自然启动和运行速度都会快些。需要注意的是普通用户只能在0～19之间调整应用程序的优先权值，只有超级用户有权调整更高的优先权值（从-20～19）。 nice [-n \u0026lt;优先等级\u0026gt;][--help][--version][命令] nice -n 5 ls ##sleep命令：使进程暂停执行一段时间 date;sleep 1m;date ##renice命令 renice命令允许用户修改一个正在运行进程的优先权。利用renice命令可以在命令执行时调整其优先权。 ##其中，参数number与nice命令的number意义相同。（1） 用户只能对自己所有的进程使用renice命令。（2） root用户可以在任何进程上使用renice命令。（3） 只有root用户才能提高进程的优先权 renice -5 -p 5200 #PID为5200的进程nice设为-5 ##pmap命令用于显示一个或多个进程的内存状态。其报告进程的地址空间和内存状态信息 #pmap PID pmap 20367 javadump.sh 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 #!/bin/sh DUMP_PIDS=`ps --no-heading -C java -f --width 1000 |awk \u0026#39;{print $2}\u0026#39;` if [ -z \u0026#34;$DUMP_PIDS\u0026#34; ]; then echo \u0026#34;The server $HOST_NAME is not started!\u0026#34; exit 1; fi DUMP_ROOT=~/dump if [ ! -d $DUMP_ROOT ]; then mkdir $DUMP_ROOT fi DUMP_DATE=`date +%Y%m%d%H%M%S` DUMP_DIR=$DUMP_ROOT/dump-$DUMP_DATE if [ ! -d $DUMP_DIR ]; then mkdir $DUMP_DIR fi for PID in $DUMP_PIDS ; do #Full thread dump 用来查线程占用，死锁等问题 $JAVA_HOME/bin/jstack $PID \u0026gt; $DUMP_DIR/jstack-$PID.dump 2\u0026gt;\u0026amp;1 echo -e \u0026#34;.\\c\u0026#34; #打印出一个给定的Java进程、Java core文件或远程Debug服务器的Java配置信息，具体包括Java系统属性和JVM命令行参数。 $JAVA_HOME/bin/jinfo $PID \u0026gt; $DUMP_DIR/jinfo-$PID.dump 2\u0026gt;\u0026amp;1 echo -e \u0026#34;.\\c\u0026#34; #jstat能够动态打印jvm(Java Virtual Machine Statistics Monitoring Tool)的相关统计信息。如young gc执行的次数、full gc执行的次数，各个内存分区的空间大小和可使用量等信息。 $JAVA_HOME/bin/jstat -gcutil $PID \u0026gt; $DUMP_DIR/jstat-gcutil-$PID.dump 2\u0026gt;\u0026amp;1 echo -e \u0026#34;.\\c\u0026#34; $JAVA_HOME/bin/jstat -gccapacity $PID \u0026gt; $DUMP_DIR/jstat-gccapacity-$PID.dump 2\u0026gt;\u0026amp;1 echo -e \u0026#34;.\\c\u0026#34; #未指定选项时，jmap打印共享对象的映射。对每个目标VM加载的共享对象，其起始地址、映射大小及共享对象文件的完整路径将被打印出来， $JAVA_HOME/bin/jmap $PID \u0026gt; $DUMP_DIR/jmap-$PID.dump 2\u0026gt;\u0026amp;1 echo -e \u0026#34;.\\c\u0026#34; #-heap打印堆情况的概要信息，包括堆配置，各堆空间的容量、已使用和空闲情况 $JAVA_HOME/bin/jmap -heap $PID \u0026gt; $DUMP_DIR/jmap-heap-$PID.dump 2\u0026gt;\u0026amp;1 echo -e \u0026#34;.\\c\u0026#34; #-dump将jvm的堆中内存信息输出到一个文件中,然后可以通过eclipse memory analyzer进行分析 #注意：这个jmap使用的时候jvm是处在假死状态的，只能在服务瘫痪的时候为了解决问题来使用，否则会造成服务中断。 $JAVA_HOME/bin/jmap -dump:format=b,file=$DUMP_DIR/jmap-dump-$PID.dump $PID 2\u0026gt;\u0026amp;1 echo -e \u0026#34;.\\c\u0026#34; #显示被进程打开的文件信息 if [ -r /usr/sbin/lsof ]; then /usr/sbin/lsof -p $PID \u0026gt; $DUMP_DIR/lsof-$PID.dump echo -e \u0026#34;.\\c\u0026#34; fi done #主要负责收集、汇报与存储系统运行信息的。 if [ -r /usr/bin/sar ]; then /usr/bin/sar \u0026gt; $DUMP_DIR/sar.dump echo -e \u0026#34;.\\c\u0026#34; fi #主要负责收集、汇报与存储系统运行信息的。 if [ -r /usr/bin/uptime ]; then /usr/bin/uptime \u0026gt; $DUMP_DIR/uptime.dump echo -e \u0026#34;.\\c\u0026#34; fi #内存查看 if [ -r /usr/bin/free ]; then /usr/bin/free -t \u0026gt; $DUMP_DIR/free.dump echo -e \u0026#34;.\\c\u0026#34; fi #可以得到关于进程、内存、内存分页、堵塞IO、traps及CPU活动的信息。 if [ -r /usr/bin/vmstat ]; then /usr/bin/vmstat \u0026gt; $DUMP_DIR/vmstat.dump echo -e \u0026#34;.\\c\u0026#34; fi #报告与CPU相关的一些统计信息 if [ -r /usr/bin/mpstat ]; then /usr/bin/mpstat \u0026gt; $DUMP_DIR/mpstat.dump echo -e \u0026#34;.\\c\u0026#34; fi #报告与IO相关的一些统计信息 if [ -r /usr/bin/iostat ]; then /usr/bin/iostat \u0026gt; $DUMP_DIR/iostat.dump echo -e \u0026#34;.\\c\u0026#34; fi #报告与网络相关的一些统计信息 if [ -r /bin/netstat ]; then /bin/netstat \u0026gt; $DUMP_DIR/netstat.dump echo -e \u0026#34;.\\c\u0026#34; fi echo \u0026#34;OK!\u0026#34; 常用工具安装 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 #!/usr/bin/env bash # --------------------------------------------------------------------------------- # 控制台颜色 BLACK=\u0026#34;\\033[1;30m\u0026#34; RED=\u0026#34;\\033[1;31m\u0026#34; GREEN=\u0026#34;\\033[1;32m\u0026#34; YELLOW=\u0026#34;\\033[1;33m\u0026#34; BLUE=\u0026#34;\\033[1;34m\u0026#34; PURPLE=\u0026#34;\\033[1;35m\u0026#34; CYAN=\u0026#34;\\033[1;36m\u0026#34; RESET=\u0026#34;$(tput sgr0)\u0026#34; # --------------------------------------------------------------------------------- printf \u0026#34;${BLUE}\\n\u0026#34; cat \u0026lt;\u0026lt; EOF ################################################################################### # 安装常用命令工具 # 命令工具清单如下： # 核心工具：df、du、chkconfig # 网络工具：ifconfig、netstat、route、iptables # IP工具：ip、ss、ping、tracepath、traceroute # DNS工具：dig、host、nslookup、whois # 端口工具：lsof、nc、telnet # 下载工具：curl、wget # 编辑工具：emacs、vim # 流量工具：iftop、nethogs # 抓包工具：tcpdump # 压缩工具：unzip、zip # 版本控制工具：git、subversion # ################################################################################### EOF printf \u0026#34;${RESET}\\n\u0026#34; printf \u0026#34;\\n${GREEN}\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; 安装常用命令工具开始${RESET}\\n\u0026#34; # 核心工具 printf \u0026#34;\\n${CYAN}\u0026gt;\u0026gt;\u0026gt;\u0026gt; install coreutils(df、du)${RESET}\\n\u0026#34; yum install -y coreutils printf \u0026#34;\\n${CYAN}\u0026gt;\u0026gt;\u0026gt;\u0026gt; install chkconfig${RESET}\\n\u0026#34; yum install -y chkconfig # 网络工具 printf \u0026#34;\\n${CYAN}\u0026gt;\u0026gt;\u0026gt;\u0026gt; install net-tools(ifconfig、netstat、route)${RESET}\\n\u0026#34; yum install -y net-tools printf \u0026#34;\\n${CYAN}\u0026gt;\u0026gt;\u0026gt;\u0026gt; install iptables${RESET}\\n\u0026#34; yum install -y iptables # IP工具 printf \u0026#34;\\n${CYAN}\u0026gt;\u0026gt;\u0026gt;\u0026gt; install iputils(ping、tracepath)${RESET}\\n\u0026#34; yum install -y iputils printf \u0026#34;\\n${CYAN}\u0026gt;\u0026gt;\u0026gt;\u0026gt; install traceroute${RESET}\\n\u0026#34; yum install -y traceroute printf \u0026#34;\\n${CYAN}\u0026gt;\u0026gt;\u0026gt;\u0026gt; install iproute(ip、ss)${RESET}\\n\u0026#34; yum install -y iproute # 端口工具 printf \u0026#34;\\n${CYAN}\u0026gt;\u0026gt;\u0026gt;\u0026gt; install lsof${RESET}\\n\u0026#34; yum install -y lsof printf \u0026#34;\\n${CYAN}\u0026gt;\u0026gt;\u0026gt;\u0026gt; install nc${RESET}\\n\u0026#34; yum install -y nc printf \u0026#34;\\n${CYAN}\u0026gt;\u0026gt;\u0026gt;\u0026gt; install netstat${RESET}\\n\u0026#34; yum install -y netstat # DNS工具 printf \u0026#34;\\n${CYAN}\u0026gt;\u0026gt;\u0026gt;\u0026gt; install bind-utils(dig、host、nslookup)${RESET}\\n\u0026#34; yum install -y bind-utils printf \u0026#34;\\n${CYAN}\u0026gt;\u0026gt;\u0026gt;\u0026gt; install whois${RESET}\\n\u0026#34; yum install -y whois # 下载工具 printf \u0026#34;\\n${CYAN}\u0026gt;\u0026gt;\u0026gt;\u0026gt; install curl${RESET}\\n\u0026#34; yum install -y curl printf \u0026#34;\\n${CYAN}\u0026gt;\u0026gt;\u0026gt;\u0026gt; install wget${RESET}\\n\u0026#34; yum install -y wget # 编辑工具 printf \u0026#34;\\n${CYAN}\u0026gt;\u0026gt;\u0026gt;\u0026gt; install emacs${RESET}\\n\u0026#34; yum install -y emacs printf \u0026#34;\\n${CYAN}\u0026gt;\u0026gt;\u0026gt;\u0026gt; install vim${RESET}\\n\u0026#34; yum install -y vim # 流量工具 printf \u0026#34;\\n${CYAN}\u0026gt;\u0026gt;\u0026gt;\u0026gt; install iftop${RESET}\\n\u0026#34; yum install -y iftop printf \u0026#34;\\n${CYAN}\u0026gt;\u0026gt;\u0026gt;\u0026gt; install nethogs${RESET}\\n\u0026#34; yum install -y nethogs # 抓包工具 printf \u0026#34;\\n${CYAN}\u0026gt;\u0026gt;\u0026gt;\u0026gt; install tcpdump${RESET}\\n\u0026#34; yum install -y tcpdump # 压缩工具 printf \u0026#34;\\n${CYAN}\u0026gt;\u0026gt;\u0026gt;\u0026gt; install unzip${RESET}\\n\u0026#34; yum install -y unzip # 版本控制工具 printf \u0026#34;\\n${CYAN}\u0026gt;\u0026gt;\u0026gt;\u0026gt; install git${RESET}\\n\u0026#34; yum install -y git printf \u0026#34;\\n${CYAN}\u0026gt;\u0026gt;\u0026gt;\u0026gt; install subversion${RESET}\\n\u0026#34; yum install -y subversion printf \u0026#34;\\n${GREEN}\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; 安装常用命令工具结束${RESET}\\n\u0026#34; 常用lib库安装 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 #!/usr/bin/env bash # --------------------------------------------------------------------------------- # 控制台颜色 BLACK=\u0026#34;\\033[1;30m\u0026#34; RED=\u0026#34;\\033[1;31m\u0026#34; GREEN=\u0026#34;\\033[1;32m\u0026#34; YELLOW=\u0026#34;\\033[1;33m\u0026#34; BLUE=\u0026#34;\\033[1;34m\u0026#34; PURPLE=\u0026#34;\\033[1;35m\u0026#34; CYAN=\u0026#34;\\033[1;36m\u0026#34; RESET=\u0026#34;$(tput sgr0)\u0026#34; # --------------------------------------------------------------------------------- printf \u0026#34;${BLUE}\\n\u0026#34; cat \u0026lt;\u0026lt; EOF ################################################################################### # 安装常见 lib # 如果不知道命令在哪个 lib，可以使用 yum search xxx 来查找 # lib 清单如下： # gcc gcc-c++ kernel-devel libtool # openssl openssl-devel # zlib zlib-devel # pcre ################################################################################### EOF printf \u0026#34;${RESET}\\n\u0026#34; printf \u0026#34;\\n${GREEN}\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; 安装常见 lib 开始${RESET}\\n\u0026#34; printf \u0026#34;\\n${CYAN}\u0026gt;\u0026gt;\u0026gt;\u0026gt; install gcc gcc-c++ kernel-devel libtool${RESET}\\n\u0026#34; yum -y install make gcc gcc-c++ kernel-devel libtool printf \u0026#34;\\n${CYAN}\u0026gt;\u0026gt;\u0026gt;\u0026gt; install openssl openssl-devel${RESET}\\n\u0026#34; yum -y install make openssl openssl-devel printf \u0026#34;\\n${CYAN}\u0026gt;\u0026gt;\u0026gt;\u0026gt; install zlib zlib-devel${RESET}\\n\u0026#34; yum -y install make zlib zlib-devel printf \u0026#34;\\n${CYAN}\u0026gt;\u0026gt;\u0026gt;\u0026gt; install pcre${RESET}\\n\u0026#34; yum -y install pcre printf \u0026#34;\\n${GREEN}\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; 安装常见 lib 结束${RESET}\\n\u0026#34; 系统检查脚本usr/bin/env bash ############################################################################## # console color C_RESET=\u0026#34;$(tput sgr0)\u0026#34; C_BLACK=\u0026#34;\\033[1;30m\u0026#34; C_RED=\u0026#34;\\033[1;31m\u0026#34; C_GREEN=\u0026#34;\\033[1;32m\u0026#34; C_YELLOW=\u0026#34;\\033[1;33m\u0026#34; C_BLUE=\u0026#34;\\033[1;34m\u0026#34; C_PURPLE=\u0026#34;\\033[1;35m\u0026#34; C_CYAN=\u0026#34;\\033[1;36m\u0026#34; C_WHITE=\u0026#34;\\033[1;37m\u0026#34; ############################################################################## printf \u0026#34;${C_PURPLE}\u0026#34; cat \u0026lt;\u0026lt; EOF ################################################################################### # 系统信息检查脚本 ################################################################################### EOF printf \u0026#34;${C_RESET}\u0026#34; [[ $(id -u) -gt 0 ]] \u0026amp;\u0026amp; echo \u0026#34;请用root用户执行此脚本！\u0026#34; \u0026amp;\u0026amp; exit 1 sysversion=$(rpm -q centos-release | cut -d- -f3) double_line=\u0026#34;===============================================================\u0026#34; line=\u0026#34;----------------------------------------------\u0026#34; # 打印头部信息 printHeadInfo() { cat \u0026lt;\u0026lt; EOF +---------------------------------------------------------------------------------+ | 欢迎使用 【系统信息检查脚本】 | +---------------------------------------------------------------------------------+ EOF } # 打印尾部信息 printFootInfo() { cat \u0026lt;\u0026lt; EOF +---------------------------------------------------------------------------------+ | 脚本执行结束，感谢使用！| +---------------------------------------------------------------------------------+ EOF } options=( \u0026#34;获取系统信息\u0026#34; \u0026#34;获取服务信息\u0026#34; \u0026#34;获取CPU信息\u0026#34; \u0026#34;获取系统网络信息\u0026#34; \u0026#34;获取系统内存信息\u0026#34; \u0026#34;获取系统磁盘信息\u0026#34; \u0026#34;获取CPU/内存占用TOP10\u0026#34; \u0026#34;获取系统用户信息\u0026#34; \u0026#34;输出所有信息\u0026#34; \u0026#34;退出\u0026#34; ) printMenu() { printf \u0026#34;${C_BLUE}\u0026#34; printf \u0026#34;主菜单：\\n\u0026#34; for i in \u0026#34;${!options[@]}\u0026#34;; do index=`expr ${i} + 1` val=`expr ${index} % 2` printf \u0026#34;\\t(%02d) %-30s\u0026#34; \u0026#34;${index}\u0026#34; \u0026#34;${options[$i]}\u0026#34; if [[ ${val} -eq 0 ]]; then printf \u0026#34;\\n\u0026#34; fi done printf \u0026#34;${C_BLUE}请输入需要执行的指令：\\n\u0026#34; printf \u0026#34;${C_RESET}\u0026#34; } # 获取系统信息 get_systatus_info() { sys_os=$(uname -o) sys_release=$(cat /etc/redhat-release) sys_kernel=$(uname -r) sys_hostname=$(hostname) sys_selinux=$(getenforce) sys_lang=$(echo $LANG) sys_lastreboot=$(who -b | awk \u0026#39;{print $3,$4}\u0026#39;) sys_runtime=$(uptime | awk \u0026#39;{print $3,$4}\u0026#39; | cut -d, -f1) sys_time=$(date) sys_load=$(uptime | cut -d: -f5) cat \u0026lt;\u0026lt; EOF 【系统信息】 系统: ${sys_os} 发行版本: ${sys_release} 系统内核: ${sys_kernel} 主机名: ${sys_hostname} selinux状态: ${sys_selinux} 系统语言: ${sys_lang} 系统当前时间: ${sys_time} 系统最后重启时间: ${sys_lastreboot} 系统运行时间: ${sys_runtime} 系统负载: ${sys_load} EOF } # 获取CPU信息 get_cpu_info() { Physical_CPUs=$(grep \u0026#34;physical id\u0026#34; /proc/cpuinfo | sort | uniq | wc -l) Virt_CPUs=$(grep \u0026#34;processor\u0026#34; /proc/cpuinfo | wc -l) CPU_Kernels=$(grep \u0026#34;cores\u0026#34; /proc/cpuinfo | uniq | awk -F \u0026#39;: \u0026#39; \u0026#39;{print $2}\u0026#39;) CPU_Type=$(grep \u0026#34;model name\u0026#34; /proc/cpuinfo | awk -F \u0026#39;: \u0026#39; \u0026#39;{print $2}\u0026#39; | sort | uniq) CPU_Arch=$(uname -m) cat \u0026lt;\u0026lt; EOF 【CPU信息】 物理CPU个数:$Physical_CPUs 逻辑CPU个数:$Virt_CPUs 每CPU核心数:$CPU_Kernels CPU型号:$CPU_Type CPU架构:$CPU_Arch EOF } # 获取服务信息 get_service_info() { port_listen=$(netstat -lntup | grep -v \u0026#34;Active Internet\u0026#34;) kernel_config=$(sysctl -p 2\u0026gt; /dev/null) if [[ ${sysversion} -gt 6 ]]; then service_config=$(systemctl list-unit-files --type=service --state=enabled | grep \u0026#34;enabled\u0026#34;) run_service=$(systemctl list-units --type=service --state=running | grep \u0026#34;.service\u0026#34;) else service_config=$(/sbin/chkconfig | grep -E \u0026#34;:on|:启用\u0026#34; | column -t) run_service=$(/sbin/service --status-all | grep -E \u0026#34;running\u0026#34;) fi cat \u0026lt;\u0026lt; EOF 【服务信息】 ${service_config} ${line} 运行的服务: ${run_service} ${line} 监听端口: ${port_listen} ${line} 内核参考配置: ${kernel_config} EOF } # 获取系统内存信息 get_mem_info() { check_mem=$(free -m) MemTotal=$(grep MemTotal /proc/meminfo | awk \u0026#39;{print $2}\u0026#39;) #KB MemFree=$(grep MemFree /proc/meminfo | awk \u0026#39;{print $2}\u0026#39;) #KB let MemUsed=MemTotal-MemFree MemPercent=$(awk \u0026#34;BEGIN {if($MemTotal==0){printf 100}else{printf \\\u0026#34;%.2f\\\u0026#34;,$MemUsed*100/$MemTotal}}\u0026#34;) report_MemTotal=\u0026#34;$((MemTotal/1024))\u0026#34; \u0026#34;MB\u0026#34; #内存总容量(MB) report_MemFree=\u0026#34;$((MemFree/1024))\u0026#34; \u0026#34;MB\u0026#34; #内存剩余(MB) report_MemUsedPercent=$(free | sed -n \u0026#39;2p\u0026#39; | gawk \u0026#39;x = int(( $3 / $2 ) * 100) {print x}\u0026#39; | sed \u0026#39;s/$/%/\u0026#39;) cat \u0026lt;\u0026lt; EOF 【内存信息】 内存总容量(MB): ${report_MemTotal} 内存剩余量(MB):${report_MemFree} 内存使用率: ${report_MemUsedPercent} EOF } # 获取系统网络信息 get_net_info() { pri_ipadd=$(ip addr | awk \u0026#39;/^[0-9]+: / {}; /inet.*global/ {print gensub(/(.*)\\/(.*)/, \u0026#34;\\\\1\u0026#34;, \u0026#34;g\u0026#34;, $2)}\u0026#39;) pub_ipadd=$(curl ifconfig.me -s) gateway=$(ip route | grep default | awk \u0026#39;{print $3}\u0026#39;) mac_info=$(ip link | egrep -v \u0026#34;lo\u0026#34; | grep link | awk \u0026#39;{print $2}\u0026#39;) dns_config=$(egrep -v \u0026#34;^$|^#\u0026#34; /etc/resolv.conf) route_info=$(route -n) cat \u0026lt;\u0026lt; EOF 【网络信息】 系统公网地址:${pub_ipadd} 系统私网地址:${pri_ipadd} 网关地址:${gateway} MAC地址:${mac_info} 路由信息: ${route_info} DNS 信息: ${dns_config} EOF } # 获取系统磁盘信息 get_disk_info() { disk_info=$(fdisk -l | grep \u0026#34;Disk /dev\u0026#34; | cut -d, -f1) disk_use=$(df -hTP | awk \u0026#39;$2!=\u0026#34;tmpfs\u0026#34;{print}\u0026#39;) disk_percent=$(free | sed -n \u0026#39;2p\u0026#39; | gawk \u0026#39;x = int(( $3 / $2 ) * 100) {print x}\u0026#39; | sed \u0026#39;s/$/%/\u0026#39;) disk_inode=$(df -hiP | awk \u0026#39;$1!=\u0026#34;tmpfs\u0026#34;{print}\u0026#39;) cat \u0026lt;\u0026lt; EOF 【磁盘信息】 ${disk_info} 磁盘使用: ${disk_use} 磁盘使用百分比: ${disk_percent} inode信息: ${disk_inode} EOF } # 获取系统用户信息 get_sys_user() { login_user=$(awk -F: \u0026#39;{if ($NF==\u0026#34;/bin/bash\u0026#34;) print $0}\u0026#39; /etc/passwd) ssh_config=$(egrep -v \u0026#34;^#|^$\u0026#34; /etc/ssh/sshd_config) sudo_config=$(egrep -v \u0026#34;^#|^$\u0026#34; /etc/sudoers | grep -v \u0026#34;^Defaults\u0026#34;) host_config=$(egrep -v \u0026#34;^#|^$\u0026#34; /etc/hosts) crond_config=$(for cronuser in /var/spool/cron/*; do ls ${cronuser} 2\u0026gt; /dev/null | cut -d/ -f5; egrep -v \u0026#34;^$|^#\u0026#34; ${cronuser} 2\u0026gt; /dev/null; echo \u0026#34;\u0026#34;; done) cat \u0026lt;\u0026lt; EOF 【用户信息】 系统登录用户: ${login_user} ${line} ssh 配置信息: ${ssh_config} ${line} sudo 配置用户: ${sudo_config} ${line} 定时任务配置: ${crond_config} ${line} hosts 信息: ${host_config} EOF } # 获取CPU/内存占用TOP10 get_process_top_info() { top_title=$(top -b n1 | head -7 | tail -1) cpu_top10=$(top -b n1 | head -17 | tail -11) mem_top10=$(top -b n1 | head -17 | tail -10 | sort -k10 -r) cat \u0026lt;\u0026lt; EOF 【TOP10】 CPU占用TOP10: ${cpu_top10} 内存占用TOP10: ${top_title} ${mem_top10} EOF } show_dead_process() { printf \u0026#34;僵尸进程：\\n\u0026#34; ps -al | gawk \u0026#39;{print $2,$4}\u0026#39; | grep Z } get_all_info() { get_systatus_info echo ${double_line} get_service_info echo ${double_line} get_cpu_info echo ${double_line} get_net_info echo ${double_line} get_mem_info echo ${double_line} get_disk_info echo ${double_line} get_process_top_info echo ${double_line} get_sys_user } main() { while [[ 1 ]] do printMenu read option local index=$[ ${option} - 1 ] case ${options[${index}]} in \u0026#34;获取系统信息\u0026#34;) get_systatus_info ;; \u0026#34;获取服务信息\u0026#34;) get_service_info ;; \u0026#34;获取CPU信息\u0026#34;) get_cpu_info ;; \u0026#34;获取系统网络信息\u0026#34;) get_net_info ;; \u0026#34;获取系统内存信息\u0026#34;) get_mem_info ;; \u0026#34;获取系统磁盘信息\u0026#34;) get_disk_info ;; \u0026#34;获取CPU/内存占用TOP10\u0026#34;) get_process_top_info ;; \u0026#34;获取系统用户信息\u0026#34;) get_sys_user ;; \u0026#34;输出所有信息\u0026#34;) get_all_info \u0026gt; sys.log printf \u0026#34;${C_GREEN}信息已经输出到 sys.log 中。${C_RESET}\\n\\n\u0026#34; ;; \u0026#34;退出\u0026#34;) exit ;; *) clear echo \u0026#34;抱歉，不支持此选项\u0026#34; ;; esac done } ######################################## MAIN ######################################## printHeadInfo main printFootInfo printf \u0026#34;${C_RESET}\u0026#34; sed进阶 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #!/bin/bash #多个空格只保留一个 #sed \u0026#39;/./,/^$/!d\u0026#39; test #删除开头的空白行 #sed \u0026#39;/./,$!d\u0026#39; test #删除结尾的空白行 sed \u0026#39;{ :start /^\\n*$/{$d; N; b start} }\u0026#39; test #删除html标签 #有问题 #s/\u0026lt;.*\u0026gt;//g #sed \u0026#39;s/\u0026lt;[^\u0026gt;]*\u0026gt;//g\u0026#39; test1 #sed \u0026#39;s/\u0026lt;[^\u0026gt;]*\u0026gt;//g;/^$/d\u0026#39; test1 #and符号，代表替换命令中的匹配模式，不管预定义模式是什么文本，都可以用and符号替换，and符号会提取匹配替换命令中指定替换模式中的所有字符串 echo \u0026#34;The cat sleeps in his hat\u0026#34; | sed \u0026#39;s/.at/\u0026#34;\u0026amp;\u0026#34;/g\u0026#39; #替换单独的单词 echo \u0026#34;The System Administrator manual\u0026#34; | sed \u0026#39;s/\\(System\\) Administrator/\\1 user/\u0026#39; #在长数字中插入逗号 echo \u0026#34;1234567\u0026#34; | sed \u0026#39;{:start; s/\\(.*[0-9]\\)\\([0-9]\\{3\\}\\)/\\1,\\2/; t start}\u0026#39; #给文件中的行编号 sed \u0026#39;=\u0026#39; test | sed \u0026#39;N; s/\\n/ /\u0026#39; - EOF -\n","date":"2023-03-10T00:00:00Z","permalink":"https://96bear.github.io/p/linux-%E5%AE%9E%E7%94%A8%E8%BF%90%E7%BB%B4%E8%84%9A%E6%9C%AC%E5%88%86%E4%BA%AB/","title":"Linux 实用运维脚本分享"},{"content":"环境 centos7 虚拟机环境\n内存6G cpu 2*4 硬盘100G\nx86_64\n下载 (约30分钟)\n在 页面 选择版本下载\n测试时使用的是：\nhttps://ssd.mathworks.com/supportfiles/downloads/R2022a/Release/5/deployment_files/installer/complete/glnxa64/MATLAB_Runtime_R2022a_Update_5_glnxa64.zip\n解压 (约20分钟)\nunzip MATLAB_Runtime_R2022a_Update_5_glnxa64.zip\n1 unzip MATLAB_Runtime_R2022a_Update_5_glnxa64.zip 安装 (约8分钟)\n./install -mode silent -agreeToLicense yes #静默模式安装\n1 ./install -mode silent -agreeToLicense yes #静默模式安装 环境变量 本步骤永久固化环境变量，不建议执行，原因见问题2\n(约1分钟)\nvi /etc/profile\n1 vi /etc/profile 编辑文件加入\nexport LD_LIBRARY_PATH=/usr/local/MATLAB/MATLAB_Runtime/v912/runtime/glnxa64:/usr/local/MATLAB/MATLAB_Runtime/v912/bin/glnxa64:/usr/local/MATLAB/MATLAB_Runtime/v912/sys/os/glnxa64:\nsource /etc/profile\n1 source /etc/profile 测试 占用 cpu 4x4核虚拟机未开启虚拟化100%\nmem 2g左右\n耗时 196秒，处理文件大小2.3m\n（惨不忍睹）\n可能出现的问题 1、GLIBCXX_3.4.21 $ java -jar testJar.jar java: symbol lookup error: /usr/local/MATLAB/MATLAB_Runtime/v912/bin/glnxa64/../../sys/os/glnxa64/libstdc++.so.6: undefined symbol: __cxa_thread_atexit_impl\n1 2 $ java -jar testJar.jar java: symbol lookup error: /usr/local/MATLAB/MATLAB_Runtime/v912/bin/glnxa64/../../sys/os/glnxa64/libstdc++.so.6: undefined symbol: __cxa_thread_atexit_impl 尝试用本地的库链接解决：\nsudo ln -sf /usr/lib64/libstdc++.so.6.0.19 /usr/local/MATLAB/MATLAB_Runtime/v912/sys/os/glnxa64/libstdc++.so.6\n$ java -jar testJar.jar Exception in thread \u0026ldquo;main\u0026rdquo; java.lang.UnsatisfiedLinkError: /usr/local/MATLAB/MATLAB_Runtime/v912/bin/glnxa64/libnativedl.so: /usr/local/MATLAB/MATLAB_Runtime/v912/bin/glnxa64/../../sys/os/glnxa64/libstdc++.so.6: version `GLIBCXX_3.4.21\u0026rsquo; not found (required by /usr/local/MATLAB/MATLAB_Runtime/v912/bin/glnxa64/libnativedl.so)\n1 2 $ java -jar testJar.jar Exception in thread \u0026#34;main\u0026#34; java.lang.UnsatisfiedLinkError: /usr/local/MATLAB/MATLAB_Runtime/v912/bin/glnxa64/libnativedl.so: /usr/local/MATLAB/MATLAB_Runtime/v912/bin/glnxa64/../../sys/os/glnxa64/libstdc++.so.6: version `GLIBCXX_3.4.21\u0026#39; not found (required by /usr/local/MATLAB/MATLAB_Runtime/v912/bin/glnxa64/libnativedl.so) 查询：\nstrings /usr/lib64/libstdc++.so.6 |grep GLIBCXX\n了解 libstdc++.so.6 版本低,该库来自gcc v9以上版本编译，本地gcc版本8.5\n解决 升级GCC（编译安装约一小时），参考 https://zhuanlan.zhihu.com/p/498529973\nhttp://www.45fan.com/article.php?aid=1yHfFmWE9y3w8MG9 升级10.2\n随后\nsudo ln -sf /usr/lib64/libstdc++.so.6.0.28 /usr/local/MATLAB/MATLAB_Runtime/v912/sys/os/glnxa64/libstdc++.so.6\n问题已经解决\n2、yum报错 .so冲突（动态链接库 由于matlab runtime的依赖库造成包括但不限于 yum（基于py2） 的崩溃\npycurl.so There was a problem importing one of the Python modules required to run yum.\n检查命令\nldconfig -p | grep curl\nldd /usr/lib64/python2.7/site-packages/pycurl.so\n很明显 需要的依赖跑偏了\n处理建议 取消永久固化 $LD_LIBRARY_PATH\n仅在所需会话中\nexport LD_LIBRARY_PATH=/usr/local/MATLAB/MATLAB_Runtime/v912/runtime/glnxa64:/usr/local/MATLAB/MATLAB_Runtime/v912/bin/glnxa64:/usr/local/MATLAB/MATLAB_Runtime/v912/sys/os/glnxa64:\n[官方建议](https://ww2.mathworks.cn/help/compiler/m xa64/jre/lib/fonts`\n下载 链接\n# 下载 wget https://jaist.dl.sourceforge.net/project/wqy/wqy-microhei/0.2.0-beta/wqy-microhei-0.2.0-beta.tar.gz\n解压保存 tar -zxvf wqy-microhei-0.2.0-beta.tar.gz mv wqy-microhei /usr/share/fonts/\n复制到matlab jre路径 cp /usr/share/fonts/wqy-microhei/wqy-microhei.ttc /usr/local/MATLAB/MATLAB_Runtime/v912/sys/java/jre/glnxa64/jre/lib/fonts\n进入相应目录 cd /usr/local/MATLAB/MATLAB_Runtime/v912/sys/java/jre/glnxa64/jre/lib/fonts\n生成文件 fonts dir mkfontdir\n建立字体索引 mkfontscale\n1 2 3 4 5 6 7 8 9 10 11 12 13 # 下载 wget https://jaist.dl.sourceforge.net/project/wqy/wqy-microhei/0.2.0-beta/wqy-microhei-0.2.0-beta.tar.gz # 解压保存 tar -zxvf wqy-microhei-0.2.0-beta.tar.gz mv wqy-microhei /usr/share/fonts/ # 复制到matlab jre路径 cp /usr/share/fonts/wqy-microhei/wqy-microhei.ttc /usr/local/MATLAB/MATLAB_Runtime/v912/sys/java/jre/glnxa64/jre/lib/fonts # 进入相应目录 cd /usr/local/MATLAB/MATLAB_Runtime/v912/sys/java/jre/glnxa64/jre/lib/fonts # 生成文件 fonts dir mkfontdir # 建立字体索引 mkfontscale 再次运行，中文字体修复\n","date":"2022-09-22T00:00:00Z","permalink":"https://96bear.github.io/p/centos7-matlab-runtime-%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B/","title":"centos7 matlab runtime 部署流程"},{"content":"genMarkdownTable en: data copy from sql、excel transfer Markdown table\nzh: 从mysql可视化工具、excel表格等复制的数据转化为标准的markdown表格\n或者更多的数据来源，改变函数参数即可\ngithub https://github.com/96bearli/genMarkdownTable\nmain 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 def gen_md_table(cp: str, sp=\u0026#34;\\r\\n\u0026#34;, sp_=\u0026#34;\\t\u0026#34;, header=None): \u0026#34;\u0026#34;\u0026#34; 生成markdown表格 :param cp: str 从sql复制的表格数据，特征是以\\r\\n分行，\\t分隔同行数据 :param sp: str 行末分隔符，默认\u0026#34;\\r\\n\u0026#34; :param sp_: str 同一行数据分隔符，默认\u0026#34;\\t\u0026#34; :param header: list 表头列表，默认[\u0026#34;字段名\u0026#34;, \u0026#34;字段说明\u0026#34;, \u0026#34;字段类型\u0026#34;] :return: str \u0026#34;\u0026#34;\u0026#34; if header is None: header = [\u0026#34;字段名\u0026#34;, \u0026#34;字段说明\u0026#34;, \u0026#34;字段类型\u0026#34;] str_return = \u0026#34;|\u0026#34; + \u0026#34;|\u0026#34;.join(header) + \u0026#34;|\u0026#34; + \u0026#34;\\n\u0026#34; str_return += \u0026#34;| ---- \u0026#34; * header.__len__() + \u0026#34;|\\n\u0026#34; sts = cp.split(\u0026#34;\\r\\n\u0026#34;) for s in sts: if not s: continue str_return += \u0026#39;|\u0026#39; + \u0026#39;|\u0026#39;.join([_ for _ in s.split(\u0026#34;\\t\u0026#34;)]) + \u0026#39;|\\n\u0026#39; return str_return example 1 2 3 4 5 6 7 8 9 10 11 12 13 14 exp = \u0026#34;\u0026#34;\u0026#34;Id station\u0026#39;id varchar(255) CityId city\u0026#39;id varchar(255) StationName name varchar(255)\u0026#34;\u0026#34;\u0026#34; result = gen_md_table(cp=exp, sp=\u0026#34;\\n\u0026#34;, sp_=\u0026#34;\\t\u0026#34;, header=[\u0026#39;name\u0026#39;, \u0026#39;description\u0026#39;, \u0026#39;type\u0026#39;]) print(result) \u0026#34;\u0026#34;\u0026#34;output |name|description|type| | ---- | ---- | ---- | |Id|station\u0026#39;id|varchar(255)| |CityId|city\u0026#39;id|varchar(255)| |StationName|name|varchar(255)| \u0026#34;\u0026#34;\u0026#34; ","date":"2022-08-31T00:00:00Z","permalink":"https://96bear.github.io/p/%E4%BB%8Emysql%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B7%A5%E5%85%B7excel%E8%A1%A8%E6%A0%BC%E7%AD%89%E5%A4%8D%E5%88%B6%E7%9A%84%E6%95%B0%E6%8D%AE%E8%BD%AC%E5%8C%96%E4%B8%BA%E6%A0%87%E5%87%86%E7%9A%84markdown%E8%A1%A8%E6%A0%BC/","title":"从mysql可视化工具、excel表格等复制的数据转化为标准的markdown表格"},{"content":"做的原因是经常处理接口请求，手动解析json，心累，就想能不能有个工具，我想要什么告诉你，直接就给出来代码\n可能有现成的函数可惜我没找到，手写了个，应该能省不少麻烦\n下面是github上的readme\n仓库地址\njson_parser_gen_code little tool | Json Parser |gen code\nuse git clone https://github.com/96bearli/json_parser_gen_code\n1 2 3 4 5 6 7 8 9 10 11 from json_parser_gen_code import json_panser json = {\u0026#34;such\u0026#34;: 1, \u0026#34;as\u0026#34;: \u0026#34;test\u0026#34;, \u0026#34;this\u0026#34;: [\u0026#34;1\u0026#34;, \u0026#34;2\u0026#34;, \u0026#34;3\u0026#34;]} json_panser(json, key=None) \u0026#34;\u0026#34;\u0026#34; :param json: dict des: the dict/json need to deal :param key: [] or \u0026#34;\u0026#34; or default None des: to find the key or not :return: None \u0026#34;\u0026#34;\u0026#34; input json / dict\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 json3 = { \u0026#34;ts\u0026#34;: 1654004500, \u0026#34;code\u0026#34;: 0, \u0026#34;card\u0026#34;: { \u0026#34;mid\u0026#34;: \u0026#34;33521\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;玩的就是心跳\u0026#34;, \u0026#34;approve\u0026#34;: False, \u0026#34;sex\u0026#34;: \u0026#34;保密\u0026#34;, \u0026#34;rank\u0026#34;: \u0026#34;10000\u0026#34;, \u0026#34;face\u0026#34;: \u0026#34;http://i2.hdslb.com/bfs/face/5d2c92beb774a4bb30762538bb102d23670ae9c0.gif\u0026#34;, \u0026#34;coins\u0026#34;: 277, \u0026#34;DisplayRank\u0026#34;: \u0026#34;10000\u0026#34;, \u0026#34;regtime\u0026#34;: 1273493024, \u0026#34;spacesta\u0026#34;: 0, \u0026#34;place\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;1980-01-01\u0026#34;, \u0026#34;sign\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;article\u0026#34;: 0, \u0026#34;attentions\u0026#34;: [ 284836154, 121538100, 33683045, 10217261, 1276787, 197864 ], \u0026#34;fans\u0026#34;: 0, \u0026#34;friend\u0026#34;: 6, \u0026#34;attention\u0026#34;: 6, \u0026#34;level_info\u0026#34;: { \u0026#34;next_exp\u0026#34;: 28800, \u0026#34;current_level\u0026#34;: 5, \u0026#34;current_min\u0026#34;: 10800, \u0026#34;current_exp\u0026#34;: 11165 }, \u0026#34;pendant\u0026#34;: { \u0026#34;pid\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;image\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;expire\u0026#34;: 0 }, \u0026#34;official_verify\u0026#34;: { \u0026#34;type\u0026#34;: -1, \u0026#34;desc\u0026#34;: \u0026#34;\u0026#34; } } } output 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 ts = json3[\u0026#39;ts\u0026#39;] code = json3[\u0026#39;code\u0026#39;] dict_card = json3[\u0026#39;card\u0026#39;] mid = json3[\u0026#39;card\u0026#39;][\u0026#39;mid\u0026#39;] name = json3[\u0026#39;card\u0026#39;][\u0026#39;name\u0026#39;] approve = json3[\u0026#39;card\u0026#39;][\u0026#39;approve\u0026#39;] sex = json3[\u0026#39;card\u0026#39;][\u0026#39;sex\u0026#39;] rank = json3[\u0026#39;card\u0026#39;][\u0026#39;rank\u0026#39;] face = json3[\u0026#39;card\u0026#39;][\u0026#39;face\u0026#39;] coins = json3[\u0026#39;card\u0026#39;][\u0026#39;coins\u0026#39;] DisplayRank = json3[\u0026#39;card\u0026#39;][\u0026#39;DisplayRank\u0026#39;] regtime = json3[\u0026#39;card\u0026#39;][\u0026#39;regtime\u0026#39;] spacesta = json3[\u0026#39;card\u0026#39;][\u0026#39;spacesta\u0026#39;] place = json3[\u0026#39;card\u0026#39;][\u0026#39;place\u0026#39;] birthday = json3[\u0026#39;card\u0026#39;][\u0026#39;birthday\u0026#39;] sign = json3[\u0026#39;card\u0026#39;][\u0026#39;sign\u0026#39;] description = json3[\u0026#39;card\u0026#39;][\u0026#39;description\u0026#39;] article = json3[\u0026#39;card\u0026#39;][\u0026#39;article\u0026#39;] list_attentions = json3[\u0026#39;card\u0026#39;][\u0026#39;attentions\u0026#39;] for attentions_item in json3[\u0026#39;card\u0026#39;][\u0026#39;attentions\u0026#39;]: print(attentions_item) fans = json3[\u0026#39;card\u0026#39;][\u0026#39;fans\u0026#39;] friend = json3[\u0026#39;card\u0026#39;][\u0026#39;friend\u0026#39;] attention = json3[\u0026#39;card\u0026#39;][\u0026#39;attention\u0026#39;] dict_level_info = json3[\u0026#39;card\u0026#39;][\u0026#39;level_info\u0026#39;] next_exp = json3[\u0026#39;card\u0026#39;][\u0026#39;level_info\u0026#39;][\u0026#39;next_exp\u0026#39;] current_level = json3[\u0026#39;card\u0026#39;][\u0026#39;level_info\u0026#39;][\u0026#39;current_level\u0026#39;] current_min = json3[\u0026#39;card\u0026#39;][\u0026#39;level_info\u0026#39;][\u0026#39;current_min\u0026#39;] current_exp = json3[\u0026#39;card\u0026#39;][\u0026#39;level_info\u0026#39;][\u0026#39;current_exp\u0026#39;] dict_pendant = json3[\u0026#39;card\u0026#39;][\u0026#39;pendant\u0026#39;] pid = json3[\u0026#39;card\u0026#39;][\u0026#39;pendant\u0026#39;][\u0026#39;pid\u0026#39;] name = json3[\u0026#39;card\u0026#39;][\u0026#39;pendant\u0026#39;][\u0026#39;name\u0026#39;] image = json3[\u0026#39;card\u0026#39;][\u0026#39;pendant\u0026#39;][\u0026#39;image\u0026#39;] expire = json3[\u0026#39;card\u0026#39;][\u0026#39;pendant\u0026#39;][\u0026#39;expire\u0026#39;] dict_official_verify = json3[\u0026#39;card\u0026#39;][\u0026#39;official_verify\u0026#39;] type = json3[\u0026#39;card\u0026#39;][\u0026#39;official_verify\u0026#39;][\u0026#39;type\u0026#39;] desc = json3[\u0026#39;card\u0026#39;][\u0026#39;official_verify\u0026#39;][\u0026#39;desc\u0026#39;] ---------- attentions = json3[\u0026#39;card\u0026#39;][\u0026#39;attentions\u0026#39;] ---------- name = json3[\u0026#39;card\u0026#39;][\u0026#39;name\u0026#39;] mid = json3[\u0026#39;card\u0026#39;][\u0026#39;mid\u0026#39;] ","date":"2022-05-31T00:00:00Z","permalink":"https://96bear.github.io/p/json%E8%A7%A3%E6%9E%90%E7%94%9F%E6%88%90python%E4%BB%A3%E7%A0%81/","title":"json解析生成python代码"},{"content":" 1 2 3 4 #初始化powershell conda init powershell #更改powershell的执行策略 Set-ExecutionPolicy -ExecutionPolicy RemoteSigned 重新打开powershell就可以激活了\n","date":"2022-04-27T00:00:00Z","permalink":"https://96bear.github.io/p/win10-powershell%E5%88%87%E6%8D%A2conda%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E6%97%A0%E6%95%88/","title":"win10 powershell切换conda虚拟环境无效"},{"content":"ruoyi 微服务版本 学习上手 http://doc.ruoyi.vip/ruoyi-cloud/ ruoyi 微服务版本文档\n目标 基于centos环境 自行搭建一套nacos微服务中心 然后运行起该项目 进行学习\n搭建记录 [x] ruoyi-cloud大致了解\n[x] Java ide选择安装\n[x] centos云服务器重装\n[x] 服务器安装openjdk8\n[x] centos安装nacos2.0.3_毅大师的博客-CSDN博客_centos nacos\n[x] Maven-CentOS安装_宇枫16的博客-CSDN博客_centos maven安装\n[x] yum install maven （本地构建时发现会自动安装jdk8作为依赖）\n[x] 在bt面板进行宝塔面板下载，免费全能的服务器运维软件 (bt.cn)\n[x] 安装 1 2 3 4 Mysql \u0026gt;= 5.7.0 (推荐5.7版本) Redis \u0026gt;= 3.0 Node \u0026gt;= 12（PM2管理器 5.2） Nginx1.2 [x] 数据库导入 1 2 3、创建数据库ry-cloud并导入数据脚本ry_2021xxxx.sql（必须），quartz.sql（可选） 4、创建数据库ry-config并导入数据脚本ry_config_2021xxxx.sql（必须） [x] 了解mvn命令Maven的使用入门 - jimisun - 博客园\n[x] ~~~shell // 构建jar mvn complile // 对于java工程执行package打成jar包，对于web工程打成war包 mvn package\n[x] [Maven全局配置文件settings.xml详解 - 洪墨水 - 博客园 ](https://www.cnblogs.com/hongmoshui/p/10762272.html#:~:text=settings.xml中包含类似本地仓库、远程仓库和联网使用的代理信息等配置。 ,settings.xml文件一般存在于Maven的安装目录的conf子目录下面，或者是用户目录的.m2子目录下面。 其实相对于多用户的PC机而言，在Maven安装目录的conf子目录下面的settings.xml才是真正的全局的配置。)\n[x] 如何在linux中编译写和运行java代码 - 编程语言 - 亿速云\n[ ] 爆炸了，1C1G已重启三遍，不过应该算是成功了\n[x] 换一个思路，配置不够本地构建\n[x] [VirtualBox]VirtualBox中安装CentOS-8 - 简书 ](https://www.jianshu.com/p/4aee7e81db11)\n[x] 配置ssh，zsh，建立快照\n[x] 文件转移\n[x] 踩坑https://blog.csdn.net/newbie_R/article/details/115920761 要改nacos里ruoyi-system-dev.yml里的sql账密\n[x] 本地搭建成功\n学习参考 http://doc.ruoyi.vip/ruoyi-cloud/\nbing等搜索引擎\n学习任务 [x] ruoyi-cloud文档 [x] 搭建起centos环境 [x] 搭建一套nacos微服务中心 [ ] 再读文档 [ ] 尝试框架更多的功能 [ ] 读源码，学java ","date":"2022-04-25T00:00:00Z","permalink":"https://96bear.github.io/p/ruoyi-cloud-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","title":"ruoyi-cloud 学习笔记"},{"content":"初识C Sharp 历史 C#（读作“See Sharp”）是一种新式编程语言，不仅面向对象，还类型安全。 开发人员利用 C# 能够生成在 .NET 中运行的多种安全可靠的应用程序。 C# 源于 C 语言系列，C、C++、Java 和 JavaScript 程序员很快就可以上手使用。\n特点 是通用编程语言\n面向组件\n产生高效率的程序\n可在多种计算机平台上编译\nC# 是面向对象的、面向组件的编程语言。你需要定义类型及其行为。\n多项 C# 功能有助于创建可靠且持久的应用程序。（异常处理）\nC# 强调版本控制，以确保程序和库以兼容方式随时间推移而变化。\n所有 C# 类型（包括 int 和 double 等基元类型）均继承自一个根 object 类型。 所有类型共用一组通用运算。 任何类型的值都可以一致地进行存储、传输和处理。\nC# 可提供迭代器\nC# 允许动态分配轻型结构的对象和内嵌存储。\n语言集成查询 (LINQ) 语法创建一个公共模式，用于处理来自任何源的数据。\n异步操作语言支持提供用于构建分布式系统的语法。\n能做什么 windows桌面应用程序\nWeb程序\n工控系统\nC#最主要的优势，还是用于游戏开发。（查到Unity官方建议C#）\n如何学习 微软官方Docs和在线练习 过一遍在线教程熟悉一下\n声明和使用变量 1 2 3 4 5 6 7 8 9 string aName = \u0026#34;Bill\u0026#34;; Console.WriteLine(aName); Console.WriteLine(aName+\u0026#34; is me\u0026#34;); Console.WriteLine($\u0026#34;My name is {aName}\u0026#34;);//很熟悉的字符串内插 /*output: Bill Bill is me My name is Bill */ 使用字符串 1 2 3 4 5 6 7 string firstFriend = \u0026#34;Maria\u0026#34;; int Lenth = firstFriend.Length; string secondFriend = \u0026#34;Sage\u0026#34;; Console.WriteLine($\u0026#34;My friends are {firstFriend} and {secondFriend}\u0026#34;); Console.WriteLine($\u0026#34;The name {firstFriend} has {Lenth} letters.\u0026#34;); /*My friends are Maria and Sage The name Maria has 5 letters.*/ 发掘字符串的更多精彩用途 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 string greeting = \u0026#34; Hello World! \u0026#34;; Console.WriteLine($\u0026#34;[{greeting}]\u0026#34;); // .TrimStart() 去行首空格 string trimmedGreeting = greeting.TrimStart(); Console.WriteLine($\u0026#34;[{trimmedGreeting}]\u0026#34;); // .TrimEnd() 去行尾空格 trimmedGreeting = greeting.TrimEnd(); Console.WriteLine($\u0026#34;[{trimmedGreeting}]\u0026#34;); // .Trim() == .TrimStart().TrimEnd() trimmedGreeting = greeting.Trim(); Console.WriteLine($\u0026#34;[{trimmedGreeting}]\u0026#34;); // test string aString = \u0026#34; ac \u0026#34;; Console.WriteLine(aString.TrimStart().TrimEnd()); Console.WriteLine(aString.Trim()); /* ac ac */ 发掘字符串的更多精彩用途 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 string greeting = \u0026#34;Hello World! \u0026#34;; greeting = greeting.Trim(); greeting = greeting.Replace(\u0026#34;Hello\u0026#34;,\u0026#34;Hi\u0026#34;); Console.WriteLine($\u0026#34;{greeting}\u0026#34;); Console.WriteLine($\u0026#34;{greeting.Remove(2)}\u0026#34;); Console.WriteLine($\u0026#34;{greeting.ToUpper()}\u0026#34;); Console.WriteLine($\u0026#34;{greeting.ToLower()}\u0026#34;); Console.WriteLine($\u0026#34;{greeting.ToList()}\u0026#34;); /* Hi World! Hi HI WORLD! hi world! System.Collections.Generic.List`1[System.Char] */ 搜索字符串 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 string songLyrics = \u0026#34;You say goodbye, and I say hello\u0026#34;; Console.WriteLine(songLyrics.Contains(\u0026#34;goodbye\u0026#34;)); var _bool = songLyrics.Contains(\u0026#34;goodbye\u0026#34;); Console.Write($\u0026#34;{_bool}\\n\\r\u0026#34;); Console.WriteLine(songLyrics.Contains(\u0026#34;greetings\u0026#34;)); /*True True False 少自己加换行符 用WriteLine*/ //try _bool = songLyrics.StartsWith(\u0026#34;You\u0026#34;); Console.Write($\u0026#34;{_bool}\\n\\r\u0026#34;); //try2 _bool = songLyrics.StartsWith(\u0026#34;ou\u0026#34;); Console.Write($\u0026#34;{_bool}\\n\\r\u0026#34;); //try3 _bool = songLyrics.EndsWith(\u0026#34;o\u0026#34;); Console.Write($\u0026#34;{_bool}\\n\\r\u0026#34;); /*True False True*/ ","date":"2022-04-24T00:00:00Z","permalink":"https://96bear.github.io/p/%E8%AE%A4%E8%AF%86c/","title":"认识C#"},{"content":"图中这个选项的增加，删除同理。直接上流程\n流程 win + R 输入 regedit 回车打开注册表编辑器\n进入此路径\n1 计算机\\HKEY_CLASSES_ROOT\\directory\\background\\shell shell下新建项，名为pycharm\npycharm下有个默认值，右键修改，数值数据改为“通过Pycharm打开”\npycharm下新建项，名为command\ncommand下有个默认值，右键修改，数值数据改为pycharm64.exe的绝对路径+ \u0026quot;%V\u0026quot;\n（右键pycharm的快捷方式，点击属性查看路径\n可选：为“通过Pycharm打开”前增加图标\npycharm下右键新建-\u0026gt;字符串值，名称：icon，数值数据改为pycharm64.exe的绝对路径\n","date":"2022-03-31T00:00:00Z","permalink":"https://96bear.github.io/p/%E5%A2%9E%E5%8A%A0%E5%8F%B3%E9%94%AE%E9%80%89%E9%A1%B9%E9%80%9A%E8%BF%87pycharm%E6%89%93%E5%BC%80/","title":"增加右键选项“通过Pycharm打开”"},{"content":"Git使用经验 最基础 1 2 3 4 git clone url git pull git push Git Config相关 1.设置代理 1 2 git config --global http.proxy http://192.168.1.20:20172 git config --global https.proxy http://192.168.1.20:20172 2.关闭ssl验证 1 git config --global http.sslVerify \u0026#34;false\u0026#34; 3.查看设置 1 git config --global -l branch相关 1.创建分支 1 git branch branch_name 2.查看所有分支 1 git branch -l 3.切换分支 1 git branch branch_name 4.删除分支 1 2 git branch -d branch_name # 强行删除 -d换-D 实际使用 1.如何贡献代码 转载自一步一步教你怎样给Apache Spark贡献代码 | Parallel Labs\n以Apache Spark为例\n到 Apache Spark 的github 页面内点击 fork 按钮 你的github仓库中会出现 spark 这个项目 本地电脑上， 使用 1 2 3 git clone [你的 spark repository 的 github 地址] 例如： git clone git@github.com:gchen/spark.git 本地得到一个叫 spark 的文件夹\n进入该文件夹，使用 1 git remote add upstream https://github.com/apache/spark.git 添加 Apache/spark 的远程地址\n使用** 1 git pull upstream master 得到目前的 Apache/spark 的最新代码，现在我们在 你自己fork的Spark代码仓库的master 这个分支上，以后这个分支就留作跟踪 upstream 的远程代码\n好了，现在你可以开始贡献自己的代码了。 按照开发惯例，我们一般不在自己代码仓库的master上提交新的代码，而是需要为每一个新增的功能或者bugfix新增一个新的branch。使用：\n1 git checkout -b my_change 创建新的分支，现在我们可以在这个分支上更改代码\n添加代码，并提交代码： 1 2 git add . git commit -m “message need to be added here” 提交Pull Request前合并冲突 在我们提交完我们的代码更新之后，一个常见的问题是远程的upstream（即apache/spark)已经有了新的更新，从而会导致我们提交Pull Request时会导致conflict。为此我们可以在提交自己这段代码前手动先把远程其他开发者的commit与我们的commit合并。使用：\n1 git checkout master 切换到我们自己的主分支，使用\n1 git pull upstream master 拉出apache spark的最新的代码。切换回 my_change 分支，使用\n1 2 git checkout my_change git rebase master 然后把自己在my_change分支中的代码更新到在自己github代码仓库的my_change分支中去：\n1 git push origin my_change 将代码提交到自己的仓库。\n提交Pull Request 这时候可以在自己的仓库页面跳转到自己的my_change分支，然后点击 new pull request。按照Spark的风格规定，我们需要在新的Pull Request的标题最前面加上JIRA代号。所以我们需要在System Dashboard上创建一个新的JIRA，例如[SPARK-2859] Update url of Kryo project in related docs)。然后把SPARK-2859这个代号加到你的Pull Request的标题里面。\n例如：[SPARK-2859] Update url of Kryo project in related docs by gchen · Pull Request #1782 · apache/spark · GitHub\nPull Rquest的描述的写法很重要。有几个要点：\n（1）在Pull Request的描述中，一定记得加上你提交的JIRA的url，方便JIRA系统自动把Pull Request的链接加进去，例如[SPARK-2859] Update url of Kryo project in related docs。\n（2）PR的描述要言简意赅，讲清楚你要解决的问题是什么，你怎么解决的。大家可以多参考其他committer提交的PR。\n等待Spark committer审核你的PR。 如果需要进一步的代码修改，你可以继续在本地的my_change分支下commit新的代码，所有新的代码会在”git push origin my_change”之后自动被加入你之前提交的Pull Request中，方便进行问题的跟踪和讨论。\n11**.** 如果一切顺利，具有apache/spark.git 写权限的commiter就会把你的代码merge到apache/spark.git的master里面去了！\nps. 你的代码被merge完之后，就可以把my_change这个分支给删掉了:)\n2.Git push 过的东西，后悔了怎么办 查看你要回到的那个版本\n1 git log 回退到上个版本\n1 git reset --hard HEAD^ 退到/进到指定commit_id\n1 git reset --hard commit_id 修改提交到远程\n1 git push origin HEAD --force ","date":"2022-03-21T00:00:00Z","permalink":"https://96bear.github.io/p/git%E5%9F%BA%E7%A1%80%E5%AE%9E%E6%93%8D%E4%BD%BF%E7%94%A8%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/","title":"Git基础实操使用经验分享"},{"content":"生成器generator 从高天视频处学习\n简单示例 知识点1 使用yield定义生成器函数，调用得到生成器对象\n知识点2\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 def gen(num): while num \u0026gt; 0: yield num num -= 1 return # g是一个生成器对象 g = gen(5) print(next(g)) print(\u0026#34;---------\u0026#34;) print(next(g)) print(\u0026#34;test done\u0026#34;) for i in g: print(i) \u0026#39;\u0026#39;\u0026#39;output 5 分割线 4 test done 3 2 1 \u0026#39;\u0026#39;\u0026#39; 详细解释和生成器的send() 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 def gen(num): while num \u0026gt; 0: tmp = yield num if tmp is not None: num = tmp num -= 1 return # g是一个生成器对象 g = gen(5) print(next(g)) # 等价 print(g.send(None)) print(\u0026#34;---------\u0026#34;) print(next(g)) print(\u0026#34;test done\u0026#34;) print(f\u0026#34;send:{g.send(10)}\u0026#34;) # for loop 等价 i=next(g) loop for i in g: print(i) \u0026#39;\u0026#39;\u0026#39;output 5 分割线 4 test done send:9 8 7 6 5 4 3 2 1\u0026#39;\u0026#39;\u0026#39; ","date":"2022-03-17T00:00:00Z","permalink":"https://96bear.github.io/p/python%E7%94%9F%E6%88%90%E5%99%A8generator%E7%94%A8%E6%B3%95/","title":"Python生成器generator用法"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #python3 import time def timeit(iteration): def inner(f): #*args,**kwargs def wrapper(*args, **kwargs): start = time.time() # _为丢弃变量 for _ in range(iteration): ret = f(*args,**kwargs) print(\u0026#34;Time used(s):\u0026#34;,time.time()-start) return ret return wrapper return inner @timeit(2) def double(n): time.sleep(1) #return 2*n double(2) ","date":"2022-03-17T00:00:00Z","permalink":"https://96bear.github.io/p/python%E8%A3%85%E9%A5%B0%E5%99%A8decorator%E7%9A%84%E7%AE%80%E5%8D%95%E8%AE%A1%E6%97%B6%E7%A4%BA%E4%BE%8B/","title":"python装饰器decorator的简单计时示例"},{"content":" 1 2 3 4 5 6 7 8 9 #edit this config_file sudo vi /etc/ssh/ssh_config #add ServerAliveInterval 50 ServerAliveCountMax 3 #restart sudo /etc/init.d/ssh restart ","date":"2022-03-14T00:00:00Z","permalink":"https://96bear.github.io/p/%E8%A7%A3%E5%86%B3ssh%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E4%B8%8D%E6%93%8D%E4%BD%9C%E8%87%AA%E5%8A%A8%E6%96%AD%E5%BC%80%E7%9A%84%E9%97%AE%E9%A2%98/","title":"解决ssh一段时间不操作自动断开的问题"},{"content":"screen 介绍 使用telnet或SSH远程登录linux时，如果连接非正常中断（远程机器关闭），重新连接时，系统将开一个新的session，无法恢复原来的session.screen命令可以解决这个问题。Screen工具是一个终端多路转接器，在本质上，这意味着你能够使用一个单一的终端窗口运行多终端的应用。\n我的常用命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 #开启一个screen screen -S ssh111 #这里用-S表示给screen起名字 #退出该screen Ctrl-a d #screen内切换前后window Ctrl-a #这里的ctrl-a表示同p/n #screen内查看所以window Ctrl-a w 时按ctrl键和a键，然后再单独按d键。这时退到根终端。 #查看开启的所有screen： screen -ls #进入某个screen： screen -r ssh111#name或id #关闭该session： exit Ctrl-d #在该screen中退出 #强制连接，踢掉原来的 screen -D -r 20791 screen -x -r 20791 #（共享原来的） #screen内创建window Ctrl-a c #screen内切换前后window Ctrl-a p/n #screen内查看所以window Ctrl-a w #切换到第 0..9 个window Ctrl-a 0..9 #kill window，强行关闭当前的 window Ctrl-a k 完整汉化帮助信息 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 语　法： screen [-AmRvx -ls -wipe][-d \u0026lt;作业名称\u0026gt;][-h \u0026lt;行数\u0026gt;][-r \u0026lt;作业名称\u0026gt;][-s ][-S \u0026lt;作业名称\u0026gt;] 补充说明： screen为多重视窗管理程序。此处所谓的视窗，是指一个全屏幕的文字模式画面。通常只有在使用telnet登入主机或是使用老式的终端机时，才有可能用到screen程序。 参　数： -A 将所有的视窗都调整为目前终端机的大小。 -d \u0026lt;作业名称\u0026gt; 将指定的screen作业离线。 -h \u0026lt;行数\u0026gt; 指定视窗的缓冲区行数。 -m 即使目前已在作业中的screen作业，仍强制建立新的screen作业。 -r \u0026lt;作业名称\u0026gt; 恢复离线的screen作业。 -R 先试图恢复离线的作业。若找不到离线的作业，即建立新的screen作业。 -s 指定建立新视窗时，所要执行的shell。 -S \u0026lt;作业名称\u0026gt; 指定screen作业的名称。 -v 显示版本信息。 -x 恢复之前离线的screen作业。 -ls或--list 显示目前所有的screen作业。 -wipe 检查目前所有的screen作业，并删除已经无法使用的screen作业。 python app.py -mongo=local-test -redis=local-test -my_url=local-test 常用screen参数： 在每个screen session 下，所有命令都以 ctrl+a(C-a) 开始。 C-a ? -\u0026gt; Help，显示简单说明 C-a c -\u0026gt; Create，开启新的 window C-a n -\u0026gt; Next，切换到下个 window C-a p -\u0026gt; Previous，前一个 window C-a 0..9-\u0026gt; 切换到第 0..9 个window Ctrl+a [Space] -\u0026gt; 由視窗0循序換到視窗9 C-a C-a -\u0026gt; 在两个最近使用的 window 间切换 C-a x -\u0026gt; 锁住当前的 window，需用用户密码解锁 C-a d -\u0026gt; detach，暂时离开当前session，将目前的 screen session (可能含有多个 windows) 丢到后台执行，并会回到还没进 screen 时的状态，此时在 screen session 里 每个 window 内运行的 process (无论是前台/后台)都在继续执行，即使 logout 也不影响。 C-a z -\u0026gt; 把当前session放到后台执行，用 shell 的 fg 命令則可回去。 C-a w -\u0026gt; Windows，列出已开启的 windows 有那些 C-a t -\u0026gt; Time，显示当前时间，和系统的 load C-a K -\u0026gt; kill window，强行关闭当前的 window C-a [ -\u0026gt; 进入 copy mode，在 copy mode 下可以回滚、搜索、复制就像用使用 vi 一样 C-b Backward，PageUp C-f Forward，PageDown H(大写) High，将光标移至左上角 L Low，将光标移至左下角 0 移到行首 $ 行末 w forward one word，以字为单位往前移 b backward one word，以字为单位往后移 Space 第一次按为标记区起点，第二次按为终点 Esc 结束 copy mode C-a ] -\u0026gt; Paste，把刚刚在 copy mode 选定的内容贴上 ","date":"2022-02-25T00:00:00Z","permalink":"https://96bear.github.io/p/linux%E5%B7%A5%E5%85%B7screen%E7%9A%84%E4%BD%BF%E7%94%A8/","title":"linux工具screen的使用"},{"content":" 1 2 curl \u0026#39;https://api.bilibili.com/x/article/creative/article/update\u0026#39; -H \u0026#39;Accept: application/json, text/javascript, */*; q=0.01\u0026#39; -H \u0026#39;Referer: https://member.bilibili.com/article-text/home?aid=15339143\u0026amp;type=3\u0026#39; -H \u0026#39;Origin: https://member.bilibili.com\u0026#39; -H \u0026#39;User-Agent: Mozilla/5.0 (X11; CrOS x86_64 12239.67.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.102 Safari/537.36\u0026#39; -H \u0026#39;Sec-Fetch-Mode: cors\u0026#39; -H \u0026#39;Content-Type: application/x-www-form-urlencoded; charset=UTF-8\u0026#39; --data \u0026#39;title=%E6%9F%90%E5%91%A8%E5%A7%93%E6%98%8E%E6%98%9F%E8%A1%A8%E7%A4%BA%E4%BB%8A%E5%B9%B4%E5%B0%86%E4%B8%8E%E9%82%A3%E4%B8%AA%E5%A5%B3%E5%9B%A2%E5%B1%95%E5%BC%80%E5%90%88%E4%BD%9C...%E5%B1%95%E5%BC%80\u0026amp;banner_url=https%3A%2F%2Farticle.biliimg.com%2Fbfs%2Farchive%2F0fb2698425062071bb1fa5aec67cf0b268a67dc9.jpg\u0026amp;content=%3Cp%3E%EF%BC%88%E8%AF%B7%E6%B3%A8%E6%84%8F%EF%BC%8C%E8%BF%99%E4%B8%8D%E6%98%AF%E4%B8%80%E7%AF%87%E6%AD%A3%E5%B8%B8%E7%9A%84%E7%AC%94%E8%AE%B0%EF%BC%8C%E8%AF%B7%E5%8B%BF%E4%BB%8E%E7%AC%94%E8%AE%B0%E5%88%97%E8%A1%A8%E4%B8%AD%E7%82%B9%E5%87%BB%E8%BF%9B%E5%85%A5%EF%BC%89%3C%2Fp%3E%3Cp%3E%3Cbr%3E%3C%2Fp%3E%3Cp%3E%E6%A0%87%E9%A2%98%E4%BB%85%E4%BB%A3%E8%A1%A8%E4%B8%AA%E4%BA%BA%E7%9A%84%E6%84%BF%E6%9C%9B%E5%B9%B6%E9%9D%9E%E7%9C%9F%E5%AE%9E%EF%BC%8C%E4%B8%8Easoul%E5%AE%98%E6%96%B9%E6%97%A0%E5%85%B3%3C%2Fp%3E%3Cp%3E%3Cbr%3E%3C%2Fp%3E%3Cp%3E%E6%84%9F%E8%B0%A2%40%3Cspan+class%3D%22ql-color-%23333333%22%3E1414213562373+%E7%A0%94%E5%8F%91%E8%B7%83%E8%BF%81%E6%8A%80%E6%9C%AF%3C%2Fspan%3E%3C%2Fp%3E%3Cp%3E%3Cbr%3E%3C%2Fp%3E%3Cp%3E%3Cbr%3E%3C%2Fp%3E%3Cp%3E......................%3C%2Fp%3E%3Cp%3E...............%3C%2Fp%3E%3Cp%3E.......%3C%2Fp%3E%3Cp%3E%3Cspan+class%3D%22ql-color-%23333333%22%3E%E5%8D%B3%E5%B0%86%E8%B7%83%E8%BF%81%E8%87%B3%3C%2Fspan%3E%E3%80%90A-SOUL%2F%E7%8F%88%E4%B9%90%E3%80%91%E8%88%9E%E8%B9%88%E3%80%8A%E5%A4%9C%E7%9A%84%E7%AC%AC%E4%B8%83%E7%AB%A0%E3%80%8B--%E7%94%B1%E7%9A%87%E7%8F%88%E9%AA%91%E5%A3%AB%E5%91%A8%E6%8A%A5%E5%88%87%E7%89%87%3C%2Fp%3E%3Cp%3E%3Cbr%3E%3C%2Fp%3E%3Cp%3E%3Cbr%3E%3C%2Fp%3E%3Cp%3E%3Cbr%3E%3C%2Fp%3E%3Cp%3E%3Cbr%3E%3C%2Fp%3E%3Cp%3E%3Cbr%3E%3C%2Fp%3E%3Cp%3E%3Cbr%3E%3C%2Fp%3E%3Cp%3E%3Cbr%3E%3C%2Fp%3E%3Cp%3E%3Cbr%3E%3C%2Fp%3E%3Cp%3E%3Cbr%3E%3C%2Fp%3E%3Cp%3E%3Cbr%3E%3C%2Fp%3E%3Cp%3E%3Cbr%3E%3C%2Fp%3E%3Cp%3E%3Cbr%3E%3C%2Fp%3E%3Cp%3E%3Cbr%3E%3C%2Fp%3E%3Cp%3E%3Cbr%3E%3C%2Fp%3E%3Cp%3E%3Cbr%3E%3C%2Fp%3E%3Cp%3E%3Cbr%3E%3C%2Fp%3E%3Cp%3E%3Cbr%3E%3C%2Fp%3E%3Cp%3E%3Cbr%3E%3C%2Fp%3E%3Cp%3E%3Cbr%3E%3C%2Fp%3E%3Cp%3E%3Cbr%3E%3C%2Fp%3E%3Cp%3E%3Cbr%3E%3C%2Fp%3E%3Cp%3E%3Cbr%3E%3C%2Fp%3E%3Cp%3E%3Cbr%3E%3C%2Fp%3E%3Cp%3E%3Cbr%3E%3C%2Fp%3E%3Cp%3E%3Cbr%3E%3C%2Fp%3E%3Cp%3E%3Cspan+class%3D%22color-gray-01%22%3E%E5%91%A8%E6%9D%B0%E4%BC%A6%E7%9A%84%E9%9F%B3%E4%B9%90%E4%B8%8E%E7%94%BB%E9%9D%A2%E4%B8%80%E5%90%91%E7%B4%A7%E5%AF%86%E7%9B%B8%E8%BF%9E%EF%BC%8C%E6%9C%80%E6%96%B0%E4%B8%93%E8%BE%91%E2%80%9C%E4%BE%9D%E7%84%B6%E8%8C%83%E7%89%B9%E8%A5%BF%E2%80%9D%E4%B8%8D%E4%BB%85%E5%9C%A8%E9%9F%B3%E4%B9%90%E4%B8%8A%E5%B8%A6%E7%BB%99%E5%A4%A7%E5%AE%B6%E6%97%A0%E5%B0%BD%E7%9A%84%E7%BE%8E%E5%A5%BD%E6%83%B3%E5%83%8F%EF%BC%8C%E6%8B%8D%E7%85%A7%E6%97%B6%E5%91%A8%E6%9D%B0%E4%BC%A6%E4%B9%9F%E5%B8%A6%E9%A2%86%E5%A4%A7%E5%AE%B6%E7%A9%BF%E6%A2%AD%E6%97%B6%E7%A9%BA%EF%BC%8C%E4%B8%80%E4%B8%8B%E7%BD%AE%E8%BA%AB%E6%AF%81%E7%81%AD%E8%87%B3%E6%9E%81%E7%9A%84%E5%BA%9F%E5%A2%9F%EF%BC%8C%E4%B8%80%E4%B8%8B%E5%8F%88%E5%88%B0%E4%BA%86%E5%8D%8E%E4%B8%BD%E5%A4%8D%E5%8F%A4%E7%9A%84%E7%B9%81%E5%8D%8E%E8%A1%97%E5%A4%B4%EF%BC%81%E6%8C%91%E6%88%98%E5%A4%A7%E5%AE%B6%E7%9A%84%E8%A7%86%E8%A7%89%E7%A5%9E%E7%BB%8F%EF%BC%8C%E5%88%9B%E9%80%A0%E2%80%9CJay%E5%BC%8F%E7%BE%8E%E5%AD%A6%E2%80%9D%EF%BC%81%E8%80%8C%E5%9C%A8%E9%80%A0%E5%9E%8B%E4%B8%8A%E4%B9%9F%E7%AA%81%E6%98%BE%E4%B8%8E%E6%8B%8D%E7%85%A7%E8%83%8C%E6%99%AF%E5%8F%8D%E5%B7%AE%E7%9A%84%E2%80%9C%E5%86%B2%E7%AA%81%E6%84%9F%E2%80%9D%E4%B8%8E%E2%80%9C%E6%88%8F%E5%89%A7%E6%80%A7%E2%80%9D%EF%BC%81%E7%89%B9%E5%88%AB%E7%9A%84%E6%98%AF%E7%BB%A7%E2%80%9C%E8%8C%83%E7%89%B9%E8%A5%BF%E2%80%9D%E4%B8%93%E8%BE%91%E4%B9%8B%E5%90%8E%EF%BC%8C%E7%9B%B8%E9%9A%94%E4%BA%94%E5%B9%B4%EF%BC%8C%E5%91%A8%E6%9D%B0%E4%BC%A6%E9%9A%BE%E5%BE%97%E5%86%8D%E5%BA%A6%E9%9C%B2%E5%87%BA%E8%83%B8%E8%82%8C%EF%BC%8C%E5%B1%95%E7%8E%B0%E5%A5%BDMan%E7%9A%84%E4%B8%80%E9%9D%A2%EF%BC%81%E8%BF%99%E7%85%A7%E7%89%87%E5%9C%A8%E6%8E%A8%E5%87%BA%E7%9A%84%E6%9C%80%E6%96%B0%E4%B8%93%E8%BE%91%E2%80%9C%E4%BE%9D%E7%84%B6%E8%8C%83%E7%89%B9%E8%A5%BF%E2%80%9D%E9%87%8C%E5%A4%B4%EF%BC%8C%E6%AD%A3%E6%98%AF%E5%91%BC%E5%BA%94%E4%BB%96%E7%AC%AC%E4%BA%8C%E5%BC%A0%E4%B8%93%E8%BE%91%E2%80%9C%E8%8C%83%E7%89%B9%E8%A5%BF%E2%80%9D%E7%9A%84%E5%B7%A7%E5%90%88%E4%B9%8B%E5%A4%84%EF%BC%81%3C%2Fspan%3E%3C%2Fp%3E%3Cp%3E%3Cspan+class%3D%22color-gray-01%22%3E%E5%91%A8%E8%91%A3%E7%9A%84%E6%9C%80%E6%96%B0%E4%B8%93%E8%BE%91%E2%80%9C%E4%BE%9D%E7%84%B6%E8%8C%83%E7%89%B9%E8%A5%BF%E2%80%9D%E9%83%A8%E4%BB%BD%E5%86%85%E9%A1%B5%E6%8A%A2%E5%85%88%E6%9B%9D%E5%85%89%EF%BC%81%E6%AD%A4%E6%AC%A1%E6%8B%8D%E7%85%A7%E5%91%88%E7%8E%B0%E2%80%9C%E6%9E%81%E6%AF%81%E7%81%AD%E2%80%9D%E4%B8%8E%E2%80%9C%E6%9E%81%E7%B9%81%E5%8D%8E%E2%80%9D%E4%B8%A4%E7%A7%8D%E5%8D%B0%E8%B1%A1%E7%9A%84%E5%8F%8D%E5%B7%AE%EF%BC%8C%E5%91%A8%E6%9D%B0%E4%BC%A6%E8%A1%A8%E7%A4%BA%EF%BC%9A%E2%80%9C%E8%BF%99%E6%AC%A1%E6%8B%8D%E7%85%A7%E6%98%AF%E8%A6%81%E8%A1%A8%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%9F%8E%E5%B8%82%E7%9A%84%E6%AF%81%E7%81%AD%E4%B8%8E%E7%B9%81%E5%8D%8E%EF%BC%8C%E8%A6%81%E8%A1%A8%E8%BE%BE%E5%87%BA%E5%9C%A8%E6%9C%80%E4%BD%8E%E6%BD%AE%E7%9A%84%E6%97%B6%E5%80%99%E4%BB%8D%E7%84%B6%E8%A6%81%E8%BF%9C%E7%9C%BA%E5%B8%8C%E6%9C%9B%E7%9A%84%E6%A6%82%E5%BF%B5%EF%BC%8C%E6%89%80%E4%BB%A5%E5%A4%A7%E5%AE%B6%E5%9C%A8%E7%85%A7%E7%89%87%E4%B8%8A%E4%BC%9A%E7%9C%8B%E5%88%B0%E5%BE%88%E6%AF%81%E7%81%AD%E5%92%8C%E5%BE%88%E7%B9%81%E5%8D%8E%E7%9A%84%E4%B8%A4%E7%A7%8D%E8%A7%86%E8%A7%89%E6%95%88%E6%9E%9C%EF%BC%81%E2%80%9D%E6%9E%81%E6%AF%81%E7%81%AD%E7%9A%84%E9%83%A8%E4%BB%BD%E5%B0%B1%E5%83%8F%E5%91%A8%E6%9D%B0%E4%BC%A6%E8%BF%99%E5%BC%A0%E8%A3%B8%E4%B8%8A%E5%8D%8A%E8%BA%AB%E7%9A%84%E7%85%A7%E7%89%87%EF%BC%8C%E4%BB%A5%E5%8D%B1%E6%A1%A5%E3%80%81%E8%80%81%E7%83%9F%E5%9B%B1%E3%80%81%E5%BA%9F%E5%A2%9F%E3%80%81%E7%A1%9D%E7%83%9F%E2%80%A6%E7%AD%89%E4%BD%9C%E7%94%B5%E8%84%91%E5%90%8E%E5%88%B6%EF%BC%9B%E6%9E%81%E7%B9%81%E5%8D%8E%E7%9A%84%E9%83%A8%E4%BB%BD%E5%88%99%E6%98%AF%E4%BB%A5%E8%80%97%E8%B5%84%E5%A4%9A%E4%B8%87%E3%80%81%E8%8A%B1%E4%BA%8610%E5%A4%A9%E6%89%80%E6%90%AD%E5%BB%BA%E5%87%BA%E7%9A%84%E5%8D%8E%E4%B8%BD%E5%A4%8D%E5%8F%A4%E8%A1%97%E9%81%93%E4%B8%BA%E5%9C%BA%E6%99%AF%EF%BC%8C%E5%83%8F%E6%98%AF%E7%99%BE%E8%80%81%E6%B1%87%E6%AD%8C%E8%88%9E%E5%89%A7%E7%9A%84%E8%A1%97%E9%81%93%EF%BC%8C%E5%8F%88%E5%83%8F%E5%B8%83%E9%B2%81%E5%85%8B%E6%9E%97%E5%8C%BA%E7%9A%84%E5%98%BB%E5%93%88%E9%BB%91%E8%A1%97%EF%BC%8C%E5%85%B6%E5%AE%9E%E8%BF%99%E9%83%BD%E6%98%AF%E5%87%BA%E8%87%AA%E5%91%A8%E6%9D%B0%E4%BC%A6%E8%84%91%E6%B5%B7%E4%B8%AD%E7%9A%84%E6%83%B3%E5%83%8F%E6%89%80%E5%88%9B%E9%80%A0%E7%9A%84%EF%BC%8C%E6%89%80%E4%BB%A5%E5%B7%A5%E4%BD%9C%E4%BA%BA%E5%91%98%E7%A7%B0%E4%B9%8B%E4%B8%BA%E2%80%9C%E6%9D%B0%E4%BC%A6%E8%A1%97%E2%80%9D%EF%BC%8C%E5%8D%8E%E7%81%AF%E5%88%9D%E4%B8%8A%E7%9A%84%E8%A1%97%E5%A4%B4%E6%8B%9B%E7%89%8C%E4%B8%8A%E8%BF%98%E6%9C%89%E2%80%9CJayChoushow%E2%80%9D%E7%9A%84%E5%AD%97%E6%A0%B7%E4%BA%AE%E8%B5%B7%EF%BC%8C%E9%9C%93%E8%99%B9%E7%81%AF%E8%A3%85%E9%A5%B0%E7%9A%84%E9%A3%8E%E8%BD%A6%E4%B9%9F%E9%9A%8F%E4%B9%8B%E8%BD%AC%E5%8A%A8%EF%BC%8C%E5%9C%BA%E6%99%AF%E7%9A%84%E7%B2%BE%E8%87%B4%E5%86%99%E5%AE%9E%E7%A8%8B%E5%BA%A6%E8%AE%A9%E4%BA%BA%E9%9A%BE%E4%BB%A5%E6%83%B3%E5%83%8F%EF%BC%81%E5%B7%A5%E4%BD%9C%E4%BA%BA%E5%91%98%E4%B9%9F%E8%AE%B6%E5%BC%82%E4%BA%8E%E8%BF%99%E6%A0%B7%E7%9A%84%E5%A5%87%E5%B9%BB%E4%B8%96%E7%95%8C%EF%BC%8C%E7%BA%B7%E7%BA%B7%E6%8B%BF%E8%B5%B7%E7%9B%B8%E6%9C%BA%E5%8F%96%E6%99%AF%EF%BC%8C%E8%BF%9E%E7%88%B1%E6%91%84%E5%BD%B1%E7%9A%84%E5%91%A8%E5%A6%88%E5%A6%88%E4%B9%9F%E4%B8%8D%E4%BE%8B%E5%A4%96%EF%BC%81%E5%9C%A8%E6%96%B0%E4%B8%93%E8%BE%91%E6%8E%A8%E5%87%BA%E4%B9%8B%E5%90%8E%EF%BC%8C%E6%AD%8C%E8%BF%B7%E5%B0%86%E4%BC%9A%E8%BA%AB%E5%8E%86%E5%85%B6%E5%A2%83%EF%BC%8C%E9%A9%B0%E9%AA%8B%E4%BA%8E%E5%91%A8%E6%9D%B0%E4%BC%A6%E7%9A%84%E8%8C%83%E7%89%B9%E8%A5%BF%E9%9F%B3%E4%B9%90%E5%BD%B1%E5%9F%8E%EF%BC%81%E6%9C%89%E8%B6%A3%E7%9A%84%E6%98%AF%EF%BC%8C%E6%9D%B0%E4%BC%A6%E6%9C%89%E4%B8%80%E5%8F%B0%E5%92%8C%E8%87%AA%E5%B7%B1%E5%B9%B4%E7%BA%AA%E4%B8%80%E6%A0%B7%E5%A4%A7%E7%9A%84%E8%93%9D%E8%89%B2%E5%8F%A4%E8%91%A3%E8%B7%91%E8%BD%A6(%E5%B9%B4%E5%87%BA%E5%8E%82CHEVROLET)%EF%BC%8C%E8%BF%99%E6%AC%A1%E6%8B%8D%E7%85%A7%E5%91%A8%E8%91%A3%E4%B9%9F%E6%8A%8A%E8%BF%99%E5%8F%B0%E8%87%AA%E5%B7%B1%E6%98%B5%E7%A7%B0%E7%9A%84%E2%80%9C%E8%9D%99%E8%9D%A0%E8%BD%A6%E2%80%9D%E5%B8%A6%E5%85%A5%E9%95%9C%EF%BC%8C%E5%8D%81%E8%B6%B3%E5%B8%85%E6%B0%94%E6%8B%89%E9%A3%8E%EF%BC%81%3C%2Fspan%3E%3C%2Fp%3E%3Cp%3Esiu%EF%BC%81%3C%2Fp%3E%3Cp%3E%3Cbr%3E%3C%2Fp%3E\u0026amp;summary=%EF%BC%88%E8%AF%B7%E6%B3%A8%E6%84%8F%EF%BC%8C%E8%BF%99%E4%B8%8D%E6%98%AF%E4%B8%80%E7%AF%87%E6%AD%A3%E5%B8%B8%E7%9A%84%E7%AC%94%E8%AE%B0%EF%BC%8C%E8%AF%B7%E5%8B%BF%E4%BB%8E%E7%AC%94%E8%AE%B0%E5%88%97%E8%A1%A8%E4%B8%AD%E7%82%B9%E5%87%BB%E8%BF%9B%E5%85%A5%EF%BC%89%E6%A0%87%E9%A2%98%E4%BB%85%E4%BB%A3%E8%A1%A8%E4%B8%AA%E4%BA%BA%E7%9A%84%E6%84%BF%E6%9C%9B%E5%B9%B6%E9%9D%9E%E7%9C%9F%E5%AE%9E%EF%BC%8C%E4%B8%8Easoul%E5%AE%98%E6%96%B9%E6%97%A0%E5%85%B3%E6%84%9F%E8%B0%A2%401414213562373+%E7%A0%94%E5%8F%91%E8%B7%83%E8%BF%81%E6%8A%80%E6%9C%AF............................................%E5%8D%B3%E5%B0%86%E8%B7%83%E8%BF%81%E8%87%B3%E3%80%90A-SOUL%2F%E7%8F%88%E4%B9%90%E3%80%91%E8%88%9E%E8%B9%88%E3%80%8A%E5%A4%9C%E7%9A%84%E7%AC%AC%E4%B8%83%E7%AB%A0%E3%80%8B--%E7%94%B1%E7%9A%87%E7%8F%88%E9%AA%91%E5%A3%AB%E5%91%A8%E6%8A%A5%E5%88%87%E7%89%87%E5%91%A8%E6%9D%B0%E4%BC%A6%E7%9A%84%E9%9F%B3%E4%B9%90%E4%B8%8E%E7%94%BB%E9%9D%A2%E4%B8%80%E5%90%91%E7%B4%A7%E5%AF%86%E7%9B%B8%E8%BF%9E%EF%BC%8C%E6%9C%80%E6%96%B0%E4%B8%93%E8%BE%91%E2%80%9C%E4%BE%9D%E7%84%B6%E8%8C%83%E7%89%B9%E8%A5%BF%E2%80%9D%E4%B8%8D%E4%BB%85%E5%9C%A8%E9%9F%B3%E4%B9%90%E4%B8%8A%E5%B8%A6%E7%BB%99%E5%A4%A7%E5%AE%B6%E6%97%A0%E5%B0%BD%E7%9A%84%E7%BE%8E%E5%A5%BD%E6%83%B3%E5%83%8F%EF%BC%8C%E6%8B%8D%E7%85%A7%E6%97%B6%E5%91%A8%E6%9D%B0%E4%BC%A6%E4%B9%9F%E5%B8%A6%E9%A2%86%E5%A4%A7%E5%AE%B6%E7%A9%BF%E6%A2%AD%E6%97%B6%E7%A9%BA%EF%BC%8C%E4%B8%80%E4%B8%8B%E7%BD%AE%E8%BA%AB%E6%AF%81%E7%81%AD%E8%87%B3%E6%9E%81%E7%9A%84%E5%BA%9F%E5%A2%9F%EF%BC%8C%E4%B8%80%E4%B8%8B%E5%8F%88%E5%88%B0%E4%BA%86%E5%8D%8E%E4%B8%BD%E5%A4%8D%E5%8F%A4%E7%9A%84%E7%B9%81%E5%8D%8E%E8%A1%97%E5%A4%B4%EF%BC%81%E6%8C%91%E6%88%98%E5%A4%A7%E5%AE%B6%E7%9A%84\u0026amp;words=844\u0026amp;category=42\u0026amp;list_id=0\u0026amp;tid=4\u0026amp;reprint=0\u0026amp;tags=\u0026amp;image_urls=https%3A%2F%2Farticle.biliimg.com%2Fbfs%2Farticle%2Fbanner%2F73d407a343e0cc401ac1a9a6f5bc72291e0e96fd.png\u0026amp;origin_image_urls=https%3A%2F%2Farticle.biliimg.com%2Fbfs%2Farticle%2Fbanner%2F73d407a343e0cc401ac1a9a6f5bc72291e0e96fd.png\u0026amp;dynamic_intro=\u0026amp;media_id=0\u0026amp;spoiler=0\u0026amp;original=1\u0026amp;top_video_bvid=BV1bf4y1m7cc\u0026amp;aid=15339143\u0026amp;up_reply_closed=0\u0026amp;comment_selected=0\u0026amp;publish_time=0\u0026amp;items=\u0026amp;platform=web\u0026amp;buvid=AC9EEACD-CA54-80D8-4E15-E7C7D7AC0A6014869infoc\u0026amp;device=\u0026amp;build=\u0026amp;mobi_app=\u0026amp;csrf=3c861e8e8c9b4ee16223e7e9eee23ca9\u0026#39; --compressed ; curl \u0026#39;https://api.bilibili.com/x/article/creative/article/update\u0026#39; -H \u0026#39;Accept: application/json, text/javascript, */*; q=0.01\u0026#39; -H \u0026#39;Referer: https://member.bilibili.com/article-text/home?aid=15339143\u0026amp;type=3\u0026#39; -H \u0026#39;Origin: https://member.bilibili.com\u0026#39; -H \u0026#39;User-Agent: Mozilla/5.0 (X11; CrOS x86_64 12239.67.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.102 Safari/537.36\u0026#39; -H \u0026#39;Sec-Fetch-Mode: cors\u0026#39; -H \u0026#39;Content-Type: application/x-www-form-urlencoded; charset=UTF-8\u0026#39; --data \u0026#39;title=%E6%9F%90%E5%91%A8%E5%A7%93%E6%98%8E%E6%98%9F%E8%A1%A8%E7%A4%BA%E4%BB%8A%E5%B9%B4%E5%B0%86%E4%B8%8E%E9%82%A3%E4%B8%AA%E5%A5%B3%E5%9B%A2%E5%B1%95%E5%BC%80%E5%90%88%E4%BD%9C...%E5%B1%95%E5%BC%80\u0026amp;banner_url=https%3A%2F%2Farticle.biliimg.com%2Fbfs%2Farchive%2F0fb2698425062071bb1fa5aec67cf0b268a67dc9.jpg\u0026amp;content=%3Cp%3E%EF%BC%88%E8%AF%B7%E6%B3%A8%E6%84%8F%EF%BC%8C%E8%BF%99%E4%B8%8D%E6%98%AF%E4%B8%80%E7%AF%87%E6%AD%A3%E5%B8%B8%E7%9A%84%E7%AC%94%E8%AE%B0%EF%BC%8C%E8%AF%B7%E5%8B%BF%E4%BB%8E%E7%AC%94%E8%AE%B0%E5%88%97%E8%A1%A8%E4%B8%AD%E7%82%B9%E5%87%BB%E8%BF%9B%E5%85%A5%EF%BC%89%3C%2Fp%3E%3Cp%3E%3Cbr%3E%3C%2Fp%3E%3Cp%3E%E6%A0%87%E9%A2%98%E4%BB%85%E4%BB%A3%E8%A1%A8%E4%B8%AA%E4%BA%BA%E7%9A%84%E6%84%BF%E6%9C%9B%E5%B9%B6%E9%9D%9E%E7%9C%9F%E5%AE%9E%EF%BC%8C%E4%B8%8Easoul%E5%AE%98%E6%96%B9%E6%97%A0%E5%85%B3%3C%2Fp%3E%3Cp%3E%3Cbr%3E%3C%2Fp%3E%3Cp%3E%E6%84%9F%E8%B0%A2%40%3Cspan+class%3D%22ql-color-%23333333%22%3E1414213562373+%E7%A0%94%E5%8F%91%E8%B7%83%E8%BF%81%E6%8A%80%E6%9C%AF%3C%2Fspan%3E%3C%2Fp%3E%3Cp%3E%3Cbr%3E%3C%2Fp%3E%3Cp%3E%3Cbr%3E%3C%2Fp%3E%3Cp%3E......................%3C%2Fp%3E%3Cp%3E...............%3C%2Fp%3E%3Cp%3E.......%3C%2Fp%3E%3Cp%3E%3Cspan+class%3D%22ql-color-%23333333%22%3E%E5%8D%B3%E5%B0%86%E8%B7%83%E8%BF%81%E8%87%B3%3C%2Fspan%3E%E3%80%90A-SOUL%2F%E7%8F%88%E4%B9%90%E3%80%91%E8%88%9E%E8%B9%88%E3%80%8A%E5%A4%9C%E7%9A%84%E7%AC%AC%E4%B8%83%E7%AB%A0%E3%80%8B--%E7%94%B1%E7%9A%87%E7%8F%88%E9%AA%91%E5%A3%AB%E5%91%A8%E6%8A%A5%E5%88%87%E7%89%87%3C%2Fp%3E%3Cp%3E%3Cbr%3E%3C%2Fp%3E%3Cp%3E%3Cbr%3E%3C%2Fp%3E%3Cp%3E%3Cbr%3E%3C%2Fp%3E%3Cp%3E%3Cbr%3E%3C%2Fp%3E%3Cp%3E%3Cbr%3E%3C%2Fp%3E%3Cp%3E%3Cbr%3E%3C%2Fp%3E%3Cp%3E%3Cbr%3E%3C%2Fp%3E%3Cp%3E%3Cbr%3E%3C%2Fp%3E%3Cp%3E%3Cbr%3E%3C%2Fp%3E%3Cp%3E%3Cbr%3E%3C%2Fp%3E%3Cp%3E%3Cbr%3E%3C%2Fp%3E%3Cp%3E%3Cbr%3E%3C%2Fp%3E%3Cp%3E%3Cbr%3E%3C%2Fp%3E%3Cp%3E%3Cbr%3E%3C%2Fp%3E%3Cp%3E%3Cbr%3E%3C%2Fp%3E%3Cp%3E%3Cbr%3E%3C%2Fp%3E%3Cp%3E%3Cbr%3E%3C%2Fp%3E%3Cp%3E%3Cbr%3E%3C%2Fp%3E%3Cp%3E%3Cbr%3E%3C%2Fp%3E%3Cp%3E%3Cbr%3E%3C%2Fp%3E%3Cp%3E%3Cbr%3E%3C%2Fp%3E%3Cp%3E%3Cbr%3E%3C%2Fp%3E%3Cp%3E%3Cbr%3E%3C%2Fp%3E%3Cp%3E%3Cbr%3E%3C%2Fp%3E%3Cp%3E%3Cbr%3E%3C%2Fp%3E%3Cp%3E%3Cspan+class%3D%22color-gray-01%22%3E%E5%91%A8%E6%9D%B0%E4%BC%A6%E7%9A%84%E9%9F%B3%E4%B9%90%E4%B8%8E%E7%94%BB%E9%9D%A2%E4%B8%80%E5%90%91%E7%B4%A7%E5%AF%86%E7%9B%B8%E8%BF%9E%EF%BC%8C%E6%9C%80%E6%96%B0%E4%B8%93%E8%BE%91%E2%80%9C%E4%BE%9D%E7%84%B6%E8%8C%83%E7%89%B9%E8%A5%BF%E2%80%9D%E4%B8%8D%E4%BB%85%E5%9C%A8%E9%9F%B3%E4%B9%90%E4%B8%8A%E5%B8%A6%E7%BB%99%E5%A4%A7%E5%AE%B6%E6%97%A0%E5%B0%BD%E7%9A%84%E7%BE%8E%E5%A5%BD%E6%83%B3%E5%83%8F%EF%BC%8C%E6%8B%8D%E7%85%A7%E6%97%B6%E5%91%A8%E6%9D%B0%E4%BC%A6%E4%B9%9F%E5%B8%A6%E9%A2%86%E5%A4%A7%E5%AE%B6%E7%A9%BF%E6%A2%AD%E6%97%B6%E7%A9%BA%EF%BC%8C%E4%B8%80%E4%B8%8B%E7%BD%AE%E8%BA%AB%E6%AF%81%E7%81%AD%E8%87%B3%E6%9E%81%E7%9A%84%E5%BA%9F%E5%A2%9F%EF%BC%8C%E4%B8%80%E4%B8%8B%E5%8F%88%E5%88%B0%E4%BA%86%E5%8D%8E%E4%B8%BD%E5%A4%8D%E5%8F%A4%E7%9A%84%E7%B9%81%E5%8D%8E%E8%A1%97%E5%A4%B4%EF%BC%81%E6%8C%91%E6%88%98%E5%A4%A7%E5%AE%B6%E7%9A%84%E8%A7%86%E8%A7%89%E7%A5%9E%E7%BB%8F%EF%BC%8C%E5%88%9B%E9%80%A0%E2%80%9CJay%E5%BC%8F%E7%BE%8E%E5%AD%A6%E2%80%9D%EF%BC%81%E8%80%8C%E5%9C%A8%E9%80%A0%E5%9E%8B%E4%B8%8A%E4%B9%9F%E7%AA%81%E6%98%BE%E4%B8%8E%E6%8B%8D%E7%85%A7%E8%83%8C%E6%99%AF%E5%8F%8D%E5%B7%AE%E7%9A%84%E2%80%9C%E5%86%B2%E7%AA%81%E6%84%9F%E2%80%9D%E4%B8%8E%E2%80%9C%E6%88%8F%E5%89%A7%E6%80%A7%E2%80%9D%EF%BC%81%E7%89%B9%E5%88%AB%E7%9A%84%E6%98%AF%E7%BB%A7%E2%80%9C%E8%8C%83%E7%89%B9%E8%A5%BF%E2%80%9D%E4%B8%93%E8%BE%91%E4%B9%8B%E5%90%8E%EF%BC%8C%E7%9B%B8%E9%9A%94%E4%BA%94%E5%B9%B4%EF%BC%8C%E5%91%A8%E6%9D%B0%E4%BC%A6%E9%9A%BE%E5%BE%97%E5%86%8D%E5%BA%A6%E9%9C%B2%E5%87%BA%E8%83%B8%E8%82%8C%EF%BC%8C%E5%B1%95%E7%8E%B0%E5%A5%BDMan%E7%9A%84%E4%B8%80%E9%9D%A2%EF%BC%81%E8%BF%99%E7%85%A7%E7%89%87%E5%9C%A8%E6%8E%A8%E5%87%BA%E7%9A%84%E6%9C%80%E6%96%B0%E4%B8%93%E8%BE%91%E2%80%9C%E4%BE%9D%E7%84%B6%E8%8C%83%E7%89%B9%E8%A5%BF%E2%80%9D%E9%87%8C%E5%A4%B4%EF%BC%8C%E6%AD%A3%E6%98%AF%E5%91%BC%E5%BA%94%E4%BB%96%E7%AC%AC%E4%BA%8C%E5%BC%A0%E4%B8%93%E8%BE%91%E2%80%9C%E8%8C%83%E7%89%B9%E8%A5%BF%E2%80%9D%E7%9A%84%E5%B7%A7%E5%90%88%E4%B9%8B%E5%A4%84%EF%BC%81%3C%2Fspan%3E%3C%2Fp%3E%3Cp%3E%3Cspan+class%3D%22color-gray-01%22%3E%E5%91%A8%E8%91%A3%E7%9A%84%E6%9C%80%E6%96%B0%E4%B8%93%E8%BE%91%E2%80%9C%E4%BE%9D%E7%84%B6%E8%8C%83%E7%89%B9%E8%A5%BF%E2%80%9D%E9%83%A8%E4%BB%BD%E5%86%85%E9%A1%B5%E6%8A%A2%E5%85%88%E6%9B%9D%E5%85%89%EF%BC%81%E6%AD%A4%E6%AC%A1%E6%8B%8D%E7%85%A7%E5%91%88%E7%8E%B0%E2%80%9C%E6%9E%81%E6%AF%81%E7%81%AD%E2%80%9D%E4%B8%8E%E2%80%9C%E6%9E%81%E7%B9%81%E5%8D%8E%E2%80%9D%E4%B8%A4%E7%A7%8D%E5%8D%B0%E8%B1%A1%E7%9A%84%E5%8F%8D%E5%B7%AE%EF%BC%8C%E5%91%A8%E6%9D%B0%E4%BC%A6%E8%A1%A8%E7%A4%BA%EF%BC%9A%E2%80%9C%E8%BF%99%E6%AC%A1%E6%8B%8D%E7%85%A7%E6%98%AF%E8%A6%81%E8%A1%A8%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%9F%8E%E5%B8%82%E7%9A%84%E6%AF%81%E7%81%AD%E4%B8%8E%E7%B9%81%E5%8D%8E%EF%BC%8C%E8%A6%81%E8%A1%A8%E8%BE%BE%E5%87%BA%E5%9C%A8%E6%9C%80%E4%BD%8E%E6%BD%AE%E7%9A%84%E6%97%B6%E5%80%99%E4%BB%8D%E7%84%B6%E8%A6%81%E8%BF%9C%E7%9C%BA%E5%B8%8C%E6%9C%9B%E7%9A%84%E6%A6%82%E5%BF%B5%EF%BC%8C%E6%89%80%E4%BB%A5%E5%A4%A7%E5%AE%B6%E5%9C%A8%E7%85%A7%E7%89%87%E4%B8%8A%E4%BC%9A%E7%9C%8B%E5%88%B0%E5%BE%88%E6%AF%81%E7%81%AD%E5%92%8C%E5%BE%88%E7%B9%81%E5%8D%8E%E7%9A%84%E4%B8%A4%E7%A7%8D%E8%A7%86%E8%A7%89%E6%95%88%E6%9E%9C%EF%BC%81%E2%80%9D%E6%9E%81%E6%AF%81%E7%81%AD%E7%9A%84%E9%83%A8%E4%BB%BD%E5%B0%B1%E5%83%8F%E5%91%A8%E6%9D%B0%E4%BC%A6%E8%BF%99%E5%BC%A0%E8%A3%B8%E4%B8%8A%E5%8D%8A%E8%BA%AB%E7%9A%84%E7%85%A7%E7%89%87%EF%BC%8C%E4%BB%A5%E5%8D%B1%E6%A1%A5%E3%80%81%E8%80%81%E7%83%9F%E5%9B%B1%E3%80%81%E5%BA%9F%E5%A2%9F%E3%80%81%E7%A1%9D%E7%83%9F%E2%80%A6%E7%AD%89%E4%BD%9C%E7%94%B5%E8%84%91%E5%90%8E%E5%88%B6%EF%BC%9B%E6%9E%81%E7%B9%81%E5%8D%8E%E7%9A%84%E9%83%A8%E4%BB%BD%E5%88%99%E6%98%AF%E4%BB%A5%E8%80%97%E8%B5%84%E5%A4%9A%E4%B8%87%E3%80%81%E8%8A%B1%E4%BA%8610%E5%A4%A9%E6%89%80%E6%90%AD%E5%BB%BA%E5%87%BA%E7%9A%84%E5%8D%8E%E4%B8%BD%E5%A4%8D%E5%8F%A4%E8%A1%97%E9%81%93%E4%B8%BA%E5%9C%BA%E6%99%AF%EF%BC%8C%E5%83%8F%E6%98%AF%E7%99%BE%E8%80%81%E6%B1%87%E6%AD%8C%E8%88%9E%E5%89%A7%E7%9A%84%E8%A1%97%E9%81%93%EF%BC%8C%E5%8F%88%E5%83%8F%E5%B8%83%E9%B2%81%E5%85%8B%E6%9E%97%E5%8C%BA%E7%9A%84%E5%98%BB%E5%93%88%E9%BB%91%E8%A1%97%EF%BC%8C%E5%85%B6%E5%AE%9E%E8%BF%99%E9%83%BD%E6%98%AF%E5%87%BA%E8%87%AA%E5%91%A8%E6%9D%B0%E4%BC%A6%E8%84%91%E6%B5%B7%E4%B8%AD%E7%9A%84%E6%83%B3%E5%83%8F%E6%89%80%E5%88%9B%E9%80%A0%E7%9A%84%EF%BC%8C%E6%89%80%E4%BB%A5%E5%B7%A5%E4%BD%9C%E4%BA%BA%E5%91%98%E7%A7%B0%E4%B9%8B%E4%B8%BA%E2%80%9C%E6%9D%B0%E4%BC%A6%E8%A1%97%E2%80%9D%EF%BC%8C%E5%8D%8E%E7%81%AF%E5%88%9D%E4%B8%8A%E7%9A%84%E8%A1%97%E5%A4%B4%E6%8B%9B%E7%89%8C%E4%B8%8A%E8%BF%98%E6%9C%89%E2%80%9CJayChoushow%E2%80%9D%E7%9A%84%E5%AD%97%E6%A0%B7%E4%BA%AE%E8%B5%B7%EF%BC%8C%E9%9C%93%E8%99%B9%E7%81%AF%E8%A3%85%E9%A5%B0%E7%9A%84%E9%A3%8E%E8%BD%A6%E4%B9%9F%E9%9A%8F%E4%B9%8B%E8%BD%AC%E5%8A%A8%EF%BC%8C%E5%9C%BA%E6%99%AF%E7%9A%84%E7%B2%BE%E8%87%B4%E5%86%99%E5%AE%9E%E7%A8%8B%E5%BA%A6%E8%AE%A9%E4%BA%BA%E9%9A%BE%E4%BB%A5%E6%83%B3%E5%83%8F%EF%BC%81%E5%B7%A5%E4%BD%9C%E4%BA%BA%E5%91%98%E4%B9%9F%E8%AE%B6%E5%BC%82%E4%BA%8E%E8%BF%99%E6%A0%B7%E7%9A%84%E5%A5%87%E5%B9%BB%E4%B8%96%E7%95%8C%EF%BC%8C%E7%BA%B7%E7%BA%B7%E6%8B%BF%E8%B5%B7%E7%9B%B8%E6%9C%BA%E5%8F%96%E6%99%AF%EF%BC%8C%E8%BF%9E%E7%88%B1%E6%91%84%E5%BD%B1%E7%9A%84%E5%91%A8%E5%A6%88%E5%A6%88%E4%B9%9F%E4%B8%8D%E4%BE%8B%E5%A4%96%EF%BC%81%E5%9C%A8%E6%96%B0%E4%B8%93%E8%BE%91%E6%8E%A8%E5%87%BA%E4%B9%8B%E5%90%8E%EF%BC%8C%E6%AD%8C%E8%BF%B7%E5%B0%86%E4%BC%9A%E8%BA%AB%E5%8E%86%E5%85%B6%E5%A2%83%EF%BC%8C%E9%A9%B0%E9%AA%8B%E4%BA%8E%E5%91%A8%E6%9D%B0%E4%BC%A6%E7%9A%84%E8%8C%83%E7%89%B9%E8%A5%BF%E9%9F%B3%E4%B9%90%E5%BD%B1%E5%9F%8E%EF%BC%81%E6%9C%89%E8%B6%A3%E7%9A%84%E6%98%AF%EF%BC%8C%E6%9D%B0%E4%BC%A6%E6%9C%89%E4%B8%80%E5%8F%B0%E5%92%8C%E8%87%AA%E5%B7%B1%E5%B9%B4%E7%BA%AA%E4%B8%80%E6%A0%B7%E5%A4%A7%E7%9A%84%E8%93%9D%E8%89%B2%E5%8F%A4%E8%91%A3%E8%B7%91%E8%BD%A6(%E5%B9%B4%E5%87%BA%E5%8E%82CHEVROLET)%EF%BC%8C%E8%BF%99%E6%AC%A1%E6%8B%8D%E7%85%A7%E5%91%A8%E8%91%A3%E4%B9%9F%E6%8A%8A%E8%BF%99%E5%8F%B0%E8%87%AA%E5%B7%B1%E6%98%B5%E7%A7%B0%E7%9A%84%E2%80%9C%E8%9D%99%E8%9D%A0%E8%BD%A6%E2%80%9D%E5%B8%A6%E5%85%A5%E9%95%9C%EF%BC%8C%E5%8D%81%E8%B6%B3%E5%B8%85%E6%B0%94%E6%8B%89%E9%A3%8E%EF%BC%81%3C%2Fspan%3E%3C%2Fp%3E%3Cp%3Esiu%EF%BC%81%3C%2Fp%3E%3Cp%3E%3Cbr%3E%3C%2Fp%3E\u0026amp;summary=%EF%BC%88%E8%AF%B7%E6%B3%A8%E6%84%8F%EF%BC%8C%E8%BF%99%E4%B8%8D%E6%98%AF%E4%B8%80%E7%AF%87%E6%AD%A3%E5%B8%B8%E7%9A%84%E7%AC%94%E8%AE%B0%EF%BC%8C%E8%AF%B7%E5%8B%BF%E4%BB%8E%E7%AC%94%E8%AE%B0%E5%88%97%E8%A1%A8%E4%B8%AD%E7%82%B9%E5%87%BB%E8%BF%9B%E5%85%A5%EF%BC%89%E6%A0%87%E9%A2%98%E4%BB%85%E4%BB%A3%E8%A1%A8%E4%B8%AA%E4%BA%BA%E7%9A%84%E6%84%BF%E6%9C%9B%E5%B9%B6%E9%9D%9E%E7%9C%9F%E5%AE%9E%EF%BC%8C%E4%B8%8Easoul%E5%AE%98%E6%96%B9%E6%97%A0%E5%85%B3%E6%84%9F%E8%B0%A2%401414213562373+%E7%A0%94%E5%8F%91%E8%B7%83%E8%BF%81%E6%8A%80%E6%9C%AF............................................%E5%8D%B3%E5%B0%86%E8%B7%83%E8%BF%81%E8%87%B3%E3%80%90A-SOUL%2F%E7%8F%88%E4%B9%90%E3%80%91%E8%88%9E%E8%B9%88%E3%80%8A%E5%A4%9C%E7%9A%84%E7%AC%AC%E4%B8%83%E7%AB%A0%E3%80%8B--%E7%94%B1%E7%9A%87%E7%8F%88%E9%AA%91%E5%A3%AB%E5%91%A8%E6%8A%A5%E5%88%87%E7%89%87%E5%91%A8%E6%9D%B0%E4%BC%A6%E7%9A%84%E9%9F%B3%E4%B9%90%E4%B8%8E%E7%94%BB%E9%9D%A2%E4%B8%80%E5%90%91%E7%B4%A7%E5%AF%86%E7%9B%B8%E8%BF%9E%EF%BC%8C%E6%9C%80%E6%96%B0%E4%B8%93%E8%BE%91%E2%80%9C%E4%BE%9D%E7%84%B6%E8%8C%83%E7%89%B9%E8%A5%BF%E2%80%9D%E4%B8%8D%E4%BB%85%E5%9C%A8%E9%9F%B3%E4%B9%90%E4%B8%8A%E5%B8%A6%E7%BB%99%E5%A4%A7%E5%AE%B6%E6%97%A0%E5%B0%BD%E7%9A%84%E7%BE%8E%E5%A5%BD%E6%83%B3%E5%83%8F%EF%BC%8C%E6%8B%8D%E7%85%A7%E6%97%B6%E5%91%A8%E6%9D%B0%E4%BC%A6%E4%B9%9F%E5%B8%A6%E9%A2%86%E5%A4%A7%E5%AE%B6%E7%A9%BF%E6%A2%AD%E6%97%B6%E7%A9%BA%EF%BC%8C%E4%B8%80%E4%B8%8B%E7%BD%AE%E8%BA%AB%E6%AF%81%E7%81%AD%E8%87%B3%E6%9E%81%E7%9A%84%E5%BA%9F%E5%A2%9F%EF%BC%8C%E4%B8%80%E4%B8%8B%E5%8F%88%E5%88%B0%E4%BA%86%E5%8D%8E%E4%B8%BD%E5%A4%8D%E5%8F%A4%E7%9A%84%E7%B9%81%E5%8D%8E%E8%A1%97%E5%A4%B4%EF%BC%81%E6%8C%91%E6%88%98%E5%A4%A7%E5%AE%B6%E7%9A%84\u0026amp;words=844\u0026amp;category=42\u0026amp;list_id=0\u0026amp;tid=4\u0026amp;reprint=0\u0026amp;tags=\u0026amp;image_urls=https%3A%2F%2Farticle.biliimg.com%2Fbfs%2Farticle%2Fbanner%2F73d407a343e0cc401ac1a9a6f5bc72291e0e96fd.png\u0026amp;origin_image_urls=https%3A%2F%2Farticle.biliimg.com%2Fbfs%2Farticle%2Fbanner%2F73d407a343e0cc401ac1a9a6f5bc72291e0e96fd.png\u0026amp;dynamic_intro=\u0026amp;media_id=0\u0026amp;spoiler=0\u0026amp;original=1\u0026amp;top_video_bvid=BV1bf4y1m7cc\u0026amp;aid=15339143\u0026amp;up_reply_closed=0\u0026amp;comment_selected=0\u0026amp;publish_time=0\u0026amp;items=\u0026amp;platform=web\u0026amp;buvid=AC9EEACD-CA54-80D8-4E15-E7C7D7AC0A6014869infoc\u0026amp;device=\u0026amp;build=\u0026amp;mobi_app=\u0026amp;csrf=3c861e8e8c9b4ee16223e7e9eee23ca9\u0026#39; --compressed 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 import requests headers = { \u0026#39;Accept\u0026#39;: \u0026#39;application/json, text/javascript, */*; q=0.01\u0026#39;, \u0026#39;Referer\u0026#39;: \u0026#39;https://member.bilibili.com/article-text/home?aid=15339143\u0026amp;type=3\u0026#39;, \u0026#39;Origin\u0026#39;: \u0026#39;https://member.bilibili.com\u0026#39;, \u0026#39;User-Agent\u0026#39;: \u0026#39;Mozilla/5.0 (X11; CrOS x86_64 12239.67.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.102 Safari/537.36\u0026#39;, \u0026#39;Sec-Fetch-Mode\u0026#39;: \u0026#39;cors\u0026#39;, \u0026#39;Content-Type\u0026#39;: \u0026#39;application/x-www-form-urlencoded; charset=UTF-8\u0026#39;, } data = { \u0026#39;title\u0026#39;: \u0026#39;\\u67D0\\u5468\\u59D3\\u660E\\u661F\\u8868\\u793A\\u4ECA\\u5E74\\u5C06\\u4E0E\\u90A3\\u4E2A\\u5973\\u56E2\\u5C55\\u5F00\\u5408\\u4F5C...\\u5C55\\u5F00\u0026#39;, \u0026#39;banner_url\u0026#39;: \u0026#39;https://article.biliimg.com/bfs/archive/0fb2698425062071bb1fa5aec67cf0b268a67dc9.jpg\u0026#39;, \u0026#39;content\u0026#39;: \u0026#39;\u0026lt;p\u0026gt;\\uFF08\\u8BF7\\u6CE8\\u610F\\uFF0C\\u8FD9\\u4E0D\\u662F\\u4E00\\u7BC7\\u6B63\\u5E38\\u7684\\u7B14\\u8BB0\\uFF0C\\u8BF7\\u52FF\\u4ECE\\u7B14\\u8BB0\\u5217\\u8868\\u4E2D\\u70B9\\u51FB\\u8FDB\\u5165\\uFF09\u0026lt;/p\u0026gt;\u0026lt;p\u0026gt;\u0026lt;br\u0026gt;\u0026lt;/p\u0026gt;\u0026lt;p\u0026gt;\\u6807\\u9898\\u4EC5\\u4EE3\\u8868\\u4E2A\\u4EBA\\u7684\\u613F\\u671B\\u5E76\\u975E\\u771F\\u5B9E\\uFF0C\\u4E0Easoul\\u5B98\\u65B9\\u65E0\\u5173\u0026lt;/p\u0026gt;\u0026lt;p\u0026gt;\u0026lt;br\u0026gt;\u0026lt;/p\u0026gt;\u0026lt;p\u0026gt;\\u611F\\u8C22@\u0026lt;span class=\u0026#34;ql-color-#333333\u0026#34;\u0026gt;1414213562373 \\u7814\\u53D1\\u8DC3\\u8FC1\\u6280\\u672F\u0026lt;/span\u0026gt;\u0026lt;/p\u0026gt;\u0026lt;p\u0026gt;\u0026lt;br\u0026gt;\u0026lt;/p\u0026gt;\u0026lt;p\u0026gt;\u0026lt;br\u0026gt;\u0026lt;/p\u0026gt;\u0026lt;p\u0026gt;......................\u0026lt;/p\u0026gt;\u0026lt;p\u0026gt;...............\u0026lt;/p\u0026gt;\u0026lt;p\u0026gt;.......\u0026lt;/p\u0026gt;\u0026lt;p\u0026gt;\u0026lt;span class=\u0026#34;ql-color-#333333\u0026#34;\u0026gt;\\u5373\\u5C06\\u8DC3\\u8FC1\\u81F3\u0026lt;/span\u0026gt;\\u3010A-SOUL/\\u73C8\\u4E50\\u3011\\u821E\\u8E48\\u300A\\u591C\\u7684\\u7B2C\\u4E03\\u7AE0\\u300B--\\u7531\\u7687\\u73C8\\u9A91\\u58EB\\u5468\\u62A5\\u5207\\u7247\u0026lt;/p\u0026gt;\u0026lt;p\u0026gt;\u0026lt;br\u0026gt;\u0026lt;/p\u0026gt;\u0026lt;p\u0026gt;\u0026lt;br\u0026gt;\u0026lt;/p\u0026gt;\u0026lt;p\u0026gt;\u0026lt;br\u0026gt;\u0026lt;/p\u0026gt;\u0026lt;p\u0026gt;\u0026lt;br\u0026gt;\u0026lt;/p\u0026gt;\u0026lt;p\u0026gt;\u0026lt;br\u0026gt;\u0026lt;/p\u0026gt;\u0026lt;p\u0026gt;\u0026lt;br\u0026gt;\u0026lt;/p\u0026gt;\u0026lt;p\u0026gt;\u0026lt;br\u0026gt;\u0026lt;/p\u0026gt;\u0026lt;p\u0026gt;\u0026lt;br\u0026gt;\u0026lt;/p\u0026gt;\u0026lt;p\u0026gt;\u0026lt;br\u0026gt;\u0026lt;/p\u0026gt;\u0026lt;p\u0026gt;\u0026lt;br\u0026gt;\u0026lt;/p\u0026gt;\u0026lt;p\u0026gt;\u0026lt;br\u0026gt;\u0026lt;/p\u0026gt;\u0026lt;p\u0026gt;\u0026lt;br\u0026gt;\u0026lt;/p\u0026gt;\u0026lt;p\u0026gt;\u0026lt;br\u0026gt;\u0026lt;/p\u0026gt;\u0026lt;p\u0026gt;\u0026lt;br\u0026gt;\u0026lt;/p\u0026gt;\u0026lt;p\u0026gt;\u0026lt;br\u0026gt;\u0026lt;/p\u0026gt;\u0026lt;p\u0026gt;\u0026lt;br\u0026gt;\u0026lt;/p\u0026gt;\u0026lt;p\u0026gt;\u0026lt;br\u0026gt;\u0026lt;/p\u0026gt;\u0026lt;p\u0026gt;\u0026lt;br\u0026gt;\u0026lt;/p\u0026gt;\u0026lt;p\u0026gt;\u0026lt;br\u0026gt;\u0026lt;/p\u0026gt;\u0026lt;p\u0026gt;\u0026lt;br\u0026gt;\u0026lt;/p\u0026gt;\u0026lt;p\u0026gt;\u0026lt;br\u0026gt;\u0026lt;/p\u0026gt;\u0026lt;p\u0026gt;\u0026lt;br\u0026gt;\u0026lt;/p\u0026gt;\u0026lt;p\u0026gt;\u0026lt;br\u0026gt;\u0026lt;/p\u0026gt;\u0026lt;p\u0026gt;\u0026lt;br\u0026gt;\u0026lt;/p\u0026gt;\u0026lt;p\u0026gt;\u0026lt;br\u0026gt;\u0026lt;/p\u0026gt;\u0026lt;p\u0026gt;\u0026lt;span class=\u0026#34;color-gray-01\u0026#34;\u0026gt;\\u5468\\u6770\\u4F26\\u7684\\u97F3\\u4E50\\u4E0E\\u753B\\u9762\\u4E00\\u5411\\u7D27\\u5BC6\\u76F8\\u8FDE\\uFF0C\\u6700\\u65B0\\u4E13\\u8F91\\u201C\\u4F9D\\u7136\\u8303\\u7279\\u897F\\u201D\\u4E0D\\u4EC5\\u5728\\u97F3\\u4E50\\u4E0A\\u5E26\\u7ED9\\u5927\\u5BB6\\u65E0\\u5C3D\\u7684\\u7F8E\\u597D\\u60F3\\u50CF\\uFF0C\\u62CD\\u7167\\u65F6\\u5468\\u6770\\u4F26\\u4E5F\\u5E26\\u9886\\u5927\\u5BB6\\u7A7F\\u68AD\\u65F6\\u7A7A\\uFF0C\\u4E00\\u4E0B\\u7F6E\\u8EAB\\u6BC1\\u706D\\u81F3\\u6781\\u7684\\u5E9F\\u589F\\uFF0C\\u4E00\\u4E0B\\u53C8\\u5230\\u4E86\\u534E\\u4E3D\\u590D\\u53E4\\u7684\\u7E41\\u534E\\u8857\\u5934\\uFF01\\u6311\\u6218\\u5927\\u5BB6\\u7684\\u89C6\\u89C9\\u795E\\u7ECF\\uFF0C\\u521B\\u9020\\u201CJay\\u5F0F\\u7F8E\\u5B66\\u201D\\uFF01\\u800C\\u5728\\u9020\\u578B\\u4E0A\\u4E5F\\u7A81\\u663E\\u4E0E\\u62CD\\u7167\\u80CC\\u666F\\u53CD\\u5DEE\\u7684\\u201C\\u51B2\\u7A81\\u611F\\u201D\\u4E0E\\u201C\\u620F\\u5267\\u6027\\u201D\\uFF01\\u7279\\u522B\\u7684\\u662F\\u7EE7\\u201C\\u8303\\u7279\\u897F\\u201D\\u4E13\\u8F91\\u4E4B\\u540E\\uFF0C\\u76F8\\u9694\\u4E94\\u5E74\\uFF0C\\u5468\\u6770\\u4F26\\u96BE\\u5F97\\u518D\\u5EA6\\u9732\\u51FA\\u80F8\\u808C\\uFF0C\\u5C55\\u73B0\\u597DMan\\u7684\\u4E00\\u9762\\uFF01\\u8FD9\\u7167\\u7247\\u5728\\u63A8\\u51FA\\u7684\\u6700\\u65B0\\u4E13\\u8F91\\u201C\\u4F9D\\u7136\\u8303\\u7279\\u897F\\u201D\\u91CC\\u5934\\uFF0C\\u6B63\\u662F\\u547C\\u5E94\\u4ED6\\u7B2C\\u4E8C\\u5F20\\u4E13\\u8F91\\u201C\\u8303\\u7279\\u897F\\u201D\\u7684\\u5DE7\\u5408\\u4E4B\\u5904\\uFF01\u0026lt;/span\u0026gt;\u0026lt;/p\u0026gt;\u0026lt;p\u0026gt;\u0026lt;span class=\u0026#34;color-gray-01\u0026#34;\u0026gt;\\u5468\\u8463\\u7684\\u6700\\u65B0\\u4E13\\u8F91\\u201C\\u4F9D\\u7136\\u8303\\u7279\\u897F\\u201D\\u90E8\\u4EFD\\u5185\\u9875\\u62A2\\u5148\\u66DD\\u5149\\uFF01\\u6B64\\u6B21\\u62CD\\u7167\\u5448\\u73B0\\u201C\\u6781\\u6BC1\\u706D\\u201D\\u4E0E\\u201C\\u6781\\u7E41\\u534E\\u201D\\u4E24\\u79CD\\u5370\\u8C61\\u7684\\u53CD\\u5DEE\\uFF0C\\u5468\\u6770\\u4F26\\u8868\\u793A\\uFF1A\\u201C\\u8FD9\\u6B21\\u62CD\\u7167\\u662F\\u8981\\u8868\\u73B0\\u4E00\\u4E2A\\u57CE\\u5E02\\u7684\\u6BC1\\u706D\\u4E0E\\u7E41\\u534E\\uFF0C\\u8981\\u8868\\u8FBE\\u51FA\\u5728\\u6700\\u4F4E\\u6F6E\\u7684\\u65F6\\u5019\\u4ECD\\u7136\\u8981\\u8FDC\\u773A\\u5E0C\\u671B\\u7684\\u6982\\u5FF5\\uFF0C\\u6240\\u4EE5\\u5927\\u5BB6\\u5728\\u7167\\u7247\\u4E0A\\u4F1A\\u770B\\u5230\\u5F88\\u6BC1\\u706D\\u548C\\u5F88\\u7E41\\u534E\\u7684\\u4E24\\u79CD\\u89C6\\u89C9\\u6548\\u679C\\uFF01\\u201D\\u6781\\u6BC1\\u706D\\u7684\\u90E8\\u4EFD\\u5C31\\u50CF\\u5468\\u6770\\u4F26\\u8FD9\\u5F20\\u88F8\\u4E0A\\u534A\\u8EAB\\u7684\\u7167\\u7247\\uFF0C\\u4EE5\\u5371\\u6865\\u3001\\u8001\\u70DF\\u56F1\\u3001\\u5E9F\\u589F\\u3001\\u785D\\u70DF\\u2026\\u7B49\\u4F5C\\u7535\\u8111\\u540E\\u5236\\uFF1B\\u6781\\u7E41\\u534E\\u7684\\u90E8\\u4EFD\\u5219\\u662F\\u4EE5\\u8017\\u8D44\\u591A\\u4E07\\u3001\\u82B1\\u4E8610\\u5929\\u6240\\u642D\\u5EFA\\u51FA\\u7684\\u534E\\u4E3D\\u590D\\u53E4\\u8857\\u9053\\u4E3A\\u573A\\u666F\\uFF0C\\u50CF\\u662F\\u767E\\u8001\\u6C47\\u6B4C\\u821E\\u5267\\u7684\\u8857\\u9053\\uFF0C\\u53C8\\u50CF\\u5E03\\u9C81\\u514B\\u6797\\u533A\\u7684\\u563B\\u54C8\\u9ED1\\u8857\\uFF0C\\u5176\\u5B9E\\u8FD9\\u90FD\\u662F\\u51FA\\u81EA\\u5468\\u6770\\u4F26\\u8111\\u6D77\\u4E2D\\u7684\\u60F3\\u50CF\\u6240\\u521B\\u9020\\u7684\\uFF0C\\u6240\\u4EE5\\u5DE5\\u4F5C\\u4EBA\\u5458\\u79F0\\u4E4B\\u4E3A\\u201C\\u6770\\u4F26\\u8857\\u201D\\uFF0C\\u534E\\u706F\\u521D\\u4E0A\\u7684\\u8857\\u5934\\u62DB\\u724C\\u4E0A\\u8FD8\\u6709\\u201CJayChoushow\\u201D\\u7684\\u5B57\\u6837\\u4EAE\\u8D77\\uFF0C\\u9713\\u8679\\u706F\\u88C5\\u9970\\u7684\\u98CE\\u8F66\\u4E5F\\u968F\\u4E4B\\u8F6C\\u52A8\\uFF0C\\u573A\\u666F\\u7684\\u7CBE\\u81F4\\u5199\\u5B9E\\u7A0B\\u5EA6\\u8BA9\\u4EBA\\u96BE\\u4EE5\\u60F3\\u50CF\\uFF01\\u5DE5\\u4F5C\\u4EBA\\u5458\\u4E5F\\u8BB6\\u5F02\\u4E8E\\u8FD9\\u6837\\u7684\\u5947\\u5E7B\\u4E16\\u754C\\uFF0C\\u7EB7\\u7EB7\\u62FF\\u8D77\\u76F8\\u673A\\u53D6\\u666F\\uFF0C\\u8FDE\\u7231\\u6444\\u5F71\\u7684\\u5468\\u5988\\u5988\\u4E5F\\u4E0D\\u4F8B\\u5916\\uFF01\\u5728\\u65B0\\u4E13\\u8F91\\u63A8\\u51FA\\u4E4B\\u540E\\uFF0C\\u6B4C\\u8FF7\\u5C06\\u4F1A\\u8EAB\\u5386\\u5176\\u5883\\uFF0C\\u9A70\\u9A8B\\u4E8E\\u5468\\u6770\\u4F26\\u7684\\u8303\\u7279\\u897F\\u97F3\\u4E50\\u5F71\\u57CE\\uFF01\\u6709\\u8DA3\\u7684\\u662F\\uFF0C\\u6770\\u4F26\\u6709\\u4E00\\u53F0\\u548C\\u81EA\\u5DF1\\u5E74\\u7EAA\\u4E00\\u6837\\u5927\\u7684\\u84DD\\u8272\\u53E4\\u8463\\u8DD1\\u8F66(\\u5E74\\u51FA\\u5382CHEVROLET)\\uFF0C\\u8FD9\\u6B21\\u62CD\\u7167\\u5468\\u8463\\u4E5F\\u628A\\u8FD9\\u53F0\\u81EA\\u5DF1\\u6635\\u79F0\\u7684\\u201C\\u8759\\u8760\\u8F66\\u201D\\u5E26\\u5165\\u955C\\uFF0C\\u5341\\u8DB3\\u5E05\\u6C14\\u62C9\\u98CE\\uFF01\u0026lt;/span\u0026gt;\u0026lt;/p\u0026gt;\u0026lt;p\u0026gt;siu\\uFF01\u0026lt;/p\u0026gt;\u0026lt;p\u0026gt;\u0026lt;br\u0026gt;\u0026lt;/p\u0026gt;\u0026#39;, \u0026#39;summary\u0026#39;: \u0026#39;\\uFF08\\u8BF7\\u6CE8\\u610F\\uFF0C\\u8FD9\\u4E0D\\u662F\\u4E00\\u7BC7\\u6B63\\u5E38\\u7684\\u7B14\\u8BB0\\uFF0C\\u8BF7\\u52FF\\u4ECE\\u7B14\\u8BB0\\u5217\\u8868\\u4E2D\\u70B9\\u51FB\\u8FDB\\u5165\\uFF09\\u6807\\u9898\\u4EC5\\u4EE3\\u8868\\u4E2A\\u4EBA\\u7684\\u613F\\u671B\\u5E76\\u975E\\u771F\\u5B9E\\uFF0C\\u4E0Easoul\\u5B98\\u65B9\\u65E0\\u5173\\u611F\\u8C22@1414213562373 \\u7814\\u53D1\\u8DC3\\u8FC1\\u6280\\u672F............................................\\u5373\\u5C06\\u8DC3\\u8FC1\\u81F3\\u3010A-SOUL/\\u73C8\\u4E50\\u3011\\u821E\\u8E48\\u300A\\u591C\\u7684\\u7B2C\\u4E03\\u7AE0\\u300B--\\u7531\\u7687\\u73C8\\u9A91\\u58EB\\u5468\\u62A5\\u5207\\u7247\\u5468\\u6770\\u4F26\\u7684\\u97F3\\u4E50\\u4E0E\\u753B\\u9762\\u4E00\\u5411\\u7D27\\u5BC6\\u76F8\\u8FDE\\uFF0C\\u6700\\u65B0\\u4E13\\u8F91\\u201C\\u4F9D\\u7136\\u8303\\u7279\\u897F\\u201D\\u4E0D\\u4EC5\\u5728\\u97F3\\u4E50\\u4E0A\\u5E26\\u7ED9\\u5927\\u5BB6\\u65E0\\u5C3D\\u7684\\u7F8E\\u597D\\u60F3\\u50CF\\uFF0C\\u62CD\\u7167\\u65F6\\u5468\\u6770\\u4F26\\u4E5F\\u5E26\\u9886\\u5927\\u5BB6\\u7A7F\\u68AD\\u65F6\\u7A7A\\uFF0C\\u4E00\\u4E0B\\u7F6E\\u8EAB\\u6BC1\\u706D\\u81F3\\u6781\\u7684\\u5E9F\\u589F\\uFF0C\\u4E00\\u4E0B\\u53C8\\u5230\\u4E86\\u534E\\u4E3D\\u590D\\u53E4\\u7684\\u7E41\\u534E\\u8857\\u5934\\uFF01\\u6311\\u6218\\u5927\\u5BB6\\u7684\u0026#39;, \u0026#39;words\u0026#39;: \u0026#39;844\u0026#39;, \u0026#39;category\u0026#39;: \u0026#39;42\u0026#39;, \u0026#39;list_id\u0026#39;: \u0026#39;0\u0026#39;, \u0026#39;tid\u0026#39;: \u0026#39;4\u0026#39;, \u0026#39;reprint\u0026#39;: \u0026#39;0\u0026#39;, \u0026#39;tags\u0026#39;: \u0026#39;\u0026#39;, \u0026#39;image_urls\u0026#39;: \u0026#39;https://article.biliimg.com/bfs/article/banner/73d407a343e0cc401ac1a9a6f5bc72291e0e96fd.png\u0026#39;, \u0026#39;origin_image_urls\u0026#39;: \u0026#39;https://article.biliimg.com/bfs/article/banner/73d407a343e0cc401ac1a9a6f5bc72291e0e96fd.png\u0026#39;, \u0026#39;dynamic_intro\u0026#39;: \u0026#39;\u0026#39;, \u0026#39;media_id\u0026#39;: \u0026#39;0\u0026#39;, \u0026#39;spoiler\u0026#39;: \u0026#39;0\u0026#39;, \u0026#39;original\u0026#39;: \u0026#39;1\u0026#39;, \u0026#39;top_video_bvid\u0026#39;: \u0026#39;BV1bf4y1m7cc\u0026#39;, \u0026#39;aid\u0026#39;: \u0026#39;15339143\u0026#39;, \u0026#39;up_reply_closed\u0026#39;: \u0026#39;0\u0026#39;, \u0026#39;comment_selected\u0026#39;: \u0026#39;0\u0026#39;, \u0026#39;publish_time\u0026#39;: \u0026#39;0\u0026#39;, \u0026#39;items\u0026#39;: \u0026#39;\u0026#39;, \u0026#39;platform\u0026#39;: \u0026#39;web\u0026#39;, \u0026#39;buvid\u0026#39;: \u0026#39;AC9EEACD-CA54-80D8-4E15-E7C7D7AC0A6014869infoc\u0026#39;, \u0026#39;device\u0026#39;: \u0026#39;\u0026#39;, \u0026#39;build\u0026#39;: \u0026#39;\u0026#39;, \u0026#39;mobi_app\u0026#39;: \u0026#39;\u0026#39;, \u0026#39;csrf\u0026#39;: \u0026#39;3c861e8e8c9b4ee16223e7e9eee23ca9\u0026#39; } response = requests.post(\u0026#39;https://api.bilibili.com/x/article/creative/article/update\u0026#39;, headers=headers, data=data) ","date":"2022-02-20T00:00:00Z","permalink":"https://96bear.github.io/p/%E4%B8%B4%E6%97%B6%E6%96%87%E7%AB%A0-%E8%AF%B7%E6%B1%82/","title":"临时文章-请求"},{"content":"我的 成果 个人博客:https://bear962464.cn 建站于2019年（冀ICP备19026386号），被百度、Bing、Google等搜索引擎收录，最好的时候百度收录112条，当前点击量8w+，2021年末网站从windows server无缝迁移到ubuntu服务器\n参与小融盒子开发者大赛，获得三等奖，奖金一千元\n爬虫经验丰富，有反爬经验\n曾完成对某网站数万页面的多线程爬取，对数据清洗处理后建立仿站 有开源项目proxyListTest从GitHub拉取免费的代理列表并多线程本地验活 在美国德克萨斯州官网爬取各县信息，破解反爬 为国内某汽车公司爬取多家合作4s店网站商品及销售信息 为委托人爬取 https://restaurantguru.com/ 荷兰和英国的酒吧/餐馆/商店信息并处理 等等 对某fps手游标记数据集，基于深度学习的Yolov5训练模型，并调用模型+adb操作完成游戏自瞄和自动开枪。（本程序并未发布且在游戏训练场进行测试）\n基于Flask框架建立网站后端用于客户群体提交和查询信息，前端套用修改后的模板，提供api\n制作QQ机器人（基于gocq），采用协程处理请求，可完成验卡密，记录积分，查询信息，roll点签到，广播，执行任务，查询任务状态等功能，并分类记录普通用户和bot管理员操作日志\n基于moviepy、PIL等库制作\u0026quot;短视频生成器\u0026quot;，获取关键词后使用网易云爬虫爬取相关无版权音乐，使用百度图片爬虫爬取相关无版权图片，对某站爬取相关文案。pychorus获取音乐高潮+图片按算法绘制文字+插帧合成，批量制作出文案逐字出现效果的短视频\n基于计时器自动刷新和模拟点击制作的油猴插件：bilibili全自动取关，总安装量371，greasyfork地址\n开源的httpcanary请求文件转python requests请求脚本在github上被fork两次\n语言 掌握程度从上到下\nPython\nMarkdown\nC\nJavaScript\nShell\nHTML\nPHP\n运维相关技能 wordpress / hexo建站\n宝塔（bt）/小皮（phpstudy）面板\nmysql数据库基础操作\ndocker操作（包括不限于拉取，建立，备份，迁移）\nlinux操作（ubuntu，centos，armbian都接触过）\n抓包测试（fidder,httpcanary）\ngit相关（包括不限于push，pull，clone，proxy）\npython相关技术 urllib，requests，httpx网络请求\nwss请求\nre正则表达式提取数据\nbeautifulsoup提取页面信息\njson的处理\nasyncio库协程编程（await，async）\n多线程编程\n爬虫相关经验丰富\nselemium模拟操作\n深度学习：使用yolo训练模型\nWeb框架flask建立简单网站、api\nKivy、Pyqt5、Pyside2等图形化Gui开发\n数据处理（情感分析，词云，pandas）\n调用adb操作安卓手机（uiautomator2）\nbase64编码\nPIL库对图片进行批量处理\nmoviepy编辑视频\nttf字体文件的提取和打印\n打包可执行文件（pyinstaller）\n其他语言技术 auto.js开发多种手机自动化脚本\n","date":"2022-02-17T00:00:00Z","permalink":"https://96bear.github.io/p/%E6%8A%80%E8%83%BD%E5%8F%8A%E6%88%90%E6%9E%9C/","title":"技能及成果"},{"content":"玩客云（Armbian）空间不足解决办法-docker目录转移 不用重装，不用恢复，对于我来说把var下的docker占用转移即可 插入u盘，把docker目录转移至此\n设置静态ip（可选） 这样可以避免每次重启内网ip变动\n1 2 3 4 nano /etc/NetworkManager/NetworkManager.conf # 禁用network manager [ifupdown] managed=false 1 2 3 4 5 6 7 8 9 10 11 12 13 nano /etc/network/interfaces # 以下按需修改粘贴，内网ip在address # Wired adapter #1 auto eth0 allow-hotplug eth0 no-auto-down eth0 # iface eth0 inet dhcp iface eth0 inet static hwaddress 12:34:56:78:9A:BC address 192.168.1.20 netmask 255.255.255.0 gateway 192.168.1.1 dns-nameservers 192.168.1.1 1 2 # 重启 reboot -n 设置u盘自动挂载 插入u盘\n1 2 3 # 查看u盘路径/大小/type fdisk -l # 如/dev/sda4 格式化u盘为exc4，保持默认，等待完成\n1 2 # 举例 mkfs.ext4 /dev/sda4 创建挂载目录\n1 2 # 举例 mkdir /mnt/upan 查看u盘UUID\n1 2 # 举例 blkid /dev/sda4 修改配置文件，在/etc/fstab后追加\n1 2 # 例子，uuid和路径改成自己的 UUID=a63dfbda-29c8-478f-a88e-55796514c961 /mnt/upan/ ext4 defaults 0 0 挂载目录修改权限\n1 chmod -R 777 /mnt/upan/ 重启\n1 2 # 重启 reboot -n 检查 挂载目录下存在lost+found目录即为成功\nDocker 修改默认存储路径 在刚刚的挂载目录下创建docker目录\n1 mkdir /mnt/upan/docker 记录原储存路径\n1 2 docker info|grep \u0026#34;Docker Root Dir:\u0026#34; # Docker Root Dir: /var/lib/docker 修改docker的systemd的 docker.service的配置文件\n1 2 3 4 5 6 7 8 9 #查找docker.service的配置文件 systemctl disable docker systemctl enable docker #显示结果 Created symlink /etc/systemd/system/multi-user.target.wants/docker.service → /lib/systemd/system/docker.service. #编辑文件 nano /lib/systemd/system/docker.service #如何修改(举例)： #ExecStart=最后追加--graph=/mnt/upan/docker docker服务重启\n1 2 3 4 systemctl disable docker systemctl enable docker systemctl daemon-reload systemctl restart docker 复制原本的文件到docker新目录,要等一会\n1 2 3 # 下面是例子，按2步结果修改cd路径 cd /var/lib/docker cp ./* /mnt/upan/docker/ -rf 重启并检查是否成功\n1 2 systemctl restart docker docker ps 没问题的话删除原目录下文件\n1 rm -rf /var/lib/docker/* 最后看看多出来的空间 1 df -hT 是不是舒服多了\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # 扩展：查看当前目录文件占用 du -sh *|sort -h # output 4.0K runtimes 4.0K swarm 4.0K tmp 4.0K trust 20K builder 24K plugins 80K network 112K buildkit 224K volumes 3.0M image 1.5G overlay2 2.2G containers ","date":"2022-02-17T00:00:00Z","permalink":"https://96bear.github.io/p/%E7%8E%A9%E5%AE%A2%E4%BA%91armbian%E7%A9%BA%E9%97%B4%E4%B8%8D%E8%B6%B3%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95-docker%E7%9B%AE%E5%BD%95%E8%BD%AC%E7%A7%BB/","title":"玩客云（Armbian）空间不足解决办法-docker目录转移"},{"content":"黄嘉琪诈骗升级，伪装链接教学 点进去是我老婆的芒种捏\n先说结论 非常简单易懂 如芒种 https://b23.tv/av380439292?BV1Qa411175n\n固定短链接+目标视频av号+英文?+伪装视频bv号\n原理 一个猜测不一定对，评论是通过正则表达式提取bv/av号的，并且在同一个链接内的bv号优先于av号（毕竟以后以bv为主了），拿到bv/av号后返回视频信息在评论区显示标题。\n而点击结论里的链接时?后的参数是不起作用的，也就是说进入的是av号的视频。\n注意一个链接含两个bv号时会显示第一个的信息，大概类似于使用re.findall(find_bv,url)[0]\n怎么发现的 以前见过有人这么干过，知道有可行性(方法可能不同） 有人揭露过走接口生成b23短链接任意跳转的漏洞(已修复)，猜测后端使用正则提取信息，适当发散一下 b23.tv/av.+和b23.tv/bv.+在APP/pc页面会显示相关视频信息 多试试就出结论了 怎么找av号 百度一下有很多源码/api可以用，油猴插件也行就不一一说了，py写了个小工具\nbv转av算法来自于csdn\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 import math def BvToAv(Bv): # 1.去除Bv号前的\u0026#34;Bv\u0026#34;字符 BvNo1 = Bv[2:] keys = { \u0026#39;1\u0026#39;:\u0026#39;13\u0026#39;, \u0026#39;2\u0026#39;:\u0026#39;12\u0026#39;, \u0026#39;3\u0026#39;:\u0026#39;46\u0026#39;, \u0026#39;4\u0026#39;:\u0026#39;31\u0026#39;, \u0026#39;5\u0026#39;:\u0026#39;43\u0026#39;, \u0026#39;6\u0026#39;:\u0026#39;18\u0026#39;, \u0026#39;7\u0026#39;:\u0026#39;40\u0026#39;, \u0026#39;8\u0026#39;:\u0026#39;28\u0026#39;, \u0026#39;9\u0026#39;:\u0026#39;5\u0026#39;, \u0026#39;A\u0026#39;:\u0026#39;54\u0026#39;, \u0026#39;B\u0026#39;:\u0026#39;20\u0026#39;, \u0026#39;C\u0026#39;:\u0026#39;15\u0026#39;, \u0026#39;D\u0026#39;:\u0026#39;8\u0026#39;, \u0026#39;E\u0026#39;:\u0026#39;39\u0026#39;, \u0026#39;F\u0026#39;:\u0026#39;57\u0026#39;, \u0026#39;G\u0026#39;:\u0026#39;45\u0026#39;, \u0026#39;H\u0026#39;:\u0026#39;36\u0026#39;, \u0026#39;J\u0026#39;:\u0026#39;38\u0026#39;, \u0026#39;K\u0026#39;:\u0026#39;51\u0026#39;, \u0026#39;L\u0026#39;:\u0026#39;42\u0026#39;, \u0026#39;M\u0026#39;:\u0026#39;49\u0026#39;, \u0026#39;N\u0026#39;:\u0026#39;52\u0026#39;, \u0026#39;P\u0026#39;:\u0026#39;53\u0026#39;, \u0026#39;Q\u0026#39;:\u0026#39;7\u0026#39;, \u0026#39;R\u0026#39;:\u0026#39;4\u0026#39;, \u0026#39;S\u0026#39;:\u0026#39;9\u0026#39;, \u0026#39;T\u0026#39;:\u0026#39;50\u0026#39;, \u0026#39;U\u0026#39;:\u0026#39;10\u0026#39;, \u0026#39;V\u0026#39;:\u0026#39;44\u0026#39;, \u0026#39;W\u0026#39;:\u0026#39;34\u0026#39;, \u0026#39;X\u0026#39;:\u0026#39;6\u0026#39;, \u0026#39;Y\u0026#39;:\u0026#39;25\u0026#39;, \u0026#39;Z\u0026#39;:\u0026#39;1\u0026#39;, \u0026#39;a\u0026#39;: \u0026#39;26\u0026#39;, \u0026#39;b\u0026#39;: \u0026#39;29\u0026#39;, \u0026#39;c\u0026#39;: \u0026#39;56\u0026#39;, \u0026#39;d\u0026#39;: \u0026#39;3\u0026#39;, \u0026#39;e\u0026#39;: \u0026#39;24\u0026#39;, \u0026#39;f\u0026#39;: \u0026#39;0\u0026#39;, \u0026#39;g\u0026#39;: \u0026#39;47\u0026#39;, \u0026#39;h\u0026#39;: \u0026#39;27\u0026#39;, \u0026#39;i\u0026#39;: \u0026#39;22\u0026#39;, \u0026#39;j\u0026#39;: \u0026#39;41\u0026#39;, \u0026#39;k\u0026#39;: \u0026#39;16\u0026#39;, \u0026#39;m\u0026#39;: \u0026#39;11\u0026#39;, \u0026#39;n\u0026#39;: \u0026#39;37\u0026#39;, \u0026#39;o\u0026#39;: \u0026#39;2\u0026#39;, \u0026#39;p\u0026#39;: \u0026#39;35\u0026#39;, \u0026#39;q\u0026#39;: \u0026#39;21\u0026#39;, \u0026#39;r\u0026#39;: \u0026#39;17\u0026#39;, \u0026#39;s\u0026#39;: \u0026#39;33\u0026#39;, \u0026#39;t\u0026#39;: \u0026#39;30\u0026#39;, \u0026#39;u\u0026#39;: \u0026#39;48\u0026#39;, \u0026#39;v\u0026#39;: \u0026#39;23\u0026#39;, \u0026#39;w\u0026#39;: \u0026#39;55\u0026#39;, \u0026#39;x\u0026#39;: \u0026#39;32\u0026#39;, \u0026#39;y\u0026#39;: \u0026#39;14\u0026#39;,\u0026#39;z\u0026#39;:\u0026#39;19\u0026#39; } # 2. 将key对应的value存入一个列表 BvNo2 = [] for index, ch in enumerate(BvNo1): BvNo2.append(int(str(keys[ch]))) # 3. 对列表中不同位置的数进行*58的x次方的操作 BvNo2[0] = int(BvNo2[0] * math.pow(58, 6)); BvNo2[1] = int(BvNo2[1] * math.pow(58, 2)); BvNo2[2] = int(BvNo2[2] * math.pow(58, 4)); BvNo2[3] = int(BvNo2[3] * math.pow(58, 8)); BvNo2[4] = int(BvNo2[4] * math.pow(58, 5)); BvNo2[5] = int(BvNo2[5] * math.pow(58, 9)); BvNo2[6] = int(BvNo2[6] * math.pow(58, 3)); BvNo2[7] = int(BvNo2[7] * math.pow(58, 7)); BvNo2[8] = int(BvNo2[8] * math.pow(58, 1)); BvNo2[9] = int(BvNo2[9] * math.pow(58, 0)); # 4.求出这10个数的合 sum = 0 for i in BvNo2: sum += i # 5. 将和减去100618342136696320 sum -= 100618342136696320 # 6. 将sum 与177451812进行异或 temp = 177451812 return sum ^ temp if __name__ == \u0026#39;__main__\u0026#39;: Bv = input(\u0026#34;请输入视频Bv号:\u0026#34;) Bbv = input(\u0026#34;请输入用于伪装的Bv号\\n以提供标题，留空不伪装:\u0026#34;) av = str(BvToAv(Bv)) print(Bv + \u0026#34;的Av号为:av\u0026#34; + av) print(\u0026#34;链接地址为：https://www.bilibili.com/video/av\u0026#34; + av) print(\u0026#34;短链接地址：b23.tv/av\u0026#34; + av) if Bbv: print(\u0026#34;伪装链接为：https://b23.tv/av\u0026#34; + av+\u0026#34;?\u0026#34;+Bbv) ","date":"2022-02-06T00:00:00Z","permalink":"https://96bear.github.io/p/%E9%BB%84%E5%98%89%E7%90%AA%E8%AF%88%E9%AA%97%E5%8D%87%E7%BA%A7/","title":"黄嘉琪诈骗升级"},{"content":"WordPress迁移（windows to linux） 我的情况是域名不变，服务器从win重装为ubuntu 环境从Apache转Nginx 如果域名要变要改把数据库wp_options表中siteurl和home两处网址改为新的网址\n我在本地做迁移测试的时候做过这个操作\n1 2 # sql语句 UPDATE wp_posts SET post_content = REPLACE( post_content, \u0026#39;原内容\u0026#39;, \u0026#39;新内容\u0026#39;); 前置条件 一定把缓存插件先删掉（比如wp super cache），这玩意有个绝对路径会报错 尽量关闭插件，迁移后再启用 使用面板分别对数据库和网站目录进行备份 下载两个备份 备份ssl证书，如果有的话 操作 ！ 我是重装系统，ip没变，域名没变\n安装面板（比如宝塔，小皮） 安装新环境（如合适版本的Nginx+sql+php） 创建网站 新建数据库，名称用户名密码和备份文件里的wp-config.php保持一致 上传数据库备份，导入到新数据库 （域名改了的加一条）修改数据库里wp_options表中siteurl和home两处 上传网站文件备份，放到新的目录里 先修改新目录（含子文件）权限777 删除文件.htaccess 如果ssl证书这时候可以填上了 打开网站，我这时就可以正常访问、登陆，开始启用修改插件 chmod 755 /www/wwwroot/site-name/wp-content/ ","date":"2022-02-02T00:00:00Z","permalink":"https://96bear.github.io/p/wordpress%E8%BF%81%E7%A7%BBwindows-to-linux/","title":"WordPress迁移（windows to linux）"},{"content":"为什么戒烟 戒烟能让我头脑清醒，身体健康\n提高睡眠质量\n遂戒烟\n规则 每次吸烟的间隔要比上一间隔要长\n吸烟记录 每次吸烟记录一次时间，随缘记录感受\n吸烟时间 间隔(h,min) 11.30/18:00 0 11.30/19:39 1,39 11.30/22:23 2,44 12.1/8:09 9,42 12.1/17:58 9,49 12.2/10:20 16,18 12.3/7.21 20,41 12.4/7.38 24,17 12.5/8:01 24,24 12.6/10:35 26,34 12.7/13:22 26,47 12.9/9:58 44,28 感受 12.1 早上醒的很早，说不清的感觉，早上一根后不困了，中午午睡一小时，晚上之前难受抽了两根茶烟，这玩意儿不咋地。下午感觉脑子清楚了一点，晚饭后第二根，阔别9小时的尼古丁让我有些飘飘然。有些体会，也许是抽烟占用了思考的时间\n12.2 7点多醒的，睡得并不早也许睡眠质量真的提高了\n10:23一支烟， 飘飘然。有痰，在排毒。\n12.3 有些难熬\n12.4 间隔24小时，但并没有很强的吸烟欲望 ，也没有飘飘然的感觉，甚至有些恶心\n舌头不疼了，还是有痰\n今儿感觉比较轻松，没什么太难受的感觉了\n12.5 早上起来很难忍，嗓子疼，支气管疼，因为间隔到了就没忍着\n晚上也有些想抽，没抽\n12.6 昨晚上咳嗽，嗓子不太舒服\n脑子确实变清楚了效率也高了\n间隔延长了两个小时，明天的话下午吧\n12.7 早上开始瘾上来了，难受\n忍过了那个劲最强烈的时候，13.23一根，飘\n尽快尝试一整天以上的间隔\n12.9 间隔40小时，中间有一阵比较难忍，两次想放弃\n我大概快能戒掉了\n说实话，间隔这么长再抽有点爽\n受不了，就抽了半根\n加上戒烟贴，条件充足，尝试直接戒掉吧\n激励 ","date":"2021-12-09T00:00:00Z","permalink":"https://96bear.github.io/p/%E6%88%92%E7%83%9F%E6%8C%91%E6%88%98/","title":"戒烟挑战"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 # -*- coding = utf-8 -*- # @Author : 96bearli # @python : 3.8 \u0026#34;\u0026#34;\u0026#34; \u0026lt;日程管理小工具\u0026gt; 新增待办； 删除已有的待办； 标记一个待办为已完成； 查看所有待完成和已完成的待办，并且能够区分展示。 \u0026#34;\u0026#34;\u0026#34; from IPython.core.display import clear_output class Task: \u0026#34;\u0026#34;\u0026#34; 属性：文本内容、状态(初始值是未完成) 方法：标记已完成。 \u0026#34;\u0026#34;\u0026#34; def __init__(self, text): self.text = text self.status = \u0026#34;未完成\u0026#34; def mark_finished(self): self.status = \u0026#34;已完成\u0026#34; class TaskList: \u0026#34;\u0026#34;\u0026#34; 属性：一个列表变量 方法：增加待办，删除待办，获得已完成的待办列表，获得未完成的待办列表 \u0026#34;\u0026#34;\u0026#34; # 初始化函数，因为我们的待办都是一个个添加的，所以我们的列表变量初始化为空列表 def __init__(self): self.tasks = [] # 添加待办，接收一个参数：待办对象，然后调用列表的 append 函数将其添加到列表属性中 def add_task(self, task): self.tasks.append(task) # 删除待办，接收一个参数：要删除待办的序号，然后通过 del 语句进行删除 def remove_task(self, idx): del self.tasks[idx] # 获取所有已经完成的待办，没有参数。通过循环列表属性，如果状态是已完成，则添加到 result 列表中。最后返回 result 列表 def get_finished_tasks(self): result = [] for i in self.tasks: if i.status == \u0026#34;已完成\u0026#34;: result.append(i) # 标准答案是以下循环 # for i in range(0,len(self.tasks)): # if self.tasks[i].status == \u0026#34;已完成\u0026#34; # result.append(self.tasks[i]) return result # 获取所有未完成的待办，逻辑类似，只是判断条件是“状态是否等于未完成”。 def get_unfinished_tasks(self): result = [] for i in range(0, len(self.tasks)): if self.tasks[i].status == \u0026#34;未完成\u0026#34;: result.append(self.tasks[i]) return result def print_menu(): print(\u0026#34;Hello~\\n\u0026#34;) print(\u0026#34;请问你希望做什么呢？\u0026#34;) print(\u0026#34;1. 添加待办\u0026#34;) print(\u0026#34;2. 删除待办\u0026#34;) print(\u0026#34;3. 标记待办已完成\u0026#34;) print(\u0026#34;4. 退出\u0026#34;) def print_tasks(finished, unfinished): print(\u0026#34;未完成的待办：\u0026#34;) for i in range(0, len(unfinished)): print(i, unfinished[i].text) print(\u0026#34;\u0026#34;) print(\u0026#34;已完成的待办：\u0026#34;) for i in range(0, len(finished)): print(i, finished[i].text) print(\u0026#34;\u0026#34;) def print_all_tasks(all_tasks): for i in range(0, len(all_tasks)): print(i, all_tasks[i].text) if __name__ == \u0026#39;__main__\u0026#39;: my_task_list = TaskList() while True: clear_output() # 获取已完成和未完成的待办，存储在下面两个列表变量中 finished_tasks = my_task_list.get_finished_tasks() unfinished_tasks = my_task_list.get_unfinished_tasks() # 打印待办，直接调用 print_tasks 函数，并传入上面的两个变量即可 print_tasks(finished_tasks, unfinished_tasks) # 打印菜单，获取选项 print_menu() choice = input(\u0026#34;请输入要操作的序号并回车:\u0026#34;) if choice == \u0026#34;1\u0026#34;: # 通过 input 让用户输入待办内容，存储在text中 text = input(\u0026#34;请输入希望添加的待办内容\u0026#34;) # 通过 text 构造一个 Task 对象，并添加到 my_task_list 中 task = Task(text) my_task_list.add_task(task=task) elif choice == \u0026#34;2\u0026#34;: clear_output() # 打印出当前的所有 task，并让用户选择要删的序号 print_all_tasks(my_task_list.tasks) # 因为用户输入的内容是字符串的类型，所以需要转换为整型 idx = int(input(\u0026#34;请输入想删除的待办序号:\u0026#34;)) # 调用 remove_task 方法删除对应的 task my_task_list.remove_task(idx) elif choice == \u0026#34;3\u0026#34;: # 等于 3 时为标记待办完成，处理流程类似删除待办 # 只是最后一步不一样 clear_output() print_all_tasks(my_task_list.tasks) idx = input(\u0026#34;请输入希望标记完成的待办序号\u0026#34;) idx = int(idx) # 调用具体的 task 对象的 mark_finished 方法 my_task_list.tasks[idx].mark_finished() elif choice == \u0026#34;4\u0026#34;: # 等于 4 时代表退出，直接跳出循环即可 break ","date":"2021-07-13T00:00:00Z","permalink":"https://96bear.github.io/p/python%E5%B0%8F%E5%B7%A5%E5%85%B7%E7%A4%BA%E4%BE%8B1%E6%97%A5%E7%A8%8B%E7%AE%A1%E7%90%86%E5%B0%8F%E5%B7%A5%E5%85%B7/","title":"python小工具示例1《日程管理小工具》"},{"content":"手机获取B站cookie(安卓) 正题请看方法2\n方法1：httpcanary(小黄鸟)抓包 简略过程 安装抓包软件指定哔哩哔哩\n安装ca证书为系统证书\n登录筛选带cookie请求\n最后复制cookie\n总结 很明显大炮打蚊子，既需要一段时间的学习还有一定的上手门槛。因此我没有详细说明操作\n方法2:Alook浏览器 到正题了，这也是写这篇文章的原因。门槛实在足够低咯\n步骤 安装Alook浏览器 酷安下载地址 登录bilibili.com 长摁右下主页按钮-\u0026gt;开发者工具，现在你看到了什么\n","date":"2021-06-03T00:00:00Z","permalink":"https://96bear.github.io/p/%E7%94%A8%E6%89%8B%E6%9C%BA%E8%8E%B7%E5%8F%96cookie%E6%97%A0%E9%97%A8%E6%A7%9B/","title":"用手机获取cookie(无门槛)"},{"content":"这文章干嘛的 使用企业微信应用推送通知\n推送到微信或企业微信，速度很快\n需要什么操作 注册微信企业版 web页面创建应用 获取三个参数 一个函数 1、注册 注册微信企业版用个人微信就可以，不需要认证 链接：企业微信注册 (qq.com)\n2、创建 在登陆后就可以创建应用了\n应用管理 -\u0026gt; 自建 -\u0026gt; 创建应用，随便创建，可见范围可以只选择自己，也可以选择部门\n3、参数 这三个参数依次是：\ncorpid\ncorpsecret\nagentid\n如图 1处为agentid，2处为corpsecret，点击查看后需要在手机“企业微信”app内查看\ncorpid指的是企业ID，在 我的企业 -\u0026gt; 翻到最下边 查看\n4、函数 调用函数给自己的微信发送通知，注意\u0026ldquo;agentid\u0026quot;写死了1000002，有需要请自行修改\n以下只是一个示例，环境node.js，变量仅供示例无法使用\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 const corpsecret = \u0026#34;PgTp1JcsdLUP8jCsghyr3YHEnasgdaff6f3te3sfQ\u0026#34; const corpid = \u0026#34;wwra38952f94e286ra\u0026#34; function wx(msg) { return new Promise(async (resolve) =\u0026gt; { try { if (corpid \u0026amp;\u0026amp; corpsecret) { let url = `https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid=${corpid}\u0026amp;corpsecret=${corpsecret}` let res = await axios.get(url) access_token = res.data.access_token let turl = `https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token=${access_token}` let data = { \u0026#34;touser\u0026#34;: \u0026#34;@all\u0026#34;, \u0026#34;msgtype\u0026#34;: \u0026#34;text\u0026#34;, \u0026#34;agentid\u0026#34;: 1000002, \u0026#34;text\u0026#34;: { \u0026#34;content\u0026#34;: msg }, \u0026#34;safe\u0026#34;: 0 } let tres = await axios.post(turl, data) if (tres.data.errcode == 0) { console.log(\u0026#34;企业微信:发送成功\u0026#34;); } else { console.log(\u0026#34;企业微信:发送失败\u0026#34;); console.log(tres.data.errmsg); } } else { console.log(\u0026#34;企业微信:你还没有填写corpsecret和corpid呢，推送个鸡腿\u0026#34;); } } catch (err) { console.log(\u0026#34;企业微信：发送接口调用失败\u0026#34;); console.log(err); } resolve(); }); } 第二个示例（python）\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 # -*- codeing = utf-8 -*- # @Time : 2021/5/29 17:07 # @Author : 96bearli # @File : vxpush.py # @Software : PyCharm import requests import json corpId = \u0026#34;\u0026#34; # 企业id agentId = \u0026#34;\u0026#34; # 应用id secret = \u0026#34;\u0026#34; # 应用secret def vx(msg): try: if corpId and secret and agentId: url = \u0026#39;https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid=\u0026#39; + corpId + \u0026#39;\u0026amp;corpsecret=\u0026#39; + secret res = requests.get(url=url) jsonData = json.loads(res.text) if jsonData[\u0026#34;errmsg\u0026#34;] != \u0026#34;ok\u0026#34;: print(\u0026#34;errcode:\u0026#34;, jsonData[\u0026#34;errcode\u0026#34;], \u0026#34;\\n企业微信推送失败\u0026#34;) return 0 token = jsonData[\u0026#39;access_token\u0026#39;] t_url = \u0026#39;https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token=\u0026#39; + token data = { \u0026#34;touser\u0026#34;: \u0026#34;@all\u0026#34;, \u0026#34;msgtype\u0026#34;: \u0026#34;text\u0026#34;, \u0026#34;agentid\u0026#34;: agentId, \u0026#34;text\u0026#34;: { \u0026#34;content\u0026#34;: msg }, \u0026#34;safe\u0026#34;: 0 } send_data = (bytes(json.dumps(data), \u0026#39;utf-8\u0026#39;)) # 没这一步返回40008 t_res = requests.post(url=t_url, data=send_data) t_res_json = json.loads(t_res.text) print(\u0026#34;推送返回信息：\u0026#34; + t_res.text) if t_res_json[\u0026#34;errmsg\u0026#34;] == \u0026#34;ok\u0026#34;: print(\u0026#34;企业微信推送成功\u0026#34;) else: print(\u0026#34;企业微信推送失败\u0026#34;) else: print(\u0026#34;请填全企业id等参数\u0026#34;) return 0 except Exception as error: print(error) print(\u0026#34;请检查参数正误或网络畅通\u0026#34;) if __name__ == \u0026#39;__main__\u0026#39;: vx(\u0026#34;test\u0026#34;) 其他 微信推送 在以上操作完毕后只能在企业微信app内收到推送，所以需要使用微信插件\n位置：我的企业 -\u0026gt; 微信插件 -\u0026gt; 邀请关注\n微信扫描二维码，之后推送就能到微信了\n","date":"2021-04-26T00:00:00Z","permalink":"https://96bear.github.io/p/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E5%BA%94%E7%94%A8%E6%8E%A8%E9%80%81%E9%80%9A%E7%9F%A5jspython%E7%A4%BA%E4%BE%8B/","title":"企业微信应用推送通知(js,python示例)"},{"content":"视频 相关资料 用超级计算机调动免疫细胞绞杀癌细胞！【思维公益】－bilibili\nSARS-CoV-2感染触发了抗肿瘤免疫反应\n","date":"2021-04-04T00:00:00Z","permalink":"https://96bear.github.io/p/%E8%AE%A1%E7%AE%97-%E7%94%9F%E7%89%A9%E9%AB%98%E6%95%88%E6%B2%BB%E7%96%97%E7%99%8C%E7%97%87/","title":"计算+生物=高效治疗癌症"},{"content":"李跳跳-一款通杀手机广告的APP 特点 极简\n免费\n免root权限\n有效\n至今还没有发现不能跳过的广告\n多种模式\n可以自定义规则 勤奋的开发者\n(开发者贼可耐)\n下载地址 酷安-李跳跳\n","date":"2021-03-22T00:00:00Z","permalink":"https://96bear.github.io/p/%E6%9D%8E%E8%B7%B3%E8%B7%B3-%E8%B7%B3%E8%BF%87%E5%B9%BF%E5%91%8Aapp%E6%8E%A8%E8%8D%90/","title":"李跳跳-跳过广告(app推荐)"},{"content":"2021年3月11日 星期四 来自新东方考研直播\n一张图搞定搞定英语全程备考 时间 3-4月 4-6月 6-9月 9-11月 11-12月 内容 大纲词汇\u0026amp;真题语法 02-09真题初刷\u0026amp;旧年真题练手 10-19真题精刷逐年逐篇 一刷重点提高英语 真题二刷或三刷 再刷重点提高分数 模考20+21真题预测22考点 复习笔记关注易错 关于如何复习 只做真题就够了 以2010年为界限做真题，02年之后的就行了 先做02-09 后做10-19 先做精，再做多，考一做一 怎么做： 11月前一篇一篇做 11月之后模考整套做 练习题型先后: 阅读-20题分值40分 写作翻译新题型 完型填空 自学+听讲（吃透真题——五步做题法） 初读：掐时间做题 100分/180min（max\u0026lt;25min） 查读：对答案，查生词，准备自己的生词本 精读： 看文章的每句话 思考媒体的每个选项的正误原因 标记不懂，带着问题去听课 解读：听老师讲解 重点关注方法（解题步骤，思考角度） 对比差异，就是进步的关键！ 研读：复习生词+长难句+文章+题目+写作素材 重难点 考点 易错点，彩笔画上，复习用 3-4月 大纲词汇：前期最少2～3遍，先识别，再拼写\n（背单词贯穿始终，各阶段目标不同）\n多用碎片时间，重复很重要 真题语法：也是2～3遍，配合《句句真研》书。\n（重点：看懂句子+每日长难句熟练应用） 4-6月 02-09真题初刷 旧年真题练手\n6-9月 10-19真题精刷逐年逐篇 一刷重点提高英语\n9-11月 真题二刷或三刷 再刷重点提高分数\n再刷时不要踟蹰知道答案怎么办，重点在分析怎么做题 11-12月 模考20+21真题预测22考点 复习笔记关注易错\n不是为了算分，注意易错点 补充图片 ","date":"2021-03-11T00:00:00Z","permalink":"https://96bear.github.io/p/%E8%80%83%E7%A0%94%E8%8B%B1%E8%AF%AD%E6%95%B4%E4%BD%93%E8%A7%84%E5%88%92/","title":"考研英语整体规划"},{"content":" 序号 标题 标价 联系电话 备注 1 新上华电附近 华电宿舍 十三中河小附近 1000元月 50平 1000 153 5062 7766 2室1厅仅无冰箱电视 2 一中心医院，前卫路小学附近，尚达豪庭精装两室出租 1600 189 0332 0212 2室1厅仅无宽带 3 信誉楼京源柳郡 2室2厅 1600元月 精装修 配套齐全 1600 156 0326 8097 2室2厅 全有，且距离近 推荐 4 有钥匙看房方便，河北小学，三中附近金专宿舍两室出租 1000 189 0332 0212 2室1厅 仅无冰箱宽带 5 双彩小区(北区) 2室1厅1卫 1300 wx扫码小程序联系 2室1厅全有，路程cy10min 6 永华路四通附近精装2居拎包入住1100元 1100 133 3322 7600 同上 7 河北小学十三中，冀英小学，三中，附近省装生活区出租两室一厅 1400 133 3302 1110 2室1厅全有，步行9min，没电梯 中/6层 8 []() 9 []() 10 []() 11 []() ","date":"2021-02-19T00:00:00Z","permalink":"https://96bear.github.io/p/%E7%A7%9F%E6%88%BF/","title":"租房"},{"content":"说明 Github仓库访问，请多多star！\n从github拉取proxylist，本地验活后保存为txt文档 使用多线程加快速度 type可选 自动去重 原始地址访问失败后尝试自动更换镜像地址 验证方法：requests.get(url=\u0026quot;http://icanhazip.com/\u0026quot;, proxies=Proxy) 验证方法：采用双重验证telnet+req获取高质量代理 添加源 注意 对于文档的要求:\n一行一条，可以有无效行 需要utf-8编码才能使通用提取函数生效（大概） 模板 添加于代码中函数定义前\n1 2 3 4 5 6 7 8 9 10 11 12 13 # 获取代理信息的格式模板 # 文档url+模式+匹配ip规则+匹配端口规则+匹配模式规则 # 当type不固定时对应\u0026#34;mix\u0026#34; # 默认使用的telnet方法，有需求可以自行修改checkProxy() # raw2_http # 62.171.170.82:3128 raw = {\u0026#34;url\u0026#34;: \u0026#39;https://raw.githubusercontent.com/TheSpeedX/SOCKS-List/master/http.txt\u0026#39;, \u0026#34;type\u0026#34;: \u0026#34;http\u0026#34;, \u0026#34;findIp\u0026#34;: re.compile(r\u0026#39;(\\d+?\\.\\d+?\\.\\d+?\\.\\d+?):\u0026#39;), \u0026#34;findPort\u0026#34;: re.compile(r\u0026#39;:(\\d+?)\\n\u0026#39;), \u0026#34;findType\u0026#34;: \u0026#34;\u0026#34;} raws.append(raw) 免责 本项目因为兴趣而生，开源仅供测试。\n当前版本源码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 # -*- codeing = utf-8 -*- # @Time : 2021/1/26 22:25 # @Author : 96bearli # @File : main.py # @Software : PyCharm \u0026#39;\u0026#39;\u0026#39; 思路 从github拉取proxylist，本地验活后保存为txt文档 文档包含 http/https,ip:port,ping 验证方法 requests.get(url=\u0026#34;http://icanhazip.com/\u0026#34;, proxies=Proxy)\u0026gt;划掉但仍可选，并发应减少到个位 默认 telnet验证 使用多线程加快速度 type可选 在checkProxy() if \u0026#34;http\u0026#34; in type: 处修改 即将增加的功能 去重\u0026gt;已增加 更改：采用双重验证方法获取高质量稳定代理（比如2500筛选100） \u0026#39;\u0026#39;\u0026#39; import telnetlib import requests import re import queue import threading # 获取代理信息的格式模板 # 文档要求: 1.一行一条，可以有无效行 # 2.需要utf-8编码才能使通用提取函数生效（大概） # 文档url+模式+匹配ip规则+匹配端口规则+匹配模式规则 # 当type不固定时对应\u0026#34;mix\u0026#34;,且默认使用的的telnet不支持ss4/ss5 # 有需求可以自行修改checkProxy() # raw = {\u0026#34;url\u0026#34;: \u0026#39;https://raw.githubusercontent.com/fate0/proxylist/master/proxy.list\u0026#39;, # \u0026#34;type\u0026#34;: \u0026#34;mix\u0026#34;, # \u0026#34;findIp\u0026#34;: re.compile(r\u0026#39;\u0026#34;host\u0026#34;: \u0026#34;(.+?)\u0026#34;\u0026#39;), # \u0026#34;findPort\u0026#34;: re.compile(r\u0026#39;\u0026#34;port\u0026#34;: (\\d+?),\u0026#39;), # \u0026#34;findType\u0026#34;: re.compile(r\u0026#39;\u0026#34;type\u0026#34;: \u0026#34;(.+?)\u0026#34;\u0026#39;)} # raws.append(raw) raws = [] # raw1_mix # {\u0026#34;host\u0026#34;: \u0026#34;3.211.65.185\u0026#34;, \u0026#34;from\u0026#34;: \u0026#34;proxylist\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;US\u0026#34;, \u0026#34;port\u0026#34;: 80, \u0026#34;response_time\u0026#34;: 0.82, \u0026#34;export_address\u0026#34;: [\u0026#34;35.193.184.18\u0026#34;, \u0026#34;192.168.99.102\u0026#34;, \u0026#34;54.226.33.176\u0026#34;], \u0026#34;type\u0026#34;: \u0026#34;http\u0026#34;, \u0026#34;anonymity\u0026#34;: \u0026#34;high_anonymous\u0026#34;} raw = {\u0026#34;url\u0026#34;: \u0026#39;https://raw.githubusercontent.com/fate0/proxylist/master/proxy.list\u0026#39;, \u0026#34;type\u0026#34;: \u0026#34;mix\u0026#34;, \u0026#34;findIp\u0026#34;: re.compile(r\u0026#39;\u0026#34;host\u0026#34;: \u0026#34;(.+?)\u0026#34;\u0026#39;), \u0026#34;findPort\u0026#34;: re.compile(r\u0026#39;\u0026#34;port\u0026#34;: (\\d+?),\u0026#39;), \u0026#34;findType\u0026#34;: re.compile(r\u0026#39;\u0026#34;type\u0026#34;: \u0026#34;(.+?)\u0026#34;\u0026#39;)} raws.append(raw) # raw2_http # 62.171.170.82:3128 raw = {\u0026#34;url\u0026#34;: \u0026#39;https://raw.githubusercontent.com/TheSpeedX/SOCKS-List/master/http.txt\u0026#39;, \u0026#34;type\u0026#34;: \u0026#34;http\u0026#34;, \u0026#34;findIp\u0026#34;: re.compile(r\u0026#39;(\\d+?\\.\\d+?\\.\\d+?\\.\\d+?):\u0026#39;), \u0026#34;findPort\u0026#34;: re.compile(r\u0026#39;:(\\d+?)\\n\u0026#39;), \u0026#34;findType\u0026#34;: \u0026#34;\u0026#34;} raws.append(raw) # raw3_http # 62.171.170.82:3128 raw = {\u0026#34;url\u0026#34;: \u0026#39;https://raw.githubusercontent.com/clarketm/proxy-list/master/proxy-list-raw.txt\u0026#39;, \u0026#34;type\u0026#34;: \u0026#34;http\u0026#34;, \u0026#34;findIp\u0026#34;: re.compile(r\u0026#39;(\\d+?\\.\\d+?\\.\\d+?\\.\\d+?):\u0026#39;), \u0026#34;findPort\u0026#34;: re.compile(r\u0026#39;:(\\d+?)\\n\u0026#39;), \u0026#34;findType\u0026#34;: \u0026#34;\u0026#34;} raws.append(raw) # raw4_http # 178.212.54.137:8080 raw = {\u0026#34;url\u0026#34;: \u0026#39;https://raw.githubusercontent.com/ShiftyTR/Proxy-List/master/http.txt\u0026#39;, \u0026#34;type\u0026#34;: \u0026#34;http\u0026#34;, \u0026#34;findIp\u0026#34;: re.compile(r\u0026#39;(\\d+?\\.\\d+?\\.\\d+?\\.\\d+?):\u0026#39;), \u0026#34;findPort\u0026#34;: re.compile(r\u0026#39;:(\\d+?)\\n\u0026#39;), \u0026#34;findType\u0026#34;: \u0026#34;\u0026#34;} raws.append(raw) # raw5_https # 103.21.161.105:6667 raw = {\u0026#34;url\u0026#34;: \u0026#39;https://raw.githubusercontent.com/hookzof/socks5_list/master/proxy.txt\u0026#39;, \u0026#34;type\u0026#34;: \u0026#34;https\u0026#34;, \u0026#34;findIp\u0026#34;: re.compile(r\u0026#39;(\\d+?\\.\\d+?\\.\\d+?\\.\\d+?):\u0026#39;), \u0026#34;findPort\u0026#34;: re.compile(r\u0026#39;:(\\d+?)\\r\\n\u0026#39;), \u0026#34;findType\u0026#34;: \u0026#34;\u0026#34;} raws.append(raw) # raw6_HTTP/HTTPS # 203.202.245.58:80 raw = {\u0026#34;url\u0026#34;: \u0026#39;https://sunny9577.github.io/proxy-scraper/proxies.txt\u0026#39;, \u0026#34;type\u0026#34;: \u0026#34;https\u0026#34;, \u0026#34;findIp\u0026#34;: re.compile(r\u0026#39;(\\d+?\\.\\d+?\\.\\d+?\\.\\d+?):\u0026#39;), \u0026#34;findPort\u0026#34;: re.compile(r\u0026#39;:(\\d+?)\\n\u0026#39;), \u0026#34;findType\u0026#34;: \u0026#34;\u0026#34;} raws.append(raw) # 镜像，按需替换链接 # 内地cdn # proxyListUrl = \u0026#39;https://raw.sevencdn.com/fate0/proxylist/master/proxy.list\u0026#39; # proxyListUrl = \u0026#39;https://cdn.jsdelivr.net/gh/fate0/proxylist@master/proxy.list\u0026#39; # 香港cdn # proxyListUrl = \u0026#39;https://raw.githubusercontent.com/fate0/proxylist/master/proxy.list\u0026#39; def checkProxy(): # 当队列不为空时 while not checkDataQueue.empty(): # 从队列读取一条数据 # 读取是阻塞操作 proxies = checkDataQueue.get() ip = proxies[0] port = proxies[1] type = proxies[2] Proxy = type + \u0026#39;://\u0026#39; + ip + \u0026#39;:\u0026#39; + port print(Proxy) try: # 尝试使用telnet和req结合的双重验证 telnetlib.Telnet(ip, port=port, timeout=3) # 在这里选择type，in筛选http/https。not in 或其他 # if \u0026#34;http\u0026#34; in type: if type == \u0026#34;http\u0026#34;: rep = requests.get(url=\u0026#34;http://icanhazip.com/\u0026#34;, timeout=3, proxies={type: Proxy}) repIp = str(rep.text.replace(\u0026#34;\\n\u0026#34;, \u0026#34;\u0026#34;)) if repIp in Proxy: print(\u0026#34;双重验证后找到一条较高质量的代理,%s\u0026#34; % Proxy) # 申请获取锁，此过程为阻塞等待状态，直到获取锁完毕 mutex_lock.acquire() with open(\u0026#39;./proxy.txt\u0026#39;, \u0026#39;a+\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;) as file: file.write(Proxy+\u0026#39;\\n\u0026#39;) mutex_lock.release() # 纯requests方法 # rep = requests.get(url=\u0026#34;http://icanhazip.com/\u0026#34;, timeout=3, proxies={type: Proxy}) # repIp = rep.text.replace(\u0026#34;\\n\u0026#34;, \u0026#34;\u0026#34;) # if repIp == ip: # if type == \u0026#34;http\u0026#34;: # print(\u0026#34;找到一条有效代理 %s\u0026#34; % Proxy) # # 申请获取锁，此过程为阻塞等待状态，直到获取锁完毕 # mutex_lock.acquire() # with open(\u0026#39;./proxy.txt\u0026#39;, \u0026#39;a+\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;) as f: # f.write(Proxy + \u0026#34;\\n\u0026#34;) # mutex_lock.release() # else: # print(\u0026#34;无效\u0026#34;) # 纯telnet的方式 # telnetlib.Telnet(ip, port=port, timeout=3) # # 在这里选择type，in筛选http/https。not in 其他，并自行修改检查方式为requests # # if \u0026#34;http\u0026#34; in type: # if type == \u0026#34;http\u0026#34;: # print(\u0026#34;找到一条有效代理 %s\u0026#34; % Proxy) # # 申请获取锁，此过程为阻塞等待状态，直到获取锁完毕 # mutex_lock.acquire() # with open(\u0026#39;./proxy.txt\u0026#39;, \u0026#39;a+\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;) as f: # f.write(Proxy + \u0026#34;\\n\u0026#34;) # mutex_lock.release() # else: # print(\u0026#34;无效\u0026#34;) except Exception as proxyError: print(proxyError) print(\u0026#34;无效\u0026#34;) def reWriteList(aList): # 刚开始想直接list(set(list)),报错列表不能哈希，查了一下二维列表需要先转元组 aList = list(set([tuple(t) for t in aList])) return aList def getProxyList(): allList = [] for raw in raws: print(\u0026#34;-\u0026#34; * 20) print(\u0026#34;正在尝试获取源raw%i提供的列表\u0026#34; % (raws.index(raw) + 1)) try: response = requests.get(raw[\u0026#34;url\u0026#34;], timeout=3) print(response.content) except Exception as rawError: print(rawError) try: # 尝试自动更换镜像 response = requests.get(raw[\u0026#34;url\u0026#34;].replace(\u0026#34;raw.githubusercontent.com\u0026#34;, \u0026#34;raw.sevencdn.com\u0026#34;), timeout=3) print(response.content) print(\u0026#34;raw%i原始地址尝试失败，自动更换镜像地址成功\u0026#34; % (raws.index(raw) + 1)) except Exception as rawError2: print(rawError2) input(\u0026#34;raw%i_url已失效，请检查，可尝试自行更换，按回车继续\u0026#34; % (raws.index(raw) + 1)) continue # 分割双保险 try: print(\u0026#34;尝试.split(\u0026#39;\\\\n\u0026#39;)分割\u0026#34;) # \\n分割 theList = response.content.split(\u0026#39;\\n\u0026#39;) except: # 用re正则提取单条数据 print(\u0026#34;尝试正则分割\u0026#34;) findLine = re.compile(r\u0026#34;.+?\\n\u0026#34;) theList = re.findall(findLine, response.text) # 提取数据 if raw[\u0026#34;type\u0026#34;] != \u0026#34;mix\u0026#34;: for line in theList: line = str(line) try: ip = re.findall(raw[\u0026#34;findIp\u0026#34;], line)[0] port = re.findall(raw[\u0026#34;findPort\u0026#34;], line)[0] type = raw[\u0026#34;type\u0026#34;] aList = [ip, port, type] allList.append(aList) except Exception as reError: print(reError) continue else: for line in theList: line = str(line) try: ip = re.findall(raw[\u0026#34;findIp\u0026#34;], line)[0] port = re.findall(raw[\u0026#34;findPort\u0026#34;], line)[0] type = re.findall(raw[\u0026#34;findType\u0026#34;], line)[0] aList = [ip, port, type] allList.append(aList) except Exception as reError: print(reError) continue # 去重+统计 from time import sleep before = len(allList) if before == 0: print(\u0026#34;还是好好检查一下源的配置吧\u0026#34;) exit() allList = reWriteList(allList) after = len(allList) print(\u0026#34;-\u0026#34; * 20) print(\u0026#34;本次运行获取代理数据%i条，去重复后剩余%i条\u0026#34; % (before, after)) print(\u0026#34;3秒后自动开始多进程验活\u0026#34;) print(\u0026#34;-\u0026#34; * 20) sleep(3) # 测试点 # with open(\u0026#34;./cache\u0026#34;, \u0026#34;w\u0026#34;) as f: # for all in allList: # for a in all: # f.write(a) # f.write(\u0026#34;\\n\u0026#34;) return allList if __name__ == \u0026#39;__main__\u0026#39;: # 先拿到要处理的代理数据列表 proxiesList = getProxyList() # 创建空文件./proxy.txt with open(\u0026#39;./proxy.txt\u0026#39;, \u0026#39;w\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;) as f: pass # 将所有代理数据列表放入先进先出FIFO队列中 # 队列的写入和读取都是阻塞的，故在多线程情况下不会乱 # 在不使用框架的前提下，引入多线程，提高爬取效率 # 创建一个队列 checkDataQueue = queue.Queue(len(proxiesList)) # 写入代理数据到队列 for proxy in proxiesList: # proxiesList[i]也是list类型，分别存入队列 checkDataQueue.put(proxy) proxiesList = [] # 创建一个线程锁，防止多线程写入文件时发生错乱 mutex_lock = threading.Lock() # 线程数为500，在一定范围内，线程数越多，速度越快。 # 小心点，别变成ddos把验证服务器干死 for i in range(500): t = threading.Thread(target=checkProxy, name=\u0026#39;LoopThread\u0026#39; + str(i)) t.start() ","date":"2021-01-30T00:00:00Z","permalink":"https://96bear.github.io/p/%E4%BB%8Egithub%E6%8B%89%E5%8F%96proxylist%E6%9C%AC%E5%9C%B0%E9%AA%8C%E6%B4%BB%E5%B9%B6%E4%BF%9D%E5%AD%98%E4%B8%BAtxt%E6%96%87%E6%A1%A3/","title":"从github拉取proxylist本地验活并保存为txt文档"},{"content":"环境 win10 x64\n下载 免费的社区版\n进入后在右侧选择版本\n我使用的是3.6，点击下载（如果跳出登录可以谷歌登录或任意填写）\n安装 双击安装包\n在这个页面选择custom自定义安装\n取消勾选右下角的Install MongoDB Compass\n配置环境 环境变量 win+r快捷键呼出运行，输入sysdm.cpl回车 高级选项卡，右下角环境变量 编辑path ，新建\u0026gt;输入自定义的MongoDB安装路径下bin文件夹，最后全部确定 新建数据目录 win+r，cmd回车打开命令行,依次运行下面命令\n第一行为位置，第二行为创建的文件夹，自行更改\n1 2 cd g:\\ md \u0026#34;\\data\\db\u0026#34; 完成后输入以下命令运行server\n1 mongod --dbpath g:\\data\\db 没有出现以下信息且没有自动退出即为成功\n1 [initandlisten] *** immediate exit due to unhandled exception 服务端口和pid等信息在输出的初始位置\n1 starting : pid=16152 port=27017 dbpath=g:\\data\\db 64-bit host=XXXX 基本使用 运行mongod server 命令行运行\n1 mongod --dbpath g:\\data\\db 操作数据库 版本3.6安装完成之后默认不需要用户名与密码\n所以另外打开一个命令行后直接输入\n1 mongod 即可对数据库进行操作，具体操作请另行搜索\n几个mogodb基本命令 命令 作用 show dbs -\u0026mdash;列出所有数据库 db.getName() -\u0026mdash;列出当前数据库名 use dbname -\u0026mdash;切换到某个数据库 db.createUser() -\u0026mdash;创建用户角色 db.auth() -\u0026mdash; 验证用户到数据库 ","date":"2021-01-26T00:00:00Z","permalink":"https://96bear.github.io/p/win10%E5%AE%89%E8%A3%85mongodb%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B9%B6%E9%85%8D%E7%BD%AEmongodb%E6%9C%8D%E5%8A%A1/","title":"win10安装MongoDB数据库并配置MongoDB服务"},{"content":"MdDealWithImg2-Base64OrLocal-、 仓库 GitHub\nmarkdown图片批量处理到本地|base64 or local 写的发GitHub的英文版readme不能浪费是不是 \u0026gt;_\u0026lt;\nWhat\u0026rsquo;s this? Localization of image links referenced in markdown documents . And you have two options:\nSave in Base64 format; Reference local images. 这是个啥？ 将markdown文档引用的图片链接本地化 你有两种选择：\n保存img为base64格式; 引用下载到本地的图片. ps：不太推荐1，特别是大量图片的文件，更容易出现种种问题，而且文档打开速度，1.2倍的大小等等，这些都是不利条件\nAnd How to use it? Put the document you want to process in the folder \u0026ldquo;before\u0026rdquo;. Then run main.py. You can find the new documents in the folder \u0026ldquo;output\u0026rdquo;. 怎么用？ 把你想处理的.md文档放在before文件夹中 运行主程序main.py. 输出文件会保存到output文件夹 ps: 两种模式图片都会保存到output内同名文件夹，图片可能会请求失败或404，但是会创建一个空的图片文件顶位置。\n另外每次运行output文件夹自动重置清空\nImport 1 2 3 4 5 6 import re import os import urllib.error import urllib.request import shutil import base64 当前版本的源码（最好前往github查看最新） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 # -*- codeing = utf-8 -*- # @Time : 2021/1/25 13:29 # @Author : 96bearli # @File : main.py # @Software : PyCharm import re import os import urllib.error import urllib.request import shutil import base64 # python读取文件夹内文件名 def findMd(path): try: files = os.listdir(path) if len(files) == 0: print(\u0026#34;指定目录下无文件，请检查重试\u0026#34;) exit() except FileNotFoundError as error: print(error) print(\u0026#34;文件夹./before不存在，已自动创建，请移动文件并重试\u0026#34;) os.mkdir(path) exit() for name in files: # 在列表中移除非.md文件 if \u0026#34;.md\u0026#34; not in name: files.remove(name) if len(files) == 0: print(\u0026#34;./before文件夹下不包含可处理的markdown文件，请检查重试\u0026#34;) exit() return files def findImgUrl(filePath): with open(filePath, \u0026#34;r\u0026#34;, encoding=\u0026#34;utf-8\u0026#34;) as f: md = f.read() findImg = re.compile(r\u0026#34;!\\[.*?\\]\\((http.+?)\\)\u0026#34;) # findImg = re.compile(\u0026#39;http.+?jpg\u0026#39;) urls = re.findall(findImg, md) return urls def getImg(urls): dataList = [] for url in urls: headers = { \u0026#34;User-Agent\u0026#34;: \u0026#34;Mozilla/5.0 (iPhone; CPU iPhone OS 13_2_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.0.3 Mobile/15E148 Safari/604.1 Edg/88.0.4324.96\u0026#34; } try: req = urllib.request.Request(url=url, headers=headers) except Exception as error: print(error) print(\u0026#34;构造请求出错\u0026#34;) try: imgData = urllib.request.urlopen(req,timeout=5) dataList.append(imgData) except Exception as error: print(error) print(\u0026#34;Get image error! retry!\u0026#34;) try: imgData = urllib.request.urlopen(req,timeout=5) dataList.append(imgData) except: print(\u0026#34;Again!\u0026#34;) dataList.append(\u0026#34; \u0026#34;) return dataList def saveImg(fName, Datas): imgPath = \u0026#34;./output/%s\u0026#34; % fName.replace(\u0026#34;.md\u0026#34;, \u0026#34;\u0026#34;) # 文件保存路径，如果不存在就会被重建 if not os.path.exists(imgPath): # 如果路径不存在 os.makedirs(imgPath) count = 0 for Data in Datas: try: with open(\u0026#34;%s/%s.jpg\u0026#34; % (imgPath, str(count)), \u0026#39;wb\u0026#39;) as f: f.write(Data.read()) except Exception as imgError: print(imgError) print(\u0026#34;图片保存出错，正在重试\u0026#34;) try: with open(\u0026#34;%s/%s.jpg\u0026#34; % (imgPath, str(count)), \u0026#39;wb\u0026#39;) as f: f.write(Data) except Exception as imgError: print(imgError) print(\u0026#34;还是不行\u0026#34;) with open(\u0026#34;%s/%s.jpg\u0026#34; % (imgPath, str(count)), \u0026#39;w\u0026#39;) as f: f.write(\u0026#34;Data\u0026#34;) count += 1 def img2Base64(name, count): # image_base64 = str(base64.b64encode(image)) # return image_base64 with open(\u0026#34;./output/%s/%s.jpg\u0026#34; % (name.replace(\u0026#34;.md\u0026#34;, \u0026#34;\u0026#34;), str(count)), \u0026#39;rb\u0026#39;) as f: image = f.read() image_base64 = str(base64.b64encode(image), encoding=\u0026#39;utf-8\u0026#39;) # print(\u0026#34;%s.jpg转为base64格式成功\u0026#34; % str(count)) str1 = str(\u0026#34;data:image/jpg;base64,\u0026#34; + image_base64) return str1 def saveMdBase64(urls, name, path): try: with open(path + \u0026#34;/\u0026#34; + name, \u0026#39;r\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;) as f: text = f.read() except Exception as fileError: print(fileError) print(\u0026#34;???文件呢，你给我藏哪去了？刚才明明还在的，得，下一个\u0026#34;) return 0 for i in range(len(urls)): try: data = img2Base64(name, i) # text = re.sub(urls[i], data, text) text = text.replace(urls[i], data) except Exception as Terror: print(Terror) print(\u0026#34;图片转base64失败\u0026#34;) continue with open(\u0026#34;./output/%s\u0026#34; % name, \u0026#34;w\u0026#34;, encoding=\u0026#39;utf-8\u0026#39;) as f: f.write(text) print(\u0026#34;* %s处理完毕\u0026#34; % name) return 1 def saveMdLocal(urls, name, path): try: with open(path + \u0026#34;/\u0026#34; + name, \u0026#39;r\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;) as f: text = f.read() except Exception as fileError: print(fileError) print(\u0026#34;???文件呢，你给我藏哪去了？刚才明明还在的，得，下一个\u0026#34;) return for i in range(len(urls)): try: text = text.replace(urls[i], \u0026#34;./%s/%s.jpg\u0026#34; % (name.replace(\u0026#34;.md\u0026#34;, \u0026#34;\u0026#34;), str(i))) except Exception as Terror: print(Terror) print(\u0026#34;就这么一会儿文件内容就动过了？\u0026#34;) continue with open(\u0026#34;./output/%s\u0026#34; % name, \u0026#34;w\u0026#34;, encoding=\u0026#39;utf-8\u0026#39;) as f: f.write(text) print(\u0026#34;* %s处理完毕\u0026#34; % name) if __name__ == \u0026#39;__main__\u0026#39;: readPath = \u0026#34;./before\u0026#34; fileList = [] fileList = findMd(readPath) print(\u0026#34;请注意:output文件夹即将自动重置，请关闭output文件夹或该文件夹下的任何正在使用程序\u0026#34;) print(\u0026#34;-\u0026#34; * 30) choose = input(\u0026#34;请选择转存模式(默认base64):\\n* 输入1:本地图片\\n* 输入其他:base64(如果图片太多会打开困难，请谨慎选择)\\n\u0026#34;) outputPath = \u0026#34;./output\u0026#34; # 文件保存路径，如果不存在就会被重建 if os.path.exists(outputPath): # 如果路径存在 shutil.rmtree(outputPath) # os.remove(outputPath) # 这个不对，应该是递归删除非空 for fileName in fileList: print(\u0026#34;当前进度:%i/%i\u0026#34;%(fileList.index(fileName)+1,len(fileList))) try: imgUrls = findImgUrl(readPath + \u0026#39;/\u0026#39; + fileName) # 用获取的文件路径查找文件中的img链接 if len(imgUrls) == 0: print(\u0026#34;%s内未引用图片链接,跳过\u0026#34; % fileName) print(\u0026#34;-\u0026#34; * 30) continue elif len(imgUrls) \u0026gt;= 10: print(\u0026#34;当前文件需要处理%i个链接，可能需要较长时间，请耐心等待\u0026#34;%len(imgUrls)) except Exception as error: print(error) print(\u0026#34;文件%s获取图片链接出错\u0026#34; % fileName) continue try: imgDatas = getImg(imgUrls) except Exception as error: print(\u0026#34;图片数据获取失败\u0026#34;) continue try: saveImg(fileName, imgDatas) except Exception as error: print(error) print(\u0026#34;图片保存出错\u0026#34;) continue if choose == \u0026#34;1\u0026#34;: try: saveMdLocal(imgUrls, fileName, readPath) except Exception as error: print(error) print(\u0026#34;文件%s保存出错，图片转Local出错\u0026#34; % fileName) continue else: try: if saveMdBase64(imgUrls, fileName, readPath) == 0: print(\u0026#34;-\u0026#34; * 30) continue except Exception as error: print(error) print(\u0026#34;文件%s保存出错，图片转base64出错\u0026#34; % fileName) continue print(\u0026#34;新的文件%s已保存到output文件夹\u0026#34; % fileName) print(\u0026#34;-\u0026#34; * 30) print(\u0026#34;全部完成\u0026#34;) ","date":"2021-01-25T00:00:00Z","permalink":"https://96bear.github.io/p/markdown%E5%9B%BE%E7%89%87%E6%89%B9%E9%87%8F%E5%A4%84%E7%90%86%E5%88%B0%E6%9C%AC%E5%9C%B0base64-or-local/","title":"markdown图片批量处理到本地|base64 or  local"},{"content":"标准科学 国家级期刊 标准科学杂志社简介 1 2 3 4 《标准科学杂志》注重性、学术性，努力做到风格清新、雅俗共赏。创刊于1964年，经新闻总署批准公开发行的专业性学术期刊，CN:11-5811/T。创刊以来一直是各种工业信息交流的重要平台。 《标准科学杂志》是数据、知识和创新管理成为时代发展的主题和关注焦点，是知识经济、智能制造、产业转型、创新发展的重要着力点。由此《标准科学》拟以数据、知识和创新管理为主题出版增刊，拟定于2019年9月出版（知网全文收录）。 基本信息 主管单位：国家质量监督检验\u0026hellip; 国内刊号：11-5811/T 创刊时间：1964\n主办单位：中国标准化研究院\u0026hellip; 出版地方：北京 发行周期：月刊\n国际刊号：1674-5698 邮发代号：2-662 业务类型：期刊征订\n期刊收录： 知网收录(中) 上海图书馆馆藏 国家图书馆馆藏 万方收录(中) 维普收录(中)\n期刊荣誉： 中国期刊全文数据库（CJFD） 中国核心期刊遴选数据库\n标准科学杂志文章特色 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 1.《标准科学》来稿选题新颖，具有开拓性和创新性。 2.《标准科学》稿件要求所报道的最新研究理论、实验方法、技术数据可靠，推理严谨,结论明确； 3.《标准科学》在文章的摘要中要说明本文所报道的研究工作的意义，所使用的主要方法，研究结果和结论.论文要尽可能详细地描述出所采用的实验方法，取得的研究成果，及有待讨论的问题； 4.写作要规范，不涉及保密问题，无抄袭或一稿两投。 5.来稿须有中英文标题、中英文摘要和关键词、以及作者单位的中英文，第一作者简介（包括出生年、性别、职位/职称以及研究方向），图、表应与正文对应。 6.来稿请注明详细地址和电话，便于通知联系及邮寄刊物。 7.稿件中的参考文献其格式请参照GB/T7714-2005《文后参考文献著录规则》，表达方式如下： [期刊]主要责任者.文献题名[J].刊名,年,卷(期):起止页码. [书籍]主要责任者.文献题名[文献类型标识].出版地:出版者,出版年:起止页码. 附文献类型标识 专著[M]、论文集[C]、报纸文章[N]、期刊文章[J]、学位论文[D]、报告[R]、标准[S]、专利[P] 联系我们: 点击这里\n","date":"2021-01-17T00:00:00Z","permalink":"https://96bear.github.io/p/%E6%A0%87%E5%87%86%E7%A7%91%E5%AD%A6-%E5%9B%BD%E5%AE%B6%E7%BA%A7%E6%9C%9F%E5%88%8A/","title":"标准科学 国家级期刊"},{"content":"\n学习视频链接(bilibli) 源码仓库(github)\n要学习的内容 python的基础\n网络爬虫的技术实现\n通过框架 组件等数据可视化的技术应用\npython基础知识 认识python 解释型（用的不是编译器，十解释器），面向对象的高级编程语言\n开源 交互 跨平台移植\n最开始由C语言实现\npython2 python3 不兼容\n火是因为应用场景广\n易于使用，简单优雅\n运行速度慢（相对于C）原因在于解释型语言 边解释为机器码一边执行，适用于小项目\n代码不能加密\n应用场景广\n应用方向\n环境 python3 windows要设置路径\nide是pycharm\n1 2 3 4 5 #-*- codeing = utf-8 -*- #@Time : ${DATE} ${TIME} #@Author : 96bearli #@File : ${NAME}.py #@Software : ${PRODUCT_NAME} 变量 变量的规定 变量可以是任意的数据类型\n变量名必须是大小写英文，数字和下划线_的组合，且不能数字开头\n1 2 a=1 #整数 t_002=\u0026#39;96bearli\u0026#39; #字符串 变量名不能用的关键字\n1 2 3 4 5 import keyword keyword.kwlist \u0026#39;\u0026#39;\u0026#39;输出 [\u0026#39;False\u0026#39;, \u0026#39;None\u0026#39;, \u0026#39;True\u0026#39;, \u0026#39;and\u0026#39;, \u0026#39;as\u0026#39;, \u0026#39;assert\u0026#39;, \u0026#39;async\u0026#39;, \u0026#39;await\u0026#39;, \u0026#39;break\u0026#39;, \u0026#39;class\u0026#39;, \u0026#39;continue\u0026#39;, \u0026#39;def\u0026#39;, \u0026#39;del\u0026#39;, \u0026#39;elif\u0026#39;, \u0026#39;else\u0026#39;, \u0026#39;except\u0026#39;, \u0026#39;finally\u0026#39;, \u0026#39;for\u0026#39;, \u0026#39;from\u0026#39;, \u0026#39;global\u0026#39;, \u0026#39;if\u0026#39;, \u0026#39;import\u0026#39;, \u0026#39;in\u0026#39;, \u0026#39;is\u0026#39;, \u0026#39;lambda\u0026#39;, \u0026#39;nonlocal\u0026#39;, \u0026#39;not\u0026#39;, \u0026#39;or\u0026#39;, \u0026#39;pass\u0026#39;, \u0026#39;raise\u0026#39;, \u0026#39;return\u0026#39;, \u0026#39;try\u0026#39;, \u0026#39;while\u0026#39;, \u0026#39;with\u0026#39;, \u0026#39;yield\u0026#39;] \u0026#39;\u0026#39;\u0026#39; 标准化输出 1 2 3 4 5 6 print(\u0026#34;标准化输出字符串\u0026#34;) a=10 print(\u0026#34;这是变量a=\u0026#34;,a)#需要一个半角逗号 \u0026#39;\u0026#39;\u0026#39;输出 这是变量a= 10 \u0026#39;\u0026#39;\u0026#39; 1 2 3 4 5 6 7 8 9 age=18 print(\u0026#34;我的名字是%s，我的国籍是%s\u0026#34;%(\u0026#34;bear\u0026#34;,\u0026#34;china\u0026#34;)) print(\u0026#34;我的年龄是：%d岁\u0026#34;%age) print(\u0026#34;我的名字是%s，我的年龄是：%d岁,我的国籍是%s\u0026#34;%(\u0026#34;bear\u0026#34;,age,\u0026#34;china\u0026#34;)) \u0026#39;\u0026#39;\u0026#39;输出 我的名字是bear，我的国籍是china 我的年龄是：18岁 我的名字是bear，我的年龄是：18岁,我的国籍是china \u0026#39;\u0026#39;\u0026#39; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 print(\u0026#34;www\u0026#34;,\u0026#34;baidu\u0026#34;,\u0026#34;com\u0026#34;) print(\u0026#34;www\u0026#34;,\u0026#34;baidu\u0026#34;,\u0026#34;com\u0026#34;,sep=\u0026#34;.\u0026#34;) #间隔指定\u0026#34;.\u0026#34; print(\u0026#34;www\u0026#34;,\u0026#34;baidu\u0026#34;,\u0026#34;com\u0026#34;,sep=\u0026#34;\u0026#34;) #指定无间隔 print(\u0026#34;hello\u0026#34;,end=\u0026#34;\u0026#34;) #无空格不换行 print(\u0026#34;world\u0026#34;,end=\u0026#34;\\t\u0026#34;) #tab print(\u0026#34;python\u0026#34;,end=\u0026#34;\\n\u0026#34;) #换行,等效print(\u0026#34;python\u0026#34;)即默认\\n print(\u0026#34;!\u0026#34;) \u0026#39;\u0026#39;\u0026#39;输出 www baidu com www.baidu.com wwwbaiducom helloworld python ! \u0026#39;\u0026#39;\u0026#39; 格式符号 常用的 %s %d %f\n输入 输入函数input() 1 2 3 4 5 6 7 password=input(\u0026#34;请输入密码\u0026#34;)#input()输入 print(\u0026#34;您刚刚输入的密码是\u0026#34;,password,sep=\u0026#34;\u0026#34;) \u0026#39;\u0026#39;\u0026#39;输出 请输入密码bearbearli 您刚刚输入的密码是bearbearli \u0026#39;\u0026#39;\u0026#39; #score = int(input(\u0026#34;请输入成绩\u0026#34;)) 类型函数type() 1 2 3 4 5 6 7 # a=10 # print(type(a)) #type()类型 # a=\u0026#34;abc\u0026#34; # print(type(a)) #type() a=input(\u0026#34;输入:\u0026#34;) print(type(a)) #输出\u0026lt;class \u0026#39;str\u0026#39;\u0026gt; # print(\u0026#34;输入了一个数字:%d\u0026#34;%a) 强制类型转换 int()\nstr()\n1 2 3 4 5 6 7 8 9 10 11 12 13 #强制类型转换 a=input(\u0026#34;输入:\u0026#34;) print(type(a)) #输出\u0026lt;class \u0026#39;str\u0026#39;\u0026gt; a=int(a) #以上三行a=int(input(\u0026#34;输入:\u0026#34;))一步到位 print(type(a)) #输出\u0026lt;class \u0026#39;int\u0026#39;\u0026gt; b=11 print(a+b) \u0026#39;\u0026#39;\u0026#39; 输入:2131 \u0026lt;class \u0026#39;str\u0026#39;\u0026gt; \u0026lt;class \u0026#39;int\u0026#39;\u0026gt; 2142 \u0026#39;\u0026#39;\u0026#39; 运算符 算术运算符 x**y 返回 x的y次幂(方)\n//向下取整除\n比较运算符 位运算符 逻辑运算符和成员运算符 运算符的优先级 判断语句和循环语句 判断语句 True:任何非零非空\nFalse：0 None\n1 2 3 4 5 6 7 8 if True: #1 0 False print(\u0026#34;True\u0026#34;) print(\u0026#34;False\u0026#34;)#相同区域要求缩进一致 elif False: print(\u0026#34;2\u0026#34;) else: print(\u0026#34;1\u0026#34;) print(\u0026#34;end\u0026#34;)#按层次执行，和C语言{}作用有关 1 2 3 4 5 6 7 8 9 10 11 score = float(input(\u0026#34;请输入成绩\u0026#34;)) if score \u0026lt; 60 and score \u0026gt;= 0: print(\u0026#34;不及格\u0026#34;) elif score \u0026lt; 80 and score \u0026gt;=60: print(\u0026#34;及格\u0026#34;) elif score == 100 : print(\u0026#34;满分\u0026#34;) elif score \u0026gt; 100: print(\u0026#34;超满分，想上天么？\u0026#34;) else: print(\u0026#34;优秀\u0026#34;) 1 2 3 4 5 6 7 8 9 10 11 12 13 #注意缩进！ sex = int(input(\u0026#34;输入1代表男生，0代表女生：\u0026#34;)) marrage = int(input((\u0026#34;输入1代表单身，0代表有：\u0026#34;))) if sex: if marrage: print(\u0026#34;这位小哥哥，需要我给你介绍女朋友么？\u0026#34;) else: print(\u0026#34;呸，渣男！\u0026#34;) else: if marrage: print(\u0026#34;这位小姐姐，需要我给你介绍女朋友么？\u0026#34;) else: print(\u0026#34;555...世界上的可爱单身小姐姐又少了一个！\u0026#34;) 1 2 3 4 5 import random #引入随机库 x = 1 while x != 2: #这就是while循环，满足条件才执行 x = random.randint(0, 2)#随机0，1，2 print(x) 练习：石头剪刀布 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import random tips = (\u0026#39;剪刀（0）\u0026#39;, \u0026#39;石头（1）\u0026#39;, \u0026#39;布（2）\u0026#39;) user = eval(input(\u0026#34;请输入：剪刀（0），石头（1），布（2）\u0026#34;)) user = int(user) # eval()函数有妙用 # 如果用user = int(input(\u0026#34;请输入：剪刀（0），石头（1），布（2）\u0026#34;)) # 在输入浮点数的情况下会报类型错 # user = random.randint(-1,4) #test sys = random.randint(0, 2) if user \u0026gt; 2 or user \u0026lt; 0: print(\u0026#34;%d?你出了个啥？金箍棒？\u0026#34;%user) exit() print(\u0026#34;你的输入为：%s\\n系统出的是：%s\u0026#34; % (tips[user], tips[sys])) if sys - user: if sys - user == 1 or sys - user == -2: print(\u0026#34;哈哈，你输了\u0026#34;) else: print(\u0026#34;你赢咯！\u0026#34;) else: print(\u0026#34;平局！\u0026#34;) 循环语句 for循环 有两种，一种是for\u0026hellip;in循环\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 for i in range(5): print(i) # 0 # 1 # 2 # 3 # 4 #从零开始，到11结束(不含11)，步进值为3，即每次+3 for i in range(0,11,3): print(i) # 0 # 3 # 6 # 9 #从-10开始，到-100结束(不含)，步进值为-30，即每次-30 for i in range(-10,-100,-30): print(i) # -10 # -40 # -70 a = [\u0026#34;aa\u0026#34;, \u0026#34;bb\u0026#34;, \u0026#34;cc\u0026#34;, \u0026#34;dd\u0026#34;] #列表 for i in range(len(a)): print(i, a[i]) # 0 aa # 1 bb # 2 cc # 3 dd while循环 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 i = 0 while i \u0026lt; 5: print(i) i += 1 # 0 # 1 # 2 # 3 # 4 #1-100求和 n = 33242521 i = 1 # sum = 0 # while i \u0026lt;= n: # sum += i # i += 1 # print(\u0026#34;sum=%d\u0026#34; % sum) sum = n*(n + 1)/2 print(\u0026#34;sum=%d\u0026#34; % sum) while的特殊用法else 1 2 3 4 5 6 count = 0 while count\u0026lt;100: print(\u0026#34;满足\u0026#34;) count += 1 else: print(\u0026#34;bumanzu\u0026#34;) break continue pass语句 break跳出for while循环\ncontinue跳过当前循环，进行下一循环\npass空语句，一般用作占位语句，不做任何事情\n练习：九九乘法表 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 # -*- codeing = utf-8 -*- # @Time : 2020/12/11 21:57 # @Author : 96bearli # @File : 九九乘法表.py # @Software : PyCharm # 效果：https://gitee.com/bearli/tu/raw/master/img/image-20201211215647597.png # for循环 for i in range(9): for j in range(i + 1): print(\u0026#34;%d*%d=%d\u0026#34; % (i + 1, j + 1, (i + 1) * (j + 1)), end=\u0026#34; \u0026#34;)#每一个式子的结尾都是一个空格，发现\\t会自动对齐 print(end=\u0026#34;\\n\u0026#34;)#直到换行 # while循环 i = 1 while i \u0026lt;= 9: j = 1 while j \u0026lt;= i: print(\u0026#34;%d*%d=%d\u0026#34; % (i, j, i * j),end=\u0026#34; \u0026#34;) j+=1 print(\u0026#34;\u0026#34;) i+=1 # # 1*1=1 # 2*1=2 2*2=4 # 3*1=3 3*2=6 3*3=9 # 4*1=4 4*2=8 4*3=12 4*4=16 # 5*1=5 5*2=10 5*3=15 5*4=20 5*5=25 # 6*1=6 6*2=12 6*3=18 6*4=24 6*5=30 6*6=36 # 7*1=7 7*2=14 7*3=21 7*4=28 7*5=35 7*6=42 7*7=49 # 8*1=8 8*2=16 8*3=24 8*4=32 8*5=40 8*6=48 8*7=56 8*8=64 # 9*1=9 9*2=18 9*3=27 9*4=36 9*5=45 9*6=54 9*7=63 9*8=72 9*9=81 # 1*1=1 # 2*1=2 2*2=4 # 3*1=3 3*2=6 3*3=9 # 4*1=4 4*2=8 4*3=12 4*4=16 # 5*1=5 5*2=10 5*3=15 5*4=20 5*5=25 # 6*1=6 6*2=12 6*3=18 6*4=24 6*5=30 6*6=36 # 7*1=7 7*2=14 7*3=21 7*4=28 7*5=35 7*6=42 7*7=49 # 8*1=8 8*2=16 8*3=24 8*4=32 8*5=40 8*6=48 8*7=56 8*8=64 # 9*1=9 9*2=18 9*3=27 9*4=36 9*5=45 9*6=54 9*7=63 9*8=72 9*9=81 # # Process finished with exit code 0 字符串 列表 元组 字典 字符串（string） python里的字符串用单引号、双引号、三引号（三个单/双引号）括起来，反斜杠\\转义特殊字符 默认utf-8编码，所有字符串都是unicode字符串 支持字符串拼接 截取等多种运算 1 2 3 4 5 6 7 8 9 10 11 12 a = \u0026#39;字符串\u0026#39; b = \u0026#34;这是一个句子\u0026#34; c = \u0026#34;\u0026#34;\u0026#34; 可以保存所有格式 这是一个段落 \u0026#34;\u0026#34;\u0026#34; print(a, b, c, sep=\u0026#34;\\n\u0026#34;) nuss = \u0026#34;I\u0026#39;m a boy\u0026#34; nuss = \u0026#39;I\\\u0026#39;m a boy\u0026#39; # 加反斜杠转义 nuss = \u0026#34;Tom said \\\u0026#34;I\u0026#39;m a boy\\\u0026#34;\u0026#34; # 同上 nuss = \u0026#39;Tom said \u0026#34;I\\\u0026#39;m a boy\u0026#34;\u0026#39; # \u0026#34; \u0026#39; 混着用 print(nuss) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 # 字符串 b = \u0026#34;python\u0026#34; b = \u0026#34;这里是繁荣强大的中国\u0026#34; print(b) print(b[0:]) print(b[:5]) print(b[0:3]) #按照下表的方式逐个访问字符[起始位置:结束位置:步进值] print(b[0:3:2]) #像一个for循环 print(b+\u0026#34;aaa\u0026#34;+\u0026#34;sad\u0026#34;) #字符串连接 print(b*3) # 这里是繁荣强大的中国 # 这里是繁荣强大的中国 # 这里是繁荣 # 这里是 # 这是 # 这里是繁荣强大的中国aaasad # 这里是繁荣强大的中国这里是繁荣强大的中国这里是繁荣强大的中国 # # Process finished with exit code 0 print(\u0026#34;hello \\n python\u0026#34;) print(r\u0026#34;hello \\n python\u0026#34;)#字符串之前加r表示直接显示原始字符串不进行转义 # hello # python # hello \\n python 列表 在[]中间，逗号隔开比如list[“hello”,1] 类型混合，比如整型字符串 下标0开始，-1为末尾位置 +拼接，*重复 1 2 3 4 5 6 list = [] # 定义一个空列表 list_name = [\u0026#34;小明\u0026#34;, \u0026#34;小芳\u0026#34;, \u0026#34;小狗\u0026#34;] list_name = [233, \u0026#34;小芳\u0026#34;, \u0026#34;小狗\u0026#34;] # print(type(list_name[0]))#\u0026lt;class \u0026#39;int\u0026#39;\u0026gt; # print(list_name[1]) # print(list_name[2]) 1 2 3 4 5 6 7 8 9 #遍历的for和while for name in list_name: print(name) count=len(list_name) i=0 while i\u0026lt;count: print(list_name[i]) i+=1 常用操作 增 1 2 3 4 5 6 7 8 9 10 #append()在列表末尾追加一个元素 namelist = [\u0026#34;小明\u0026#34;, \u0026#34;小芳\u0026#34;, \u0026#34;小狗\u0026#34;] # print(\u0026#34;当前列表为%s\u0026#34; % namelist) # # 当前列表为[\u0026#39;小明\u0026#39;, \u0026#39;小芳\u0026#39;, \u0026#39;小狗\u0026#39;] for name in namelist: print(name) nameadd = input(\u0026#34;请输入要增加的姓名：\u0026#34;) namelist.append(nameadd)#在列表末尾追加一个元素 for name in namelist: print(name) 1 2 3 4 5 6 7 8 9 # extend()把b列表中的每一个元素逐一添加到a a = [1,2] b = [3.4] a.append(b)#把b列表当作一个元素一起添加到a print(a) a.extend(b)#把b列表中的每一个元素逐一添加到a print(a) # [1, 2, [3.4]] # [1, 2, [3.4], 3.4] 1 2 3 4 5 6 7 # insert()指定下标位置插入元素 a = [\u0026#34;赵\u0026#34;, \u0026#34;钱\u0026#34;, \u0026#34;李\u0026#34;] print(a) # a.insert(2, \u0026#34;孙\u0026#34;) # (下标,元素) # print(a) # [\u0026#39;赵\u0026#39;, \u0026#39;钱\u0026#39;, \u0026#39;李\u0026#39;] # [\u0026#39;赵\u0026#39;, \u0026#39;钱\u0026#39;, \u0026#39;孙\u0026#39;, \u0026#39;李\u0026#39;] 删 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # 删除 # del删除指定下标位置元素 # pop弹出末尾最后一个元素 # remove直接删除指定内容的元素(找到的第一个) movieName = [\u0026#34;加勒比\u0026#34;,\u0026#34;指环王\u0026#34;, \u0026#34;泰坦尼克\u0026#34;, \u0026#34;速度激情\u0026#34;, \u0026#34;指环王\u0026#34;, \u0026#34;黑客帝国\u0026#34;] print(\u0026#34;电影名原始list数据为:%s\u0026#34; % movieName) del movieName[2] # 删除指定位置元素 print(\u0026#34;删除movieName[2]后:%s\u0026#34; % movieName) movieName.pop() print(\u0026#34;弹出m*Name.pop()后:%s\u0026#34; % movieName) movieName.remove(\u0026#34;指环王\u0026#34;) print(\u0026#34;移除指定元素指环王后:%s\u0026#34; % movieName) # 电影名原始list数据为:[\u0026#39;加勒比\u0026#39;, \u0026#39;指环王\u0026#39;, \u0026#39;泰坦尼克\u0026#39;, \u0026#39;速度激情\u0026#39;, \u0026#39;指环王\u0026#39;, \u0026#39;黑客帝国\u0026#39;] # 删除movieName[2]后:[\u0026#39;加勒比\u0026#39;, \u0026#39;指环王\u0026#39;, \u0026#39;速度激情\u0026#39;, \u0026#39;指环王\u0026#39;, \u0026#39;黑客帝国\u0026#39;] # 弹出m*Name.pop()后:[\u0026#39;加勒比\u0026#39;, \u0026#39;指环王\u0026#39;, \u0026#39;速度激情\u0026#39;, \u0026#39;指环王\u0026#39;] # 移除指定元素指环王后:[\u0026#39;加勒比\u0026#39;, \u0026#39;速度激情\u0026#39;, \u0026#39;指环王\u0026#39;] 改 1 2 3 4 5 6 7 # 改指定下标改 movieName = [\u0026#34;加勒比\u0026#34;, \u0026#34;指环王\u0026#34;, \u0026#34;泰坦尼克\u0026#34;, \u0026#34;速度激情\u0026#34;, \u0026#34;指环王\u0026#34;, \u0026#34;黑客帝国\u0026#34;] print(movieName) movieName[1] = \u0026#34;雷神\u0026#34; print(movieName) # [\u0026#39;加勒比\u0026#39;, \u0026#39;指环王\u0026#39;, \u0026#39;泰坦尼克\u0026#39;, \u0026#39;速度激情\u0026#39;, \u0026#39;指环王\u0026#39;, \u0026#39;黑客帝国\u0026#39;] # [\u0026#39;加勒比\u0026#39;, \u0026#39;雷神\u0026#39;, \u0026#39;泰坦尼克\u0026#39;, \u0026#39;速度激情\u0026#39;, \u0026#39;指环王\u0026#39;, \u0026#39;黑客帝国\u0026#39;] 查 1 2 3 4 5 6 7 # 查：[in,not in] movieName = [\u0026#34;加勒比\u0026#34;, \u0026#34;指环王\u0026#34;, \u0026#34;泰坦尼克\u0026#34;, \u0026#34;速度激情\u0026#34;, \u0026#34;指环王\u0026#34;, \u0026#34;黑客帝国\u0026#34;] findName = input(\u0026#34;你要找的电影是？\u0026#34;) if findName in movieName: print(\u0026#34;正在放映中\u0026#34;) else: print(\u0026#34;即将上映！\u0026#34;) 其他 1 2 3 4 5 6 7 8 9 # 其他常用函数 # .index() 查找指定下标范围元素，并返回对应数据下标 # 范围区间左闭右开，到3不含三（python中ing常常左闭右开） # 找不到会报错 movieName = [\u0026#34;加勒比\u0026#34;, \u0026#34;指环王\u0026#34;, \u0026#34;泰坦尼克\u0026#34;, \u0026#34;速度激情\u0026#34;, \u0026#34;指环王\u0026#34;, \u0026#34;黑客帝国\u0026#34;] print(movieName.index(\u0026#34;泰坦尼克\u0026#34;, 0, 3)) print(movieName.index(\u0026#34;泰坦尼克\u0026#34;)) print(movieName.index(\u0026#34;泰坦尼克\u0026#34;, 0, 2)) # 2 1 2 3 4 # list.count(\u0026#34; \u0026#34;)统计某元素出现次数 movieName = [\u0026#34;加勒比\u0026#34;, \u0026#34;指环王\u0026#34;, \u0026#34;泰坦尼克\u0026#34;, \u0026#34;速度激情\u0026#34;, \u0026#34;指环王\u0026#34;, \u0026#34;黑客帝国\u0026#34;] print(movieName.count(\u0026#34;指环王\u0026#34;)) # 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # 反转，升序，降序 list1 = [1, 5, 2, 4, 3] print(\u0026#34;原来：%s list1\u0026#34; % list1) # .reverse() 反转 list1.reverse() print(\u0026#34;反转：%s list1.reverse()\u0026#34; % list1) # .sort() 排序 默认升序 list1.sort() print(\u0026#34;升序：%s list1.sort()\u0026#34; % list1) list1.sort(reverse=True) print(\u0026#34;降序：%s list1.sort(reverse=True)\u0026#34; % list1) # 原来：[1, 5, 2, 4, 3] list1 # 反转：[3, 4, 2, 5, 1] list1.reverse() # 升序：[1, 2, 3, 4, 5] list1.sort() # 降序：[5, 4, 3, 2, 1] list1.sort(reverse=True) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 # 嵌套 sss = [[\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#34;c\u0026#34;], [1, 2, 3], []] print(sss[0][1]) # 类似二维数组 for i in sss[0]: print(i, end=\u0026#34; \u0026#34;) sss[1].sort(reverse=1) print(\u0026#34;\\n%s\u0026#34; % sss) sss[2].append(\u0026#34;sad\u0026#34;) sss[2].append(\u0026#34;happy\u0026#34;) print(sss) for i in sss: print(i) if \u0026#34;happy\u0026#34; in i: print(\u0026#34;happy存在，位置在二维列表sss[%d][%d]\u0026#34; % (sss.index(i), i.index(\u0026#34;happy\u0026#34;))) \u0026#39;\u0026#39;\u0026#39; b a b c [[\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;], [3, 2, 1], []] [[\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;], [3, 2, 1], [\u0026#39;sad\u0026#39;, \u0026#39;happy\u0026#39;]] [\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;] [3, 2, 1] [\u0026#39;sad\u0026#39;, \u0026#39;happy\u0026#39;] happy存在，位置在二维列表sss[2][1] \u0026#39;\u0026#39;\u0026#39; 二维列表的小题 八个老师随机分配到三个办公室\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 # 八个老师随机分配到三个办公室 import random # 引入random offices = [[], [], []] names = [\u0026#34;A\u0026#34;, \u0026#39;B\u0026#39;, \u0026#39;C\u0026#39;, \u0026#39;D\u0026#39;, \u0026#39;E\u0026#39;, \u0026#39;F\u0026#39;, \u0026#39;G\u0026#39;, \u0026#39;H\u0026#39;] for i in names: index = random.randint(0, 2) offices[index].append(i) # 随机办公室添加下一个名字 print(offices) for office in offices: if len(office) == 0: print(\u0026#34;第%d个办公室没分到人\u0026#34; % (offices.index(office) + 1)) print(\u0026#34;--\u0026#34; * 10) continue print(\u0026#34;第%d个办公室的人数为%d,名字分别是：\u0026#34; % (offices.index(office) + 1, len(office)), end=\u0026#34;\u0026#34;) for name in office: print(name, end=\u0026#34; \u0026#34;) print(\u0026#34;\u0026#34;) # 起到换行的作用 print(\u0026#34;--\u0026#34; * 10) \u0026#39;\u0026#39;\u0026#39; [[\u0026#39;D\u0026#39;, \u0026#39;E\u0026#39;], [\u0026#39;A\u0026#39;, \u0026#39;B\u0026#39;, \u0026#39;C\u0026#39;, \u0026#39;F\u0026#39;, \u0026#39;G\u0026#39;, \u0026#39;H\u0026#39;], []] 第1个办公室的人数为2,名字分别是：D E -------------------- 第2个办公室的人数为6,名字分别是：A B C F G H -------------------- 第3个办公室没分到人 -------------------- \u0026#39;\u0026#39;\u0026#39; 列表作业：你到底买不买？ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 # -*- codeing = utf-8 -*- # @Time : 2020/12/31 17:59 # @Author : 96bearli # @File : 作业：你买不买？.py # @Software : PyCharm import time products = [[\u0026#39;iphone\u0026#39;, 6888], [\u0026#34;MacPro\u0026#34;, 14800], [\u0026#34;小米6\u0026#34;, 2499], [\u0026#39;Coffee\u0026#39;, 31], [\u0026#39;Book\u0026#39;, 60], [\u0026#39;Nike\u0026#39;, 699]] shopping_cart = [] numbers = [] choose_list = [\u0026#39;0\u0026#39;, \u0026#39;1\u0026#39;, \u0026#39;2\u0026#39;, \u0026#39;3\u0026#39;, \u0026#39;4\u0026#39;, \u0026#39;5\u0026#39;, \u0026#39;q\u0026#39;] price = 0 print(\u0026#34;下面是商品列表，爱买买，不买滚！\u0026#34;) while True: print(\u0026#34;-\u0026#34; * 6 + \u0026#39;商品列表\u0026#39; + \u0026#39;-\u0026#39; * 6) for product in products: print(\u0026#34;%d\\t%s\\t%s\u0026#34; % (products.index(product), product[0], product[1])) choose = input(\u0026#34;你还买不买啦？输入序号啊！不买按q滚球\u0026#34;) if choose not in choose_list: print(\u0026#34;本次输入无效，赫呸，浪费我时间！\u0026#34;) time.sleep(1) continue if choose == \u0026#39;q\u0026#39;: print(\u0026#34;穷逼\u0026#34;) time.sleep(1) break; choose = int(eval(choose)) if products[choose] in shopping_cart: numbers[shopping_cart.index(products[choose])] += 1 else: numbers.append(1) shopping_cart.append(products[choose]) price += products[int(choose)][1] print(\u0026#34;-\u0026#34; * 6 + \u0026#39;确认订单\u0026#39; + \u0026#39;-\u0026#39; * 6) print(\u0026#34;好了，下面是你的购物清单：\\n\u0026#34;) i = 1 print(\u0026#34;序号\u0026#34;+\u0026#34; 商品\u0026#34;+\u0026#34; 单价X数量\u0026#34;) for shopping_thing in shopping_cart: print(\u0026#34;%d\\t%s\\t%s X %d\u0026#34; % (i, shopping_thing[0], shopping_thing[1], numbers[shopping_cart.index(shopping_thing)])) i += 1 print(\u0026#34;\\t\\t总价格为:%d\\n\\n我知道你买不起，快滚吧\u0026#34; % price) \u0026#39;\u0026#39;\u0026#39; ------确认订单------ 好了，下面是你的购物清单： 序号 商品 单价X数量 1 MacPro 14800 X 3 2 小米6 2499 X 5 3 Coffee 31 X 3 4 iphone 6888 X 1 5 Book 60 X 2 6 Nike 699 X 1 总价格为:64695 我知道你买不起，快滚吧 \u0026#39;\u0026#39;\u0026#39; 元组 python的核心数据类型\ntuple(元组) tuple(元组)和list类似，不同之处在于tuple的元素不可变，小括号，\n元素逗号隔开\n小括号括起来\n元素不可变，但是可以包含可变对象，如list\n注意：定义只有一个元素的tuple，必须加逗号\nq:为什么？r:一个括号那是表达式\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 # 为什么一个元素要加逗号 tup1 = () tup2 = (1) # 这是表达式。。。 tup3 = (1,) print(type(tup1),type(tup2),type(tup3)) \u0026#39;\u0026#39;\u0026#39; \u0026#39;\u0026#39;\u0026#39; # 元素不可变 t1 = (\u0026#34;s\u0026#34;,) t2 = (\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, [\u0026#39;A\u0026#39;, \u0026#39;B\u0026#39;]) # \u0026#39;a\u0026#39;不可变，[\u0026#39;A\u0026#39;,\u0026#39;B\u0026#39;]内元素可变 print(t2) t2[2][0] = \u0026#39;X\u0026#39; print(t2) t2[2][1] = [1, 2, 3] print(t2) \u0026#39;\u0026#39;\u0026#39; (\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, [\u0026#39;A\u0026#39;, \u0026#39;B\u0026#39;]) (\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, [\u0026#39;X\u0026#39;, \u0026#39;B\u0026#39;]) (\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, [\u0026#39;X\u0026#39;, [1, 2, 3]]) \u0026#39;\u0026#39;\u0026#39; #下标访问和切片 tup1 = (\u0026#34;aaa\u0026#34;, \u0026#34;bbb\u0026#34;, 2020, 2021) print(tup1[0]) print(tup1[-1]) print(tup1[1:5]) # 含1不含5，左闭右开的切片 \u0026#39;\u0026#39;\u0026#39; aaa 2021 (\u0026#39;bbb\u0026#39;, 2020, 2021) \u0026#39;\u0026#39;\u0026#39; 操作 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 # 增 tup1 = (\u0026#34;aaa\u0026#34;, \u0026#34;bbb\u0026#34;) tup2 = (2020, 2021) tup = tup1 + tup2 # 实际上是两个元组通过连接组合形成新的元组 print(tup) \u0026#39;\u0026#39;\u0026#39; (\u0026#39;aaa\u0026#39;, \u0026#39;bbb\u0026#39;, 2020, 2021) \u0026#39;\u0026#39;\u0026#39; # 删 tup1 = (\u0026#34;aaa\u0026#34;, \u0026#34;bbb\u0026#34;) print(tup1) del tup1 print(tup1) # 删除单个元素不被许可，只能删除整个元组 \u0026#39;\u0026#39;\u0026#39; (\u0026#39;aaa\u0026#39;, \u0026#39;bbb\u0026#39;) error:tup1 not define \u0026#39;\u0026#39;\u0026#39; # 改 # 除了改元组里的列表list里的元素，其他的改不了 # 查 tup1 = (\u0026#34;aaa\u0026#34;, \u0026#34;bbb\u0026#34;) tup2 = (2020, 2021) tup = tup1 + tup2 # if x in x: if tup1 in tup: # 这句话的定义其实是在(\u0026#34;aaa\u0026#34;, \u0026#34;bbb\u0026#34;，2020, 2021)中寻找(\u0026#34;aaa\u0026#34;,\u0026#34;bbb\u0026#34;) print(\u0026#39;tup1 exist in tup\u0026#39;) # 即((\u0026#34;aaa\u0026#34;,\u0026#34;bbb\u0026#34;), \u0026#34;bbb\u0026#34;，2020, 2021)才能查找成功 if tup2 in tup: print(\u0026#39;tup2 exist in tup\u0026#39;) if \u0026#39;aaa\u0026#39; in tup: print(\u0026#39;\\\u0026#39;aaa\\\u0026#39; exist in tup\u0026#39;) if 2020 in tup: print(\u0026#39;2020 exist in tup\u0026#39;) \u0026#39;\u0026#39;\u0026#39; \u0026#39;aaa\u0026#39; exist in tup 2020 exist in tup \u0026#39;\u0026#39;\u0026#39; # .count print(\u0026#34;2020数量为：\u0026#34;, tup1.count(2020)) # 想用\u0026#34;\u0026#34;+tup1.count(2020)的形式报错 # len() print(\u0026#34;元组长度为：\u0026#34;, len(tup)) # max() min() print(\u0026#34;元组中最大值为：\u0026#34;, max(tup2), \u0026#34;元组中最小值为：\u0026#34;, min(tup2)) # 其他类型转元组 list1 = [1, 2, 3, 4, 5] print(list1) print(tuple(list1)) \u0026#39;\u0026#39;\u0026#39; 2020数量为： 0 元组长度为： 4 元组中最大值为： 2021 元组中最小值为： 2020 [1, 2, 3, 4, 5] (1, 2, 3, 4, 5) \u0026#39;\u0026#39;\u0026#39; 字典 python的核心数据类型\ndict(字典) 字典是无序的对象集合，使用键-值(key-value)存储，具有极快的查找速度\n键(key)必须使用不可变类型\n同一字典中键(key)必须唯一\n为了查一个键快速找到它的值\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # 字典的定义 info = {\u0026#34;name\u0026#34;: \u0026#34;luck\u0026#34;, \u0026#34;age\u0026#34;: 18} # dict的访问 print(info[\u0026#34;name\u0026#34;]) print(info[\u0026#34;age\u0026#34;]) # 访问不存在的键 # print(info[\u0026#34;age1\u0026#34;]) # 为了直接访问避免报错，提供一个默认值 print(info.get(\u0026#34;age1\u0026#34;)) # 使用get方法，没有找到对应的键，默认返回None print(info.get(\u0026#34;age1\u0026#34;, \u0026#34;sss\u0026#34;)) # 修改默认值为sss \u0026#39;\u0026#39;\u0026#39; luck 18 None sss \u0026#39;\u0026#39;\u0026#39; 增删改查 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 # 增 info = {\u0026#34;name\u0026#34;: \u0026#34;luck\u0026#34;, \u0026#34;age\u0026#34;: 18} newid = input(\u0026#34;输入学号\u0026#34;) info[\u0026#34;id\u0026#34;] = newid # print(info.get(\u0026#34;id\u0026#34;, \u0026#39;增加失败\u0026#39;)) print(info) \u0026#39;\u0026#39;\u0026#39; 输入学号12 12 {\u0026#39;name\u0026#39;: \u0026#39;luck\u0026#39;, \u0026#39;age\u0026#39;: 18, \u0026#39;id\u0026#39;: \u0026#39;12\u0026#39;} \u0026#39;\u0026#39;\u0026#39; # 删 # del clear # [del] info = {\u0026#34;name\u0026#34;: \u0026#34;luck\u0026#34;, \u0026#34;age\u0026#34;: 18} print(\u0026#34;删除前：%s\u0026#34; % info[\u0026#34;name\u0026#34;]) del info[\u0026#34;name\u0026#34;] # 删除整个键值对 print(\u0026#34;删除后：%s\u0026#34; % info.get(\u0026#34;name\u0026#34;, \u0026#34;未找到\u0026#34;)) \u0026#39;\u0026#39;\u0026#39; 删除前：luck 删除后：未找到 \u0026#39;\u0026#39;\u0026#39; info = {\u0026#34;name\u0026#34;: \u0026#34;luck\u0026#34;, \u0026#34;age\u0026#34;: 18} print(\u0026#34;删除前：%s\u0026#34; % info) del info #删除整个字典 print(\u0026#34;删除后：%s\u0026#34; % info) \u0026#39;\u0026#39;\u0026#39; 删除前：{\u0026#39;name\u0026#39;: \u0026#39;luck\u0026#39;, \u0026#39;age\u0026#39;: 18} error \u0026#39;\u0026#39;\u0026#39; # [clear] 清空 info = {\u0026#34;name\u0026#34;: \u0026#34;luck\u0026#34;, \u0026#34;age\u0026#34;: 18} print(\u0026#34;删除前：%s\u0026#34; % info) info.clear() # 感觉和重新定义info={}效果一样 print(\u0026#34;删除后：%s\u0026#34; % info) \u0026#39;\u0026#39;\u0026#39; 删除前：{\u0026#39;name\u0026#39;: \u0026#39;luck\u0026#39;, \u0026#39;age\u0026#39;: 18} 删除后：{} \u0026#39;\u0026#39;\u0026#39; # 改 info = {\u0026#34;name\u0026#34;: \u0026#34;luck\u0026#34;, \u0026#34;age\u0026#34;: 18} print(info) info[\u0026#34;age\u0026#34;]=19 print(info) \u0026#39;\u0026#39;\u0026#39; {\u0026#39;name\u0026#39;: \u0026#39;luck\u0026#39;, \u0026#39;age\u0026#39;: 18} {\u0026#39;name\u0026#39;: \u0026#39;luck\u0026#39;, \u0026#39;age\u0026#39;: 19} \u0026#39;\u0026#39;\u0026#39; # 查 # 键的查询和值的查询 info = {\u0026#34;name\u0026#34;: \u0026#34;luck\u0026#34;, \u0026#34;age\u0026#34;: 18} # 得到所有的键 .keys() print(info.keys()) print(type(info.keys())) # 列表的形式 print(list(info.keys())) # 转化为列表 keys=list(info.keys()) for key in keys: print(key) \u0026#34;\u0026#34;\u0026#34; dict_keys([\u0026#39;name\u0026#39;, \u0026#39;age\u0026#39;]) \u0026lt;class \u0026#39;dict_keys\u0026#39;\u0026gt; [\u0026#39;name\u0026#39;, \u0026#39;age\u0026#39;] name age \u0026#34;\u0026#34;\u0026#34; # 得到所有的值 .values() print(info.values()) # 列表 # 得到所有的项 .items() print(info.items()) # 可以作为元组 # 遍历 for key in info.keys(): print(key,end=\u0026#39;\\t\u0026#39;) print(\u0026#34;\u0026#34;) for value in info.values(): print(value,end=\u0026#39;\\t\u0026#39;) \u0026#39;\u0026#39;\u0026#39; name age luck 18 \u0026#39;\u0026#39;\u0026#39; # 遍历键值对 print(info.items()) for key, value in info.items(): # for循环两个值 # print(key, value, sep=\u0026#34;\\t\u0026#34;, end=\u0026#39;\\n\u0026#39;) print(\u0026#34;%4s:%4s\u0026#34;%(key, value)) \u0026#39;\u0026#39;\u0026#39; dict_items([(\u0026#39;name\u0026#39;, \u0026#39;luck\u0026#39;), (\u0026#39;age\u0026#39;, 18)]) name:luck age: 18 \u0026#39;\u0026#39;\u0026#39; Products = {\u0026#39;iphone\u0026#39;: 6888, \u0026#34;MacPro\u0026#34;: 14800, \u0026#34;小米6\u0026#34;: 2499, \u0026#39;Coffee\u0026#39;: 31, \u0026#39;Book\u0026#39;: 60, \u0026#39;Nike\u0026#39;: 699} TheNumber = 0 for i, x in Products.items(): print(\u0026#34;%d\\t%s\\t%s\u0026#34; % (TheNumber, i, x)) TheNumber += 1 print(list(enumerate(Products))) \u0026#39;\u0026#39;\u0026#39; 0 iphone 6888 1 MacPro 14800 2 小米6 2499 3 Coffee 31 4 Book 60 5 Nike 699 [(0, \u0026#39;iphone\u0026#39;), (1, \u0026#39;MacPro\u0026#39;), (2, \u0026#39;小米6\u0026#39;), (3, \u0026#39;Coffee\u0026#39;), (4, \u0026#39;Book\u0026#39;), (5, \u0026#39;Nike\u0026#39;)] Process finished with exit code 0 \u0026#39;\u0026#39;\u0026#39; dict操作和其他的一些操作汇总 集合 set(集合) 类似dict,不储存value,是一组key的集合,用大括号括起来,因为key不能重复,所以set中的元素也不会重复 set是无序的,重复元素再setzhongbeizidongguolv 常用来去重,再转化为需要类型 1 2 3 4 5 6 7 8 9 10 11 12 # set的定义类似于强制类型转化 listOne = [1, 2, 3, 4, \u0026#39;a\u0026#39;, 1, 2] set1One = set(listOne) print(set1One) # 输出体现了去重的特性 \u0026#39;\u0026#39;\u0026#39; {1, 2, 3, 4, \u0026#39;a\u0026#39;} \u0026#39;\u0026#39;\u0026#39; listTwo = list(set1One) print(listTwo) # 得到了去重后的listOne \u0026#39;\u0026#39;\u0026#39; [1, 2, 3, 4, \u0026#39;a\u0026#39;] \u0026#39;\u0026#39;\u0026#39; 常用操作 小结 类型 是否有序 是否可变类型 列表list [] 有序 可变 元组tuple () 有序 不可变 字典dict {} 无序 key不可变不可重,value可变 集合set {} 无序 可变不可重 函数 函数的概念 代码集合成块方便被多次调用\n函数的定义 1 2 3 4 5 6 7 8 # 函数的定义,放在使用前,import以下 def printinfo(): print(\u0026#34;--\u0026#34; * 10) print(\u0026#34; 现在是过去最好的结果\u0026#34;) print(\u0026#34;--\u0026#34; * 10) # 函数的调用 printinfo() 常用技巧 1 2 3 4 5 6 7 8 # 带参数的和带返回值的 def add2Num(a, b): return a+b print(add2Num(11, 22)) \u0026#39;\u0026#39;\u0026#39; 33 \u0026#39;\u0026#39;\u0026#39; 习题 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 # 函数-课堂练习 # 1.打印一条横线 # 2.通过参数打印自定义行数的横线 # 3.写一个函数求三个数之和 # 4.写一个函数求三个数的平均值 # 1.2. def line(): print(\u0026#34;-\u0026#34; * 20) def nxLine(n): for i in range(int(n)): # 如果不进行整型处理,返回n为str的错误 line() print(\u0026#34;横线打印完成,总共%d行\u0026#34;%(i+1)) num = input(\u0026#34;请输入要打印横线的行数:\u0026#34;) nxLine(num) \u0026#39;\u0026#39;\u0026#39; 请输入要打印横线的行数:3 -------------------- -------------------- -------------------- 横线打印完成,总共3行 Process finished with exit code 0 \u0026#39;\u0026#39;\u0026#39; # 3.4. def threeNumSum(a, b, c): return a + b + c def threeNumAverage(a, b, c): return threeNumSum(a, b, c) / 3 a, b, c = map(float, input(\u0026#34;请输入3个数字,空格分隔\u0026#34;).split()) print(\u0026#34;三数之和为%.2f,均值为%.2f\u0026#34; % (threeNumSum(a, b, c), threeNumAverage(a, b, c))) \u0026#39;\u0026#39;\u0026#39; 请输入3个数字,空格分隔1.45 1.22 54.22 三数之和为56,均值为18.96 \u0026#39;\u0026#39;\u0026#39; # 两个知识点 # 1.%f浮点型,%5.2f意思是共5个位置,小数点后保留2位 # 2.map(float, input(\u0026#34;请输入3个数字,空格分隔\u0026#34;).split()) # 由于input( )输出的是用空格分开的字符串 # split( )会分割开各个值并放到列表中，此时在列表中的值是字符串 # 如果要用于运算必须在map( )中利用int( )或者float( )等处理 # 再赋值。如果需要赋值的值都是字符串的话就没必要用map函数了。 # input(\u0026#39;输入a,b空格隔开:\u0026#39;).split()即可 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 # 全局变量和局部变量 def test1(): a= 100 print(a) a = 200 print(a) a = 1 # 全局变量和局部变量名字相同,优先使用局部 test1() print(a) \u0026#39;\u0026#39;\u0026#39; 100 200 1 \u0026#39;\u0026#39;\u0026#39; # 一般情况下函数内部不能修改全局变量 a = 111 def test2(): print(a) # a = 200 #发现函数内部不能修改全局变量,同时使用会报错 print(a) a = 11 test2() print(a) \u0026#39;\u0026#39;\u0026#39; 11 11 11 \u0026#39;\u0026#39;\u0026#39; # global def test2(): global a # global声明使用全局变量 print(a) a = 200 print(a) a = 11 test2() print(a) # 可以看到这里的a已经在函数中被修改 \u0026#39;\u0026#39;\u0026#39; 11 200 200 \u0026#39;\u0026#39;\u0026#39; 文件操作 储存数据\n访问模式 type info r 以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。 w 打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。 a 打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。 rb 以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。 wb 以二进制格式打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。 ab 以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。 r+ 打开一个文件用于读写。文件指针将会放在文件的开头。 w+ 打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。 a+ 打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。 rb+ 以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。 wb+ 以二进制格式打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。 ab+ 以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。 文件的打开关闭写入读取 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 # 文件的打开与关闭 # mm = \u0026#34;test.txt\u0026#34; # f = open(mm, \u0026#34;a\u0026#34;) # 在当前路径下，写入模式w可以自动新建 # f.write(\u0026#34;\\ntest\u0026#34;) # f.close() # 关闭 # 文件的读 # ss = open(\u0026#34;test.txt\u0026#34;, \u0026#34;r\u0026#34;) # print(ss.read(2)) # 空格也算一个字符 # print(ss.read(2)) # 指针也在不断后移 # ss.close() \u0026#39;\u0026#39;\u0026#39; t es \u0026#39;\u0026#39;\u0026#39; f = open(\u0026#34;test.txt\u0026#34;, \u0026#34;r\u0026#34;) text1 = f.readlines() # 一次性读取全部信息作为列表,一行一元素 i = 1 for text in text1: print(\u0026#34;line\u0026#34;, i, \u0026#39;:\u0026#39;, text, sep=\u0026#34;\u0026#34;, end=\u0026#34;\u0026#34;) i += 1 f.close() \u0026#39;\u0026#39;\u0026#39; line1:testtesttest line2:test line3:test line4:test line5:test line6:test line7:test Process finished with exit code 0 \u0026#39;\u0026#39;\u0026#39; f = open(\u0026#34;test.txt\u0026#34;, \u0026#34;r\u0026#34;) text1 = f.readline() # 一次读一行,每次指针下移一行,参数限制每次字符个数 print(text1) text1 = f.readline() print(text1) f.close() \u0026#34;\u0026#34;\u0026#34; test--1 test--2 \u0026#34;\u0026#34;\u0026#34; 文件的相关操作 os模块 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # os模块:重命名.删除等 import os # 重命名 os.rename(\u0026#34;test.txt\u0026#34;, \u0026#34;尝试.txt\u0026#34;) # 删除 os.remove(\u0026#34;尝试.txt\u0026#34;) # 创建文件夹 os.mkdir(\u0026#34;cache\u0026#34;) # 获取当前路径 os.getcwd() # 改变默认目录 os.chdir(\u0026#34;../\u0026#34;) # 应该是指上一层 # 获取目录列表 os.listdir(\u0026#39;./\u0026#39;) # 指当前目录 # 删除文件夹 os.rmdir(\u0026#34;cache\u0026#34;) 错误和异常 处理可以预料到的错误,避免一处可以避免的错误造成程序崩溃(终止)\n演示 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 # 错误和异常 print(\u0026#34;--------1---\u0026#34;) # mark f = open(\u0026#34;123.txt\u0026#34;,\u0026#34;r\u0026#34;) print(\u0026#34;--------2---\u0026#34;) \u0026#39;\u0026#39;\u0026#39; --------1--- Traceback (most recent call last): File \u0026#34;C:/Users/Administrator/OneDrive/doc/code/python/demo/12.错误和异常.py\u0026#34;, line 9, in \u0026lt;module\u0026gt; f = open(\u0026#34;123.txt\u0026#34;\u0026#34;r\u0026#34;) FileNotFoundError: [Errno 2] No such file or directory: \u0026#39;123.txtr\u0026#39; Process finished with exit code 1 \u0026#39;\u0026#39;\u0026#39; # 捕获异常 try: print(\u0026#34;--------1---\u0026#34;) # mark f = open(\u0026#34;123.txt\u0026#34;,\u0026#34;r\u0026#34;) print(\u0026#34;--------2---\u0026#34;) except IOError: # 文件未找到属于输入输出异常，即IO异常 pass \u0026#39;\u0026#39;\u0026#39; --------1--- \u0026#39;\u0026#39;\u0026#39; # 异常类型 try: print(num) # mark except NameError: # 必须要对应的异常才能捕获到,这里如果是IOError依然会报错 print(\u0026#34;num未定义\u0026#34;) \u0026#39;\u0026#39;\u0026#39; num未定义 \u0026#39;\u0026#39;\u0026#39; # 把可能产生的所有异常类型都放在小括号中 try: print(\u0026#34;--------1---\u0026#34;) # mark f = open(\u0026#34;123.txt\u0026#34;,\u0026#34;r\u0026#34;) # 由输出可以看到运行到这里已经停止了 print(\u0026#34;--------2---\u0026#34;) print(num) except (IOError, NameError): # 这个小括号 print(\u0026#34;error\u0026#34;) \u0026#34;\u0026#34;\u0026#34; --------1--- error \u0026#34;\u0026#34;\u0026#34; # 到底是哪种错误？获取错误信息描述 try: print(\u0026#34;--------1---\u0026#34;) f = open(\u0026#34;123.txt\u0026#34;,\u0026#34;r\u0026#34;) print(\u0026#34;--------2---\u0026#34;) print(num) except (IOError, NameError) as result: # as 自定义变量名 储存错误信息 print(\u0026#34;error\u0026#34;) print(result) \u0026#39;\u0026#39;\u0026#39; error [Errno 2] No such file or directory: \u0026#39;123.txt\u0026#39; \u0026#39;\u0026#39;\u0026#39; # personal test def openfile(): print(\u0026#34;--------1---\u0026#34;) f = open(\u0026#34;123.txt\u0026#34;, \u0026#34;r\u0026#34;) print(f.readline()) print(\u0026#34;--------2---\u0026#34;) f.close() try: openfile() except Exception as result: print(result) f = open(\u0026#34;123.txt\u0026#34;, \u0026#34;w\u0026#34;) f.write(\u0026#34;异常已修复\u0026#34;) # 发现输入中文会出现编码错误，应该输入英文或者改变编码utf-8 f.close() openfile() \u0026#39;\u0026#39;\u0026#39; 两次运行 1：报错并修复 --------1--- [Errno 2] No such file or directory: \u0026#39;123.txt\u0026#39; --------1--- 异常已修复 --------2--- 2：运行成功 --------1--- 异常已修复 --------2--- \u0026#39;\u0026#39;\u0026#39; # try except的嵌套和finally的使用 import time try: f = open(\u0026#34;test.txt\u0026#34;, \u0026#34;r\u0026#34;) try: while True: lineContent = f.readline() if len(lineContent) == 0: break print(lineContent, end=\u0026#34;\u0026#34;) time.sleep(0.3) finally: f.close() print(\u0026#34;\\n文件关闭\u0026#34;) except Exception as result: print(result) \u0026#39;\u0026#39;\u0026#39; # 存在.txt test--1 test--2 test--3 test--4 test--5 test--6 test--7 文件关闭 # 不存在.txt [Errno 2] No such file or directory: \u0026#39;test111.txt\u0026#39; \u0026#39;\u0026#39;\u0026#39; 作业:写的诗抄的快 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 \u0026#39;\u0026#39;\u0026#39; 作业内容 1.第一个函数 写入一首诗(我就不写诗)到guyu.txt 2.另一个函数的作用是读取guyu.txt,并写入copy.txt,控制台输出\u0026#34;复制完毕\u0026#34; \u0026#39;\u0026#39;\u0026#39; def guYuTxt(): print(\u0026#34;开始写入古诗\u0026#34;) try: f = open(\u0026#34;guyu.txt\u0026#34;, \u0026#34;r\u0026#34;) f.close() choise = input(\u0026#34;当前目录已存在guyu.txt,是否覆盖?Y/n\u0026#34;) if choise == \u0026#34;Y\u0026#34; or choise == \u0026#34;y\u0026#34;: # 出现错误:if choise == \u0026#34;Y\u0026#34; or \u0026#34;y\u0026#34; f = open(\u0026#34;guyu.txt\u0026#34;, \u0026#34;w\u0026#34;, encoding=\u0026#39;utf-8\u0026#39;) # 要注意,不改变编码方式中文乱码 else: print(\u0026#34;程序退出\u0026#34;) exit() except Exception: f = open(\u0026#34;guyu.txt\u0026#34;, \u0026#34;w\u0026#34;, encoding=\u0026#39;utf-8\u0026#39;) f.write(\u0026#34;或问:放心如何收?\\n余曰:只君此问便是收了\\n这收放甚容易\\n才昏昏便出去\\n才惺惺便在此\u0026#34;) f.close() def copyGuYu(): print(\u0026#34;开始复制\u0026#34;) try: try: f = open(\u0026#34;guyu.txt\u0026#34;, \u0026#34;r\u0026#34;, encoding=\u0026#34;utf-8\u0026#34;) guYus = f.readlines() except Exception as result: print(result, \u0026#34;\\nguyu.txt不存在,程序退出\u0026#34;) exit() finally: f.close() except Exception: print(\u0026#34;guyu.txt读取出现问题\u0026#34;) exit() print(\u0026#34;成功复制,准备写入copy.txt\u0026#34;) try: f = open(\u0026#34;copy.txt\u0026#34;, \u0026#34;r\u0026#34;, encoding=\u0026#34;utf-8\u0026#34;) f.close() choise = input(\u0026#34;当前目录已存在copy.txt,是否覆盖?Y/n\u0026#34;) if choise == \u0026#34;Y\u0026#34; or choise == \u0026#34;y\u0026#34;: f = open(\u0026#34;copy.txt\u0026#34;, \u0026#34;w\u0026#34;, encoding=\u0026#39;utf-8\u0026#39;) else: print(\u0026#34;程序退出\u0026#34;) exit() except Exception as result2: f = open(\u0026#34;copy.txt\u0026#34;, \u0026#34;w\u0026#34;, encoding=\u0026#39;utf-8\u0026#39;) for guYu in guYus: f.write(guYu) f.close() print(\u0026#34;复制完毕\u0026#34;) guYuTxt() copyGuYu() python爬虫 任务驱动式\n任务介绍 爬取豆瓣电影Top250的基本信息\n包括:\n电影名称 豆瓣评分 评价数 电影概况 电影链接 等等\n爬虫初识 按一定规则自动把网上的东西扒下来 本质上是模拟浏览器打开网页 百度指数可以查看关键词搜索人数index.baidu.com 基本流程 准备工作 观察目标网站 分析目标网页\nurl 观察下一页和前一页的差别 得知movie.douban.com/top250?start=***\n***为该页面开始的元素，每页25个元素，即要获取226-250为?/start=225\n页面元素 借助dev工具Element 获取元素标签路径\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 \u0026#39;\u0026#39;\u0026#39; BeautifulSoup4 将复杂HTML文档转换成一个复杂的树形结构 每 个节点都是Python对象 所有对象可以归纳为4种： tag，NavigableString，BeautifulSoup，Comment。 \u0026#39;\u0026#39;\u0026#39; # 使用目录下baidu.html演示 \u0026#39;\u0026#39;\u0026#39;基础： # 1.标签及内容 # print(bs.title) # \u0026lt; title \u0026gt; 百度一下，你就知道 \u0026lt; / title \u0026gt; # 2.标签的内容 .string print(bs.title.string) # 百度一下，你就知道 # 3.打印属性 .attrs print(bs.a.attrs) # {\u0026#39;class\u0026#39;: [\u0026#39;mnav\u0026#39;], \u0026#39;href\u0026#39;: \u0026#39;http://news.baidu.com\u0026#39;, \u0026#39;name\u0026#39;: \u0026#39;tj_trnews\u0026#39;} # 4.comment 特殊的NavigableString，不包含注释符号 print(bs.a.string) print(type(bs.a.string)) # \u0026lt;class \u0026#39;bs4.element.Comment\u0026#39;\u0026gt; \u0026#39;\u0026#39;\u0026#39; \u0026#34;\u0026#34;\u0026#34; from bs4 import BeautifulSoup try: with open(\u0026#34;./baidu.html\u0026#34;, \u0026#34;rb\u0026#34;) as file: # 2进制读取 html = file.read() bs = BeautifulSoup(html, \u0026#34;html.parser\u0026#34;) # (解析对象，解析器) # # bs是一个树形结构 根枝叶 # print(bs.title) # # \u0026lt; title \u0026gt; 百度一下，你就知道 \u0026lt; / title \u0026gt; # print(bs.a) # # \u0026lt; a class =\u0026#34;mnav\u0026#34; href=\u0026#34;http://news.baidu.com\u0026#34; name=\u0026#34;tj_trnews\u0026#34; \u0026gt; \u0026lt; !--新闻--\u0026gt; \u0026lt; / a \u0026gt; # print(bs.head) # # html的line3-line9 # print(bs.body) # # 这个形式是输出tag，找到第一个出现的标签以及标签内所有内容 # print(type(bs.body)) # # 输出\u0026lt;class \u0026#39;bs4.element.Tag\u0026#39;\u0026gt; # print(bs.title.string) # # 百度一下，你就知道 # print(bs.a.string) # # 新闻 # print(type(bs.a.string)) # # \u0026lt;class \u0026#39;bs4.element.Comment\u0026#39;\u0026gt; # print(bs.a.attrs) # # {\u0026#39;class\u0026#39;: [\u0026#39;mnav\u0026#39;], \u0026#39;href\u0026#39;: \u0026#39;http://news.baidu.com\u0026#39;, \u0026#39;name\u0026#39;: \u0026#39;tj_trnews\u0026#39;} # print(bs.title.attrs) # print(bs.head.link.attrs) # # {\u0026#39;href\u0026#39;: \u0026#39;https://ss1.bdstatic.com/5eN1bjq8AAUYm2zgoY3K/r/www/cache/bdorz/baidu.min.css\u0026#39;, \u0026#39;rel\u0026#39;: [\u0026#39;stylesheet\u0026#39;],\u0026#39;type\u0026#39;: \u0026#39;text/css\u0026#39;} print(bs.a.string) print(type(bs.a.string)) print(type(bs.title.string)) # 新闻 # \u0026lt;class \u0026#39;bs4.element.Comment\u0026#39;\u0026gt; # \u0026lt;class \u0026#39;bs4.element.NavigableString\u0026#39;\u0026gt; print(bs.a) print(bs.a.next_sibling.next_sibling) # 第二个\u0026lt;a # \u0026lt; a class =\u0026#34;mnav\u0026#34; href=\u0026#34;http://news.baidu.com\u0026#34; name=\u0026#34;tj_trnews\u0026#34; \u0026gt; \u0026lt; !--新闻--\u0026gt; \u0026lt; / a \u0026gt; # \u0026lt; a class =\u0026#34;mnav\u0026#34; href=\u0026#34;http://news.baidu.com\u0026#34; name=\u0026#34;tj_trnews\u0026#34; \u0026gt; 新闻 \u0026lt; / a \u0026gt; except Exception as error: print(error) \u0026#34;\u0026#34;\u0026#34; \u0026#39;\u0026#39;\u0026#39;应用-有针对性的扒东西 https://blog.csdn.net/xiaoyu_wu/article/details/102295184 # 文档的遍历 print(bs.head.contents[1]) # .contents得到本标签的列表,既然是列表就可以直接读取了 #\u0026lt;meta content=\u0026#34;text/html;charset=utf-8\u0026#34; http-equiv=\u0026#34;content-type\u0026#34;/\u0026gt; # *文档的搜索 # 搜索 # 1.find_all() # 字符串过滤：会查找与字符串完全匹配的内容 a_list = bs.find_all(\u0026#34;a\u0026#34;) # 查找所有名字叫”meta“的节点放到一个列表里 for a in a_list: print(a) # 2.正则表达式搜索 # 使用search()方法来匹配内容 # 需要引入re模块 import re a_list = bs.find_all(re.compile(\u0026#34;a\u0026#34;)) # 含有\u0026#34;a\u0026#34;的标签的所有内容比如\u0026lt;head\u0026gt;输出到\u0026lt;/head\u0026gt; # 3.方法：传入一个函数(方法)，根据函数的方法来引入,很强大 def name_is_exists(tag): return tag.has_attr(\u0026#34;class\u0026#34;) # 键 a_list = bs.find_all(name_is_exists) for a in a_list: print(a) # 4.kwargs 参数 # a_list = bs.find_all(id=\u0026#34;head\u0026#34;) # id name class_ # a_list = bs.find_all(class_=True) a_list = bs.find_all(href = \u0026#39;http://news.baidu.com\u0026#39;) for a in a_list: print(a.string) \u0026#39;\u0026#39;\u0026#39; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 from bs4 import BeautifulSoup try: with open(\u0026#34;./baidu.html\u0026#34;, \u0026#34;rb\u0026#34;) as file: # 2进制读取 bs = BeautifulSoup(file.read(), \u0026#34;html.parser\u0026#34;) # print(bs) # print(bs.head.contents) # 得到本标签的列表 # # [\u0026#39;\\n\u0026#39;, \u0026lt;meta content=\u0026#34;text/html;charset=utf-8\u0026#34; http-equiv=\u0026#34;content-type\u0026#34;/\u0026gt;, \u0026#39;\\n\u0026#39;, \u0026lt;meta content=\u0026#34;IE=Edge\u0026#34; http-equiv=\u0026#34;X-UA-Compatible\u0026#34;/\u0026gt;, \u0026#39;\\n\u0026#39;, \u0026lt;meta content=\u0026#34;always\u0026#34; name=\u0026#34;referrer\u0026#34;/\u0026gt;, \u0026#39;\\n\u0026#39;, \u0026lt;link href=\u0026#34;https://ss1.bdstatic.com/5eN1bjq8AAUYm2zgoY3K/r/www/cache/bdorz/baidu.min.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34;/\u0026gt;, \u0026#39;\\n\u0026#39;, \u0026lt;title\u0026gt;百度一下，你就知道 \u0026lt;/title\u0026gt;, \u0026#39;\\n\u0026#39;] # print(bs.head.contents[1]) # 既然是列表就可以直接读取了 # # \u0026lt;meta content=\u0026#34;text/html;charset=utf-8\u0026#34; http-equiv=\u0026#34;content-type\u0026#34;/\u0026gt; # print(bs.body.contents) # 搜索 https://www.cnblogs.com/changwoo/p/9932085.html # # 1.find_all() # a_list = bs.find_all(\u0026#34;a\u0026#34;) # 查找所有名字叫”meta“的节点放到一个列表里 # for a in a_list: # print(a) # 2.正则表达式搜索 # 使用search()方法来匹配内容 # 需要引入re模块 # import re # a_list = bs.find_all(re.compile(\u0026#34;a\u0026#34;)) # 含有\u0026#34;a\u0026#34;的标签的所有内容比如\u0026lt;head\u0026gt;输出到\u0026lt;/head\u0026gt; # for a in a_list: # print(a) # 3.方法：传入一个函数(方法)，根据函数的方法来引入,很强大 # def name_is_exists(tag): # return tag.has_attr(\u0026#34;class\u0026#34;) # 键 # a_list = bs.find_all(name_is_exists) # for a in a_list: # print(a) # 4.kwargs 参数 # a_list = bs.find_all(id=\u0026#34;head\u0026#34;) # id name class_ # a_list = bs.find_all(class_=True) # a_list = bs.find_all(href = \u0026#39;http://news.baidu.com\u0026#39;) # for a in a_list: # print(a.string) # 5.text 文本参数 # a_list = bs.find_all(text=[\u0026#39;hao123\u0026#39;, \u0026#39;地图\u0026#39;, \u0026#39;贴吧\u0026#39;]) # for a in a_list: # print(a.string) \u0026#39;\u0026#39;\u0026#39; 这特喵有啥用？判断有没有？ hao123 地图 贴吧\u0026#39;\u0026#39;\u0026#39; # import re # # 6.用正则表达式来查找包含特定文本的内容，标签里的字符串 # a_list = bs.find_all(text=re.compile(\u0026#34;\\d\u0026#34;)) # 数字 # for a in a_list: # print(a.string) # 7.limit参数 # a_list = bs.find_all(\u0026#34;a\u0026#34;, limit=3) # 就要前三个 # for a in a_list: # print(a.string) # 8.css选择器.select() # #指定标签 # print(bs.select(\u0026#39;title\u0026#39;)[0].string) # #百度一下，你就知道 # #指定类名来查找 此处为class=\u0026#39;mnav\u0026#39; # print(bs.select(\u0026#39;.mnav\u0026#39;)) # #指定id来查找 # print(bs.select(\u0026#39;#u1\u0026#39;)) # #指定属性来查找 # print(bs.select(\u0026#34;[class=\u0026#39;bri\u0026#39;]\u0026#34;)) # print(bs.select(\u0026#39;a[href=\u0026#34;//www.baidu.com/more/\u0026#34;]\u0026#39;)[0].string) # [ \u0026lt; a class =\u0026#34;bri\u0026#34; href=\u0026#34;//www.baidu.com/more/\u0026#34; name=\u0026#34;tj_briicon\u0026#34; style=\u0026#34;display: block;\u0026#34; \u0026gt; 更多产品 \u0026lt; / a \u0026gt;] # 更多产品 # # 按子标签查找 # print(bs.select(\u0026#34;body \u0026gt; div \u0026gt; div \u0026gt; div \u0026gt; div \u0026gt; a\u0026#34;)) # # 按照兄弟节点查找特定标签 \u0026#39;.\u0026#39;代表class print(bs.select(\u0026#34;.mnav ~ .bri\u0026#34;)[0].get_text()) # 更多产品 except Exception: pass 服务器响应 借助dev工具network\nHeaders UA（User-Agent）操作系统 浏览器 架构等信息\ncookie 标识客户端，包含登录访问ip地理位置等各种信息\nAccept 可以接受的数据 等\nResponse 服务器返回的数据\n应用的模块urllib.requst\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 # UA伪装(例子：伪装真实访问并获取网页源码) import urllib.request url = \u0026#34;http://www.httpbin.org/post\u0026#34; # data的构建形式 data = bytes(urllib.parse.urlencode({\u0026#34;hi\u0026#34;: \u0026#34;this is a test\u0026#34;}), encoding=\u0026#34;utf-8\u0026#34;) # 转为2进制 # headers字典内可以构建完全的浏览器信息键值对（可以在devTool获取） headers = { \u0026#34;User-Agent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36 Edg/87.0.664.66\u0026#34; } # req是用Request类构建的请求 默认get方式 req = urllib.request.Request(url=url, data=data, headers=headers, method=\u0026#34;POST\u0026#34;) # 用urlopen对网站发起请求req response = urllib.request.urlopen(req) print(response.read().decode(\u0026#34;utf-8\u0026#34;)) # 应用 import urllib.request url = \u0026#34;https://movie.douban.com/top250?start=0\u0026#34; headers = { \u0026#34;User-Agent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36 Edg/87.0.664.66\u0026#34; } req = urllib.request.Request(url=url, headers=headers) response = urllib.request.urlopen(req) print(response.read().decode(\u0026#34;utf-8\u0026#34;)) 编码规范 一般python第一行需要加入两者之一，可以解决中文的编码问题\n1 2 # coding=utf-8 # -*- coding:utf-8 -*- 多用函数\n加入main函数用于测试程序(看演示)\n1 2 if _name_ == \u0026#34;_main_\u0026#34;: main() 添加必要的注释便于理解\n代码演示 演示内容包括main函数 引入模块\n1 2 # 安装模块(cmd/shell) pip install package 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 from bs4 import BeautifulSoup # 网页解析获取数据 import re # 正则表达式,文字匹配 import urllib.request, urllib.error # 指定url获取网页数据 import xlwt # 进行excel操作 import sqlite3 # sqlite数据库操作 from test1 import t1 # 引入模块，其中test1表示文件夹(package)，文件t1.py print(t1.add(23, 22)) \u0026#39;\u0026#39;\u0026#39; 45 #成功引入t1并使用其中add函数 \u0026#39;\u0026#39;\u0026#39; def main(): print(\u0026#34;sad\u0026#34;) if __name__ == \u0026#34;__main__\u0026#34;: # 意思就是当程序执行时，为了更清楚的看主流程 main() # 调用函数 就是个程序入口 获取数据 通过http库发起请求，请求可以包括额外的header等内容如果服务器正常响应，会得到一个Response，这就是要的页面内容\n解析内容 用页面解析库，正则表达式解析得到的html，json格式内容\n保存数据 可以保存为文本，可以保存到数据库，或者特定格式的文件\n补充 正则表达式 ","date":"2021-01-14T00:00:00Z","permalink":"https://96bear.github.io/p/%E7%AC%94%E8%AE%B0python%E5%85%A5%E9%97%A8%E7%88%AC%E8%99%AB%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/","title":"笔记——Python入门爬虫数据可视化"},{"content":"\n起因 我有两台本本，日常一台性能本，win系统。还有一台chromebook，常用chroot-ubuntu系统，便携，看看资料啥的，也能编译一些东西，为了两台电脑的协作，想学一下用ssh连接\n配置 安装openssh-server,openssh-clicent,iptables 使用 iptables开放22端口 看情况配置**/etc/ssh/sshd_config**，我加了个免密码 开启ssh服务，ifconfig查看内网ip，win本xshell连接成功！ 为了方便使用和备忘写了个shell脚本 Shell 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 #!/bin/sh #任意键继续的模块 get_char() { SAVEDSTTY=`stty -g` stty -echo stty cbreak dd if=/dev/tty bs=1 count=1 2\u0026gt; /dev/null stty -raw stty echo stty $SAVEDSTTY } echo \u0026#34;ssh相关脚本，请选择：\u0026#34; echo \u0026#34;1) Install openssh-server openssh-clicent iptables\u0026#34; echo \u0026#34;2) open22 \u0026amp; service ssh restart\u0026#34; echo \u0026#34;3) open localhost:22\u0026#34; echo \u0026#34;4) service ssh stop\u0026#34; echo \u0026#34;5）check 22（requir lsof）\u0026#34; echo \u0026#34;6) Edit ur sshd_config（requir micro/vim/nano）\u0026#34; echo \u0026#34;7) Edit ur ip（requir micro/vim/nano）\u0026#34; echo \u0026#34;8) nothing\u0026#34; read number case $number in 1)echo \u0026#34;首次使用，安装ssh服务,按任意键继续\u0026#34; char=`get_char` sudo apt install openssh-client openssh-server iptables ;; 2)echo \u0026#34;开机一次性启动ssh-service，按任意键继续\u0026#34; char=`get_char` sudo iptables -I INPUT -p tcp --dport 22 -j ACCEPT sudo service ssh restart ;; 3)echo \u0026#34;单独开启22端口，按任意键继续\u0026#34; char=`get_char` sudo iptables -I INPUT -p tcp --dport 22 -j ACCEPT ;; 4)echo \u0026#34;结束ssh服务，按任意键继续\u0026#34; char=`get_char` sudo service ssh stop ;; 5)echo \u0026#34;查看22端口是否启用，按任意键继续\u0026#34; char=`get_char` sudo lsof -i:22 echo 如果上边有列表信息代表22开启 ;; 6)echo \u0026#34;编辑ssh服务配置（含更改22，密码，root选项）按任意键继续\u0026#34; echo \u0026#34;Please edit /etc/ssh/sshd_config\u0026#34; char=`get_char` sudo micro /etc/ssh/sshd_config ;; 7)echo \u0026#34;设置固定ip-test，按任意键继续\u0026#34; echo \u0026#34;Please edit /etc/network/interfacesces\u0026#34; char=`get_char` sudo micro /etc/network/interfacesces ;; 8)echo \u0026#34;关于\u0026#34; echo \u0026#34;作者：96bearli\u0026#34; echo \u0026#34;Blog:https://bear962464.cn\u0026#34; echo \u0026#34;Blog:https://96bearli.github.io\u0026#34; echo \u0026#34;Time:2021.01.04 19:05\u0026#34; char=`get_char` ;; esac ","date":"2021-01-04T00:00:00Z","permalink":"https://96bear.github.io/p/%E5%86%85%E7%BD%91ssh%E8%BF%9E%E6%8E%A5%E4%B8%BB%E6%9C%BAshell%E8%84%9A%E6%9C%AC/","title":"内网ssh连接主机shell脚本"},{"content":"解决you-get下载视频缓慢的问题 前言 you-get是一款非常强大的程序，可以下载大量网站的视频，如果感兴趣请访问开源地址\n在使用过程中我遇到了一个问题：下载视频被限速，速度不超过1Mbs甚至只有50kb/s，面对漫长的下载时间不免等的心烦。\n思考 下载视频为什么被限速？我想也许这是官方在网站访问高峰时间限制爬虫爬取视频来保证真实用户的观看体验。\n那官方是如何来识别是否是爬虫呢？通过访问的逻辑么？还是某种固定的UA？感觉不太可能是访问逻辑，you-get本身就是模仿用户缓存视频，如果按照逻辑，那可能会产生大量的“误封”。\n那这些“机器用户”还有什么共同特征呢？对，UA，即User-Agent。\n因为用户们都在用着同一款you-get的发行版本，python源码是固定的，内部UA部分也是固定的。\n所以来不妨来尝试一下修改UA是否能加快下载速度。当然了，如果是限制的IP那就只能重启路由更换地址咯\n环境 名称 版本 Python 3.8.1 you-get 0.4.1500 系统 win10 linux发行版的步骤应该也是一样的\n尝试修改User-Agent 对照 在尝试修改UA之前，先测试一下现在的下载速度\n好的，现在是91kb/s\n寻找you-get路径 1 2 3 4 5 6 7 8 9 10 11 12 13 14 pip show you-get \u0026#39;\u0026#39;\u0026#39; C:\\Users\\Administrator\u0026gt;pip show you-get Name: you-get Version: 0.4.1500 Summary: Dumb downloader that scrapes the web Home-page: https://you-get.org/ Author: Mort Yao Author-email: mort.yao@gmail.com License: MIT Location: c:\\users\\administrator\\appdata\\local\\programs\\python\\python38\\lib\\site-packages Requires: Required-by: \u0026#39;\u0026#39;\u0026#39; 好的，我们得到了路径\nLocation: c:\\users\\administrator\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\n寻找对应的UA配置 打开该目录下的**./you_get/extractors**文件夹\n可以找到bilibili的对应文件bilibili.py\n随便什么编辑器打开\n很容易的找到UA在line55处,貌似大会员cookie可以填写在这里啊，当然这是另一个话题了\n更换UA 注释掉原有配置，再按照格式加入新的UA，我这里是取用的Edge真实UA，网络搜索也是一搜一大把，保存后是这样的\n1 2 3 4 5 6 7 8 9 10 @staticmethod def bilibili_headers(referer=None, cookie=None): # a reasonable UA ua = \u0026#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36 Edg/87.0.664.66\u0026#39; headers = {\u0026#39;Accept\u0026#39;: \u0026#39;*/*\u0026#39;, \u0026#39;Accept-Language\u0026#39;: \u0026#39;en-US,en;q=0.5\u0026#39;, \u0026#39;User-Agent\u0026#39;: ua} if referer is not None: headers.update({\u0026#39;Referer\u0026#39;: referer}) if cookie is not None: headers.update({\u0026#39;Cookie\u0026#39;: cookie}) return headers 再次测速 成功，速度已然恢复正常\n总结 pip show you-get edit ./you_get/extractors/bilibili.py Change \u0026lsquo;User-Agent\u0026rsquo; Success！ 感想 没有基础\n半蒙半做\n巧合成功\n日后加油\n","date":"2021-01-03T00:00:00Z","permalink":"https://96bear.github.io/p/%E8%A7%A3%E5%86%B3you-get%E4%B8%8B%E8%BD%BD%E8%A7%86%E9%A2%91%E7%BC%93%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98/","title":"解决you-get下载视频缓慢的问题"},{"content":"关于 我在Chromebook上通过crouton安装了ubuntu，安装方法请看之前博客文章，为了扩展储存，我将系统转移到了sd卡。本博文就是为了解决每次进入sd卡chroot多条命令的省略\n优点 省略每次命令的输入 每次休眠后变化后的sd卡路径自动获取 一键重设开发者root密码 脚本 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 #!/bin/sh #任意键继续的模块 get_char() { SAVEDSTTY=`stty -g` stty -echo stty cbreak dd if=/dev/tty bs=1 count=1 2\u0026gt; /dev/null stty -raw stty echo stty $SAVEDSTTY } #sh printtime.sh #该shell直接输出本地时间 time1=$(date +%Y-%m-%d\\ %H:%M:%S) #currentTimeStamp=`date +%s -d \u0026#34;$time1\u0026#34;` #time1=$(($currentTimeStamp+28800)) #time1=$(date +%Y-%m-%d\\ %H:%M:%S -d \u0026#34;1970-01-01 UTC $time1 seconds\u0026#34;); echo 现在是北京时间：$time1 sleep 0.6 echo \u0026#34;管理员Bear您好\u0026#34; echo \u0026#34;您即将进入chroot\u0026#34; echo \u0026#34;您安装的是ubuntu16.04\u0026#34; echo \u0026#34;请输入序号选择要进入的方式\u0026#34; echo \u0026#34;1) Start xfce_sd\u0026#34; echo \u0026#34;2) Start shell_sd\u0026#34; echo \u0026#34;3) echo shell_sd\u0026#34; echo \u0026#34;4) xfce in window\u0026#34; echo \u0026#34;5) Start xfce_local\u0026#34; echo \u0026#34;6) Start shell_local\u0026#34; echo \u0026#34;7) app in window\u0026#34; echo \u0026#34;8) xfce in tab\u0026#34; echo \u0026#34;9) resolve.sh\u0026#34; read number case $number in 1)echo \u0026#34;正在启动桌面xfce_sd\u0026#34; sdpath=$(sudo fdisk -l |grep -C 0 \u0026#34;HPFS/NTFS/exFAT\u0026#34; |cut -c1-9) echo 正在挂载$sdpath到/media/removable/linux sudo umount $sdpath sudo mkdir /media/removable/linux sudo mount $sdpath /media/removable/linux echo 正在启动xfce桌面，请输入密码1 sudo /media/removable/linux/bin/startxfce4 ;; 2)echo \u0026#34;正在进入命令行shell_sd\u0026#34; sdpath=$(sudo fdisk -l |grep -C 0 \u0026#34;HPFS/NTFS/exFAT\u0026#34; |cut -c1-9) echo 正在挂载$sdpath到/media/removable/linux sudo umount $sdpath sudo mkdir /media/removable/linux sudo mount $sdpath /media/removable/linux echo 正在进入命令行，请输入密码1 sudo /media/removable/linux/bin/enter-chroot ;; 3)echo \u0026#34;显示sd shell\u0026#34; grep -A 8 \u0026#34;正在启动桌面xfce_sd\u0026#34; enterchroot.sh ;; 4)echo \u0026#34;以窗口模式启动桌面xfce\u0026#34; sdpath=$(sudo fdisk -l |grep -C 0 \u0026#34;HPFS/NTFS/exFAT\u0026#34; |cut -c1-9) echo 正在挂载$sdpath到/media/removable/linux sudo umount $sdpath sudo mkdir /media/removable/linux sudo mount $sdpath /media/removable/linux sudo /media/removable/linux/bin/startxfce4 -X xiwi ;; 5)echo \u0026#34;正在启动桌面xfce_local\u0026#34; sudo startxfce4 ;; 6)echo \u0026#34;正在进入命令行shell_local\u0026#34; sudo enter-chroot ;; 7)echo \u0026#34;以下为窗口运行ubuntu软件的命令,手动复制执行\u0026#34; echo \u0026#34;sudo /media/removable/linux/bin/enter-chroot -b xiwi typorae\u0026#34; echo 按任意键继续显示... char=`get_char` sleep 0.6 echo \u0026#34;help: https://github.com/dnschneid/crouton/wiki/crouton-in-a-Chromium-OS-window-%28xiwi%29\u0026#34; ;; 8)echo \u0026#34;以下为标签运行xfce的命令并自动运行\u0026#34; echo \u0026#34;sudo /media/removable/linux/bin/startxfce4 -X xiwi-tabtee\u0026#34; sleep 0.6 echo 确认继续执行请按任意键继续... char=`get_char` sdpath=$(sudo fdisk -l |grep -C 0 \u0026#34;HPFS/NTFS/exFAT\u0026#34; |cut -c1-9) echo 正在挂载$sdpath到/media/removable/linux sudo umount $sdpath sudo mkdir /media/removable/linux sudo mount $sdpath /media/removable/linux echo 正在启动xfce桌面，请输入密码1 sudo /media/removable/linux/bin/startxfce4 -X xiwi-tabtee ;; 9)echo \u0026#34;常见问题通道\u0026#34; #sh /resolve.sh echo \u0026#34;Bear遇到的问题并完美解决（懒得记）的代码\u0026#34; echo \u0026#34;任务开始执行没有再次确认，且无法挽回，建议看代码\u0026#34; sleep 1 echo \u0026#34;所以你要解决什么问题？\u0026#34; sleep 0.6 echo \u0026#34;1）重设开发者root密码\u0026#34; echo \u0026#34;2) 解决Read-only file system\u0026#34; echo \u0026#34;3) 锁启动签名\u0026#34; read number case $number in 1)echo \u0026#34;正在重设开发者root密码\u0026#34; echo 确认继续执行请按任意键继续... char=`get_char` echo \u0026#34;请进行2-3次的密码输入\u0026#34; sudo chromeos-setdevpasswd echo \u0026#34;执行完毕，password已修改\u0026#34; ;; 2)echo \u0026#34;正在设定为WR读写\u0026#34; echo 确认继续执行请按任意键继续... char=`get_char` sudo /usr/share/vboot/bin/make_dev_ssd.sh --remove_rootfs_verification --partitions 4 echo \u0026#34;执行完毕，重启生效\u0026#34; ;; 3)echo \u0026#34;或许你做了个不明智的决定\u0026#34; echo 确认继续执行请按任意键继续... char=`get_char` sudo crossystem dev_boot_signed_only=1 echo \u0026#34;执行完毕，重启生效\u0026#34; ;; esac ;; esac ","date":"2020-11-28T00:00:00Z","permalink":"https://96bear.github.io/p/crouton-shellsd/","title":"crouton shell(sd)"},{"content":"dpkg 强制选项 - 当遇到问题时控制软件行为： 警告后仍然继续: \u0026ndash;force-\u0026lt;手段\u0026gt;,\u0026lt;手段\u0026gt;,\u0026hellip; 遇错即停: \u0026ndash;refuse-\u0026lt;手段\u0026gt;,\u0026lt;手段\u0026gt;,\u0026hellip; | \u0026ndash;no-force-\u0026lt;手段\u0026gt;,\u0026hellip; 可强制执行的“手段”: [!] all 设置所有的强制选项 [*] downgrade 以旧版本的软件包来代替现有软件包 configure-any 配置任何可能与这有关的软件包 hold 处理意外的软件包，即使它处于搁置状态 not-root 以非 root 权限尝试（反）安装这些东西 bad-path 环境变量 PATH 里缺失重要的程序，问题可能 bad-verify 安装一个软件包，即使它的真实性检查失败 bad-version 继续处理，即使软件包版本错误 overwrite 将一个软件包的文件覆盖到另一个包的文件上 overwrite-diverted 以原封未动的文件覆盖一个转移文件 [!] overwrite-dir 用其他软件包的文件覆盖一个软件包的目录 [!] unsafe-io 不要在解包的时候进行安全I/O操作 [!] confnew 总是使用新的配置文件，不提示 [!] confold 总是使用旧的配置文件，不提示 [!] confdef 当有新的配置文件时使用默认选项，不要提示。 如果找不到默认设置，将会有提示，除非打开 confold 或 confnew 选项 [!] confmiss 总是安装缺失的配置文件 [!] confask 建议不以新版本配置文件取代原有版本 [!] architecture 继续处理，即使软件包没有体系结构或者体系结构错误 [!] breaks 继续安装，即使它会损坏另一个软件包 [!] conflicts 允许安装存在冲突的软件包 [!] depends 将所有依赖问题转为警告 [!] depends-version 将所有依赖版本问题转为警告 [!] remove-reinstreq 移除要求安装的软件包 [!] remove-essential 移除一个至关重要的软件包\n","date":"2020-07-18T00:00:00Z","permalink":"https://96bear.github.io/p/dpkg%E5%B8%AE%E5%8A%A9/","title":"dpkg帮助"},{"content":"起因 想降级libssl1.0.0,下载libssl1.0.0_1.0.2g-1ubuntu4.15_amd64单独降级导致dpkg卡住\n报错 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 # sudo apt-get install libssl-dev :( 1 20-07-18 - 23:54:55 正在读取软件包列表... 完成 正在分析软件包的依赖关系树 正在读取状态信息... 完成 libssl-dev 已经是最新版 (1.0.2g-1ubuntu4.16)。 libssl-dev 已设置为手动安装。 您可能需要运行“apt-get -f install”来纠正下列错误： 下列软件包有未满足的依赖关系： libssl-dev : 依赖: libssl1.0.0 (= 1.0.2g-1ubuntu4.16) 但是 1.0.2g-1ubuntu4.15 正要被安装 libssl1.0.0 : 破坏: libssl1.0.0:i386 (!= 1.0.2g-1ubuntu4.15) 但是 1.0.2g-1ubuntu4.16 正要被安装 libssl1.0.0:i386 : 破坏: libssl1.0.0 (!= 1.0.2g-1ubuntu4.16) 但是 1.0.2g-1ubuntu4.15 正要被安装 E: 有未能满足的依赖关系。请尝试不指明软件包的名字来运行“apt-get -f install”(也可以指定一个解决办法)。 ### # dpkg --remove --force-remove-reinstreq libssl1.0.0:amd64 dpkg: 依赖问题阻止了卸载 libssl1.0.0:amd64 的操作： libpython3.5-minimal:amd64 依赖于 libssl1.0.0 (\u0026amp;gt;= 1.0.2~beta3). libpython2.7-stdlib:amd64 依赖于 libssl1.0.0 (\u0026amp;gt;= 1.0.2~beta3). openssh-client 依赖于 libssl1.0.0 (\u0026amp;gt;= 1.0.2). libpodofo0.9.3 依赖于 libssl1.0.0 (\u0026amp;gt;= 1.0.0). libsasl2-modules:amd64 依赖于 libssl1.0.0 (\u0026amp;gt;= 1.0.0). libwinpr-sspi0.1:amd64 依赖于 libssl1.0.0 (\u0026amp;gt;= 1.0.0). wget 依赖于 libssl1.0.0 (\u0026amp;gt;= 1.0.1). sbsigntool 依赖于 libssl1.0.0 (\u0026amp;gt;= 1.0.0). openssl 依赖于 libssl1.0.0 (\u0026amp;gt;= 1.0.2g). libssh-4:amd64 依赖于 libssl1.0.0 (\u0026amp;gt;= 1.0.0). calibre-bin 依赖于 libssl1.0.0 (\u0026amp;gt;= 1.0.0). ntpdate 依赖于 libssl1.0.0 (\u0026amp;gt;= 1.0.1d). libfreerdp-core1.1:amd64 依赖于 libssl1.0.0 (\u0026amp;gt;= 1.0.0). netsurf-gtk 依赖于 libssl1.0.0 (\u0026amp;gt;= 1.0.0). gstreamer1.0-plugins-bad:amd64 依赖于 libssl1.0.0 (\u0026amp;gt;= 1.0.1). libfreerdp-crypto1.1:amd64 依赖于 libssl1.0.0 (\u0026amp;gt;= 1.0.0). wpasupplicant 依赖于 libssl1.0.0 (\u0026amp;gt;= 1.0.1). libssl-dev:amd64 依赖于 libssl1.0.0 (= 1.0.2g-1ubuntu4 dpkg: 处理软件包 libssl1.0.0:amd64 (--remove)时出错： 依赖问题 - 不会执行卸载 在处理时有错误发生： libssl1.0.0:amd64 ### # dpkg -r --force-architecture libssl-dev:amd64 20-07-18 - 23:58:16 dpkg: 依赖问题阻止了卸载 libssl-dev:amd64 的操作： nodejs-dev 依赖于 libssl-dev (\u0026amp;gt;= 1.0.0g). dpkg: 处理软件包 libssl-dev:amd64 (--remove)时出错： 依赖问题 - 不会执行卸载 在处理时有错误发生： libssl-dev:amd64 解决 1 2 3 4 5 #解决执行命令 wget http://security.ubuntu.com/ubuntu/pool/main/o/openssl/libssl1.0.0_1.0.2g-1ubuntu4.16_amd64.deb sudo -i dpkg -r --force-all libssl-dev:amd64 dpkg -i --force-all libssl1.0.0_1.0.2g-1ubuntu4.16_amd64.deb 再次尝试sudo apt install -f,自动修复成功 问题解决！\n反思 没事瞎搞啥。。。\n","date":"2020-07-18T00:00:00Z","permalink":"https://96bear.github.io/p/ubuntu-libssl1.0.0amd64%E9%99%8D%E7%BA%A7%E5%A4%B1%E8%B4%A5/","title":"ubuntu libssl1.0.0:amd64降级失败"},{"content":"情况 这几天你们的电脑上有没有过这么一个玩意，经查该执行文件在搜狗输入法目录下\n因为我电脑上的软件刻意整理过，很久没有弹窗广告了，突然出来个这个给我恶心的不行，一定要解决\n思路 两种方法可以解决\n换输入法，推荐一下rime 用windows的本地安全策略就可以搞定它。 绝杀该弹窗 路径：C:\\Program Files (x86)\\sogoupinyin\\9.7.0.3676\\showinfo.exe\n第一步：先删除原文件showinfo.exe，然后创建一个txt文本命名showinfo，后缀txt改成exe\n第二步：showinfo.exe右键\u0026gt;属性，按照下图顺序依次执行\n常规\u0026gt;只读，安全\u0026gt;编辑\u0026gt;全部拒绝\u0026gt;应用\u0026gt;确定\n","date":"2020-06-03T00:00:00Z","permalink":"https://96bear.github.io/p/%E7%BB%9D%E6%9D%80%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95618%E5%BC%B9%E7%AA%97%E5%B9%BF%E5%91%8A/","title":"绝杀搜狗输入法618弹窗广告"},{"content":"sudo apt-get upgrade报错\n1 3 not fully installed or removed. 1 2 3 4 5 #解决方法 cd /var/lib/dpkg sudo mv info info.bak sudo mkdir info sudo apt-get upgrade 完美解决！\n","date":"2020-05-26T00:00:00Z","permalink":"https://96bear.github.io/p/errors-were-encountered-while-processing%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/","title":"Errors were encountered while processing的解决办法"},{"content":"apt install设置触发python3.5报错 尝试删除python3.5报错信息如下\n1 rm: cannot remove ‘/usr/lib/python3.5/__pycache__ /_compression.cpython-35.pyc ’: Input/output error 尝试手动删除失败 查询后得知对文件系统进行修复可以解决 使用命令fsck 我是在chromebook运行的chroot，于是在chromeos中使用sudo fdisk -l查询分区路径 得到路径/dev/sdb1\n1 2 #检测命令,全部y，也可加入-a fsck.ext3 /dev/sdb1 重启后可以删除_compression.cpython-35.pyc 了，但是并没有解决apt install设置触发python3.5报错的问题\n1 2 3 4 5 Errors were encountered while processing: python3.5 dh-python python3 E: Sub-process /usr/bin/dpkg returned an error code (1) 继续尝试\n","date":"2020-05-26T00:00:00Z","permalink":"https://96bear.github.io/p/rm-cannot-remove-input/output-error/","title":"rm: cannot remove Input/output error"},{"content":"材料：一个U盘（FAT32格式，其他格式可能出错），sd卡一张（高速，较大容量，作为系统盘）\n1.设置sd卡 插入sd卡，ctrl+alt+t shell\n1 2 3 4 5 6 7 8 9 10 11 12 sudo -i #列出当前所有设备 fdisk -l #找到SD卡，比如我的是/dev/sdc1,将其卸载 umount /dev/sdc1 #把设备格式化成ext4 mkfs.ext4 /dev/sdc1 #添加linux文件夹 mkdir /media/removable/linux #把设备挂载到linux文件夹下 mount /dev/mmcblk1 /media/removable/linux chmod 777 -R /dev /media/removable 2.备份系统 1 2 3 4 5 6 7 8 cd /usr/local/chroots/ #找到安装的linux名 #如/usr/local/chroots/xenial，所以chrootname为xenial sudo edit-chroot -b chrootname #当前目录生成文件xxxxx.tar.gz，将该文件mv到Downloads下面即可 #空间紧张就移动到U盘 #删除原有系统（可选） sudo delete-chroot chrootname 3.恢复系统到SD卡 1 2 #-f指向备份文件，-p指向安装位置（sd卡） sudo sh ~/Downloads/crouton -f mybackup.tar.gz -p /media/removable/linux 4.运行命令 每次重启后都要运行以下命令来启动ubuntu，建议./xxx.sh运行\n1 2 3 4 5 #!/bin/sh sudo umount /dev/sdb1 sudo mkdir /media/removable/linux sudo mount /dev/sdb1 /media/removable/linux sudo media/removable/linux/bin/startxfce4 进入终端把line5改成\nsudo media/removable/linux/bin/enter-chroot\n删除sd卡chroot方法 先挂载上chroot\n1 sudo delete-chroot -y -ac /media/removable/linux/chroots/xenial/ 2020 1 15增加bash脚本方便每次进入chroot 请查看本站文章crouton shell(sd)\n","date":"2020-05-26T00:00:00Z","permalink":"https://96bear.github.io/p/%E8%BD%AC%E7%A7%BBlinux%E7%B3%BB%E7%BB%9F%E5%88%B0sd%E5%8D%A1/","title":"转移linux系统到SD卡"},{"content":"\n安装链接 点击这里直达greasyfork\n简介 这是一个B站的自动取关脚本\n原理 计时器自动刷新,并在本页面的关注列表点击取消关注\n启动页面 方法一 *https://space.bilibili.com//fans/follow**\n*为你的B站UID\n方法二 也可通过首页\u0026gt;关注按钮进入\n使用 刷新速度越快可以填写越小的数字,随便填,不管用再增加\n","date":"2020-04-06T00:00:00Z","permalink":"https://96bear.github.io/p/b%E7%AB%99%E8%87%AA%E5%8A%A8%E5%8F%96%E5%85%B3%E6%B2%B9%E7%8C%B4%E8%84%9A%E6%9C%AC/","title":"B站自动取关油猴脚本"},{"content":"为表达全国各族人民对抗击新冠肺炎疫情斗争牺牲烈士和逝世同胞的深切哀悼，国务院决定，2020年4月4日举行全国性哀悼活动。 在此期间，全国和驻外使领馆下半旗志哀，全国停止公共娱乐活动。 4月4日10时起，全国人民默哀3分钟，汽车、火车、舰船鸣笛，防空警报鸣响。 ","date":"2020-04-03T00:00:00Z","permalink":"https://96bear.github.io/p/%E6%B7%B1%E5%88%87%E5%93%80%E6%82%BC%E9%80%9D%E4%B8%96%E5%90%8C%E8%83%9E%E7%A5%96%E5%9B%BD%E4%B8%87%E5%B2%81/","title":"深切哀悼逝世同胞!祖国万岁!"},{"content":"\n#include\u0026lt;stdio.h\u0026gt;\n#include\u0026lt;math.h\u0026gt;\nint main()\n{\nfloat a,b,c;//一元二次方程三系数\nif(scanf(\u0026quot;%f %f %f\u0026quot;,\u0026amp;a,\u0026amp;b,\u0026amp;c)!=3)\n{\nprintf(\u0026ldquo;input error!\u0026rdquo;);\nreturn 0;\n}\nif(a==0\u0026amp;\u0026amp;b==0)//a,b都为0和abc都为零\n{\nif(c==0)\nprintf(\u0026ldquo;Zero Equation\u0026rdquo;);\nelse\nprintf(\u0026ldquo;Not An Equation\u0026rdquo;);\nreturn 0;\n}\nif(a==0)//当a=0且b!=0,一元一次方程\n{\nprintf(\u0026quot;%0.2f\u0026quot;,-c/b);\nreturn 0;\n}\nfloat Delta=b*b-4*a*c;//定义Delta\nif(Delta\u0026lt;0)//三种情况之1:两虚根\n{\nif(b==0)//b为0时无实部\nprintf(\u0026ldquo;0.00+%0.2fi\\n0.00-%0.2fi\u0026rdquo;,sqrt(-Delta)/(2*a),sqrt(-Delta)/(2*a));\nelse\nprintf(\u0026quot;%0.2f+%0.2fi\\n%0.2f-%0.2fi\u0026quot;,(-b) / (2 * a),sqrt(-Delta) / (2 * a),(-b) / (2 * a),sqrt(-Delta) / (2 * a));\n}\nelse if(Delta==0)//三种情况之2:两相同实根\nprintf(\u0026quot;%0.2f\u0026quot;,-b/(2*a));\nelse//三种情况之3:两不同实根\nprintf(\u0026quot;%0.2f\\n%0.2f\u0026quot;,(-b+sqrt(b*b-4*a*c))/(2*a),(-b-sqrt(b*b-4*a*c))/(2*a));\nreturn 0 ;\n}\n","date":"2020-03-20T00:00:00Z","permalink":"https://96bear.github.io/p/%E8%A7%A3%E4%B8%80%E5%85%83%E4%BA%8C%E6%AC%A1%E6%96%B9%E7%A8%8B/","title":"解一元二次方程"},{"content":"\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #include\u0026lt;stdio.h\u0026gt; int main() { int a,b,r;//数1 数2 result char c;//符号 if(scanf(\u0026#34;%d %c %d\u0026#34;,\u0026amp;a,\u0026amp;c,\u0026amp;b)!=3) { printf(\u0026#34;ERROR\u0026#34;); goto end; } switch(c) { case \u0026#39;+\u0026#39;:r=a+b;break; case \u0026#39;-\u0026#39;:r=a-b;break; case \u0026#39;*\u0026#39;:r=a*b;break; case \u0026#39;/\u0026#39;:r=a/b;break; case \u0026#39;%\u0026#39;:r=a%b;break; default :printf(\u0026#34;ERROR\u0026#34;);goto end;;break; } printf(\u0026#34;%d\u0026#34;,r); end: //标记结束 return 0; } ","date":"2020-03-20T00:00:00Z","permalink":"https://96bear.github.io/p/%E4%B8%A4%E6%95%B0%E8%AE%A1%E7%AE%97/","title":"两数计算"},{"content":"\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #include\u0026lt;stdio.h\u0026gt; int main() { float pay,tax,num;//依次为工资,税, 上税部分 if(scanf(\u0026#34;%f\u0026#34;,\u0026amp;pay)!=1)//给工资赋值,并判断输入是否正确 { printf(\u0026#34;input error!\u0026#34;); return 0; } num=pay-1600; if(pay\u0026lt;=1600)//通过if else判断pay所在区间 并计算对应税 tax=0; else if(pay\u0026lt;=2500) tax=num*0.05; else if(pay\u0026lt;=3500) tax=num*0.1; else if(pay\u0026lt;=4500) tax=num*0.15; else tax=num*0.2; printf(\u0026#34;%.2f\u0026#34;,tax); //输出两位小数的税 return 0; } ","date":"2020-03-20T00:00:00Z","permalink":"https://96bear.github.io/p/%E4%B8%8A%E7%A8%8E/","title":"上税"},{"content":"1. 点击你的B站空间地址 2. 点击关注数 3. 选择一个分组 4. 刚忘了说chrome内核浏览器\u0026ndash;\u0026gt;按F12检查 1 $(\u0026#34;.be-dropdown-item:contains(\u0026#39;取消关注\u0026#39;)\u0026#34;).click() 5. console输入代码后回车 6. 每次取关20个 感谢: 作者：玖壹居士 https://www.bilibili.com/read/cv4787009/ 出处： bilibili\n","date":"2020-03-19T00:00:00Z","permalink":"https://96bear.github.io/p/bilibili%E6%89%B9%E9%87%8F%E5%8F%96%E5%85%B3/","title":"bilibili批量取关"},{"content":"23买纯数字.xyz十年 先展示成果哈 早就听说腾讯云良心云，这个域名太香了\n首先打开：http://dwz.win/5KD 领取所有关于域名的无门槛券\n23买10年要用到一张\n和两张20-10，注意20-10元可以刷新页面领取\n领取代金券礼包 域名购买链接，第一次买一年 纯数字（6位以上）.xyz 使用6无门槛优惠券，花费0 购买完成进入控制台续费4年，用20-10，花费11 重复上一步，花费11 使用6-5优惠券，花费1元，凑足10年 总计23 大概是这样 在支付成功页面可以抽奖获得10无门槛 ","date":"2020-03-12T00:00:00Z","permalink":"https://96bear.github.io/p/23%E5%85%83%E4%B9%B02233521.xyz%E5%8D%81%E5%B9%B4/","title":"23元买2233521.xyz十年"},{"content":"Linux之sudo免密码操作 我们通常使用sudo进行软件安装,但是使用一次sudo后只有5min的免密码时间 这篇文章教你怎么使用用户username执行特权命令就可以不输入密码，使用该用户切换至root也不需要密码(如sudo bash) 本教程在ubuntu16.04实测\n1 2 3 4 5 sudo -i //输入密码,切换至root用户,shell为bash sudo vi /etc/sudoers //修改sudoers //vi基础操作 i 编辑 esc退出编辑 ZZ保存退出 ZQ不保存退出 1 2 3 4 5 6 //在sudoers最后增加 username ALL=(ALL:ALL) NOPASSWD:ALL //修改 %sudo ALL=(ALL:ALL) ALL //为 %sudo ALL=(ALL:ALL) NOPASSWD:ALL 尝试sudo -i success!\n","date":"2020-02-29T00:00:00Z","permalink":"https://96bear.github.io/p/linux%E4%B9%8Bsudo%E5%85%8D%E5%AF%86%E7%A0%81%E6%93%8D%E4%BD%9C/","title":"Linux之sudo免密码操作"},{"content":"ubuntu16.04安装网易云音乐 有时候网易云音乐打不开可能是因为下载的版本不对导致缺少系统底层接口的支持\n下载 官网已经更新为18.04版本 16.04在官网此位置下载\n安装 下载好后在下载路径打开终端\n1 sudo dpkg -i netease-cloud-music_1.0.0_amd64_ubuntu16.04.deb 如果出现数据库出错问题 请看网易云音乐数据库出错问题\n太长不看(一行命令) 1 2 3 //懒人命令,打开终端直接执行并输入密码 sudo -i \u0026amp;\u0026amp; wget http://s1.music.126.net/download/pc/netease-cloud-music_1.0.0_amd64_ubuntu16.04.deb \u0026amp;\u0026amp; sudo dpkg -i netease-cloud-music_1.0.0_amd64_ubuntu16.04.deb ``` ","date":"2020-02-29T00:00:00Z","permalink":"https://96bear.github.io/p/ubuntu16.04%E5%AE%89%E8%A3%85%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90/","title":"ubuntu16.04安装网易云音乐"},{"content":" 网易云音乐数据库出错问题 - - 软件 - 环境ubuntu16.04 - 应用版本 1.0 - 解决 - 其他 - 感谢 网易云音乐数据库出错问题\n软件\nenter description here\n环境ubuntu16.04\n应用版本 1.0\n应该是权限问题\n解决\n1 2 sudo chmod -R 777 ~/.cache/netease-cloud-music sudo chmod -R 777 ~/.config/netease-cloud-music 其他\nubuntu16.04对应版本云音乐1.0安装教程\n感谢\nLinux Ubuntu 17.10 下安装网易云音乐 1.1.0 并解决数据库问题\n","date":"2020-02-29T00:00:00Z","permalink":"https://96bear.github.io/p/%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E6%95%B0%E6%8D%AE%E5%BA%93%E5%87%BA%E9%94%99%E9%97%AE%E9%A2%98/","title":"网易云音乐数据库出错问题"},{"content":"Midas学习笔记 目录 [TOC]\n程序界面 横向菜单 常用单位系 MCT命令流 SCP截面特性计算器 竖向菜单 树形菜单-工作：建立模型的每一步操作 可能用到 定义组 用户自定义-左右两个树形菜单，作用：边操作边检查\n信息窗口：方便查看操作和错误信息\n可以查看结构，荷载。右上角视角。 方便实用小菜单 常用的激活（F2）和钝化（ctrl+F2） 材料定义 材料特性值就是定义材料 材料定义有三种方法\n方法一：程序includes 演示 点击适用后按序号显示在左侧窗口\n方法二：用户自定义 演示 方法三：导入现有模型里的材料 演示 导入——.mcb——打开——选择材料（留需要的在右侧）——编号方式 结果可视 截面定义 也是有多种方法\n内嵌数据库 内嵌数据库的截面定义 演示 截面特性值 点击适用\n用户定义 演示 数值 更关心截面特性值 演示 点击计算——计算结果可更改——输入名称——适用\n导入已有模型 文件类型.mcb 不需要的放左边 另：编辑可修改偏心 定义节点定义 横栏节点单元 需要的截图过多，还是看视频吧 最简单的是输入每个节点坐标 较方便的是通过Excel x y z 0.09 0 0 0.795 0 0 然后点击节点表格 具体的操作和其他的方法还是看视频吧 还有一个重排节点序号\n建立单元 单元可以是点线面 可以复制，扩展，分割，镜像（方向xyz，长度就是间距） 对于镜像的单元通过 /修改参数/统一单元坐标轴，参考原单元，xyz 进行方向的统一\n导入CAD的.dxf文件生成相应的单元（导入前统一单位） 选择需要的图层导入 点击适用 定义边界 解释 单个节点约束——前三栏 两个节点连接——弹性刚性 梁两端释放条件——释放/偏心栏目的释放梁端约束，比如铰接滑动滚动\n具体演示 一般支撑 三个平动三个转动一个Rw单梁其自由度，选中节点，勾选进行约束自由度（默认参考整体坐标轴） 节点弹性支撑 类似1，不同在可自行输入弹簧刚度值（自行计算），也可打钩 节点之间 弹性连接 三个平动三个转动 6个约束分量，或直接类型刚性（按照单元坐标系，注意方向） 设置好后选点 刚性连接:选择主节点——设置自由度（or类型）——定义从属节点（善用小菜单栏） 杆端 铰接滑动滚动 勾选要定义的约束分量（相对值和数值）——选择杆件 相对值和数值：传递出去的抗弯刚度为百分比还是定值 比如My=1为完全连接，=0为铰接 定义荷载 分为两步：\n第一步 静力荷载工况 名称类型 第二步 给荷载赋予内容 1.节点荷载 选择要定义的节点，给分量赋值（按照整体坐标系） 2.单元荷载 单元荷载——工况名称——荷载类型——选择单元——数值 相对值——相对于整体的？%位置受到P的？力 均布荷载添加后 3.面荷载 和2大同小异，注意选择对应的单元类型 演示结果 定义自重 civil是通过截面面积、材料容重、单元构建的长度和自重系数四个参数计算自重的 定义自重荷载工况——添加自重——输入自重系数（如Z：-1）——点击添加——结果 当自重作用时考虑结构的容重与材料定义时的容重不同，输入自重容重/材料容重。 比如素混凝土25，自重容重钢筋混凝土26，输入-26/25，点击添加。修改用编辑 定义移动荷载 四个步骤 选择规范 China 定义车道 车道线——线单元模型 偏心距——车轮间距——桥跨（冲击）——车辆移动方向——通过 两点or鼠标点取or单元号 选车道线 偏心距：车道线和建模线的差距，没有为0 对于连续梁，输入最大跨的长 车道面——板单元模型 和线单元大同小异 定义移动荷载 标准车辆（规范） 用户自定 定义移动荷载工况 目的：移动荷载——》车道 ","date":"2020-02-19T00:00:00Z","permalink":"https://96bear.github.io/p/midas%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","title":"Midas学习笔记"},{"content":"环境 picgo nodejs 流程 smms生成一个token 复制下来\nclone插件picgo-plugin-smms-user放入 1 2 %APPDATA%\\picgo\\ //在该目录shift+右键 1 2 npm install ./picgo-plugin-smms-user //回车 最后 重启picgo,图床/SM.MS-登录用户输入token\n如果有不明白欢迎留言或查询官方文档 本文使用的就是smms图床，速度应该还可以\n","date":"2020-02-19T00:00:00Z","permalink":"https://96bear.github.io/p/picgo%E7%BB%93%E5%90%88sm.ms%E5%BF%AB%E6%8D%B7%E4%B8%8A%E4%BC%A0%E5%9B%BE%E5%BA%8A/","title":"picgo结合sm.ms快捷上传图床"},{"content":"手头有个闲置的域名mieoo.com,还有一个闲置的免备案网页空间. 避免资源浪费建立了个人导航,纯静态的,还是半成品.\n传送门:Bear的个人导航\nPS:导航域名出售,有需要请联系bear962464@foxmail.com ","date":"2020-02-17T00:00:00Z","permalink":"https://96bear.github.io/p/bear%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%AF%BC%E8%88%AA/","title":"Bear的个人导航"},{"content":"Chromebook系统为ChromeOS，是Google推出的为网络而生的笔记本，把轻巧便携这个特点展现到了极致。 最开始在考虑入手树莓派的时候无意间在知乎看到有人推广ChromeBook，好奇之下开始调查，越查越是眼睛发亮，我喜欢，我想要，一时冲动就买了一台二手。 最初我看中的是新鲜感，可玩性，使用过程中感觉到续航七八小时实在是舒服，又想学习linux的相关知识，走上了软件方面折腾的不归路，终于把一台快10岁的机子折腾到日常使用的程度。 本子是DELL的Chromebook 11,4+16G，闲鱼200元入手，伊拉克成色，经过折腾感觉性价比还不错。 折腾分为几个阶段(点击即可访问) 拯救伊拉克战损外观 激活熟悉chromeos（罗列使用的插件） 通过crouton安装Ubuntu 初始环境配置 xfce4美化，安装日常软件（等待更新） 系统转移sd卡 伊拉克战损笔记本DELL Chromebook 11物理美化 伊拉克成色 外屏碎裂，键盘缺←掉J，磨损不必多说，但是200元还是挺值得哈\n下面开始物理美化 修复屏幕 一开始想用亚克力板贴在屏幕上代替外屏，后来发现对于我来说实现难度过高，于是购买了一张15.6的高清软膜，经过测量后裁剪高清膜内膜外框（方便粘在屏幕上），也较好的嵌入外边框。\n三面贴膜 因为国内不流行，淘宝商家没有这个模，这次淘宝也不是万能的咯，买了三面14寸（本子13.3），自己动手丰衣足食。\n修复键盘 理由同上，问了很多店铺找不到相同的，自己做了一个超简陋的LOL。\n效果展示 个人评价 6/10分，勉强能带出去不嫌弃丢人现眼了，功能上还算顺手\n激活熟悉chromeos（罗列使用的插件） 关于激活 由于是登录谷歌账号，需要接入万维网，这个就需要八仙过海各显神通了，给出几个建议，更加具体请百度吧：\n通过路由器代理（需要技术）\n局域网ipv4共享ss 需要使用ss，在win本上的ss客户端开启“允许来自局域网的连接”，然后把你的Chromebook和win本连接同一个WiFi，在win本上查看本机在局域网上的IP（win+r，cmd，回车，ipconfig，回车），然后在cb的WiFi设置里启用代理，在“手动配置代理”里面勾选“对所有协议使用相同代理”，然后把你win本的IP输入进去，端口填：1080“，再重连一下cb的WiFi，就可以激活了\n手机软件分享，通过手机热点分享（我用的方法） 使用两个app，主app联万维网，辅助app分享主软件联的网。辅助app下载地址\n登录好google 会自动同步所有的记录，比如书签，密码，扩展，建议在设置同步中关闭同步，避免影响pc端扩展使用。\n推荐插件 下载地址： 谷歌应用商店 应用商店镜像站\nHoxx γPŅ Proxy 联网用的，虽然慢点但还算稳定且免费 Ads Killer Adblocker Plus 就像它的说明：从所有网站中移除广告！ 侧边翻译 选中后在侧边栏进行翻译，适应不需要全文翻译的情况 Evernote Web Clipper 印象笔记一键剪藏插件，个人很喜欢 Tampermonkey 通常叫做油猴，网页神器。建议脚本源Greasy Fork和github 推荐扩展 暂时没找到好用的(^.^)\n通过crouton安装Ubuntu 1.关于crouton Chrome OS系统基于linux内核，crouton安装是基于chroot的。利用crouton可以在Chrome OS系统内装入精简的Ubuntu系统（可自行扩充），这种方式两系统的切换非常方便，crouton文档。 不过注意了，想达到日常使用的程度，机器的硬盘是有限且绝对不够用的，这就是为什么装入的ubuntu是精简的，为什么我要把系统转移到128g的sd卡上——不用担心，对于已经安装在硬盘的系统也可以像我一样把系统转移到便携储存上，具体在后详细叙述。\n2.备份Chrome OS 折腾以前一定要对原Chrome OS系统进行备份 Chrome网上应用商店搜索并下载Chromebook Recovery Utility，准备一个4G以上的U盘插入电脑，根据提示备份（U盘格式化）——话说我没做这一步，没出问题也是幸运。\n3.进入开发者模式 警告: 进入开放模式后，会清除此前硬盘中的所有数据！ 按住Esc键、刷新键和电源按钮——顶部第一个、第四个、最后一个——进入恢复模式。听说有的Chromebook需要切换的物理开发者开关。 恢复屏幕上，按Ctrl+D，同意提示，启动进入开发人员模式。 步骤： 进入恢复模式——按 Ctrl+D——反正不是 Ctrl+D就是Enter，回车重启一次，再Ctrl+D，等一会，上面的进度条走完了之后再自动重启，接下来设置系统语言，开启调试模式(密码记牢了)，就进入开发者模式了。 以后每次开机都需要摁Ctrl+D跳过警告，否则迎接你的是30s后一声刺耳的尖鸣再进入系统——我承认，吓到过我，并且有了心理阴影。\n动手能力强有基础的同学接下来可以参考本文首Crouton官方文档进行自定义安装 以下是我安装时的步骤： 下载crouton请解压后仍然放入Downloads文件夹\nCtrl+Alt+T打开crosh，输入shell并回车\n这一步很关键：Ctrl+ALT+forward，然后登录root,密码之前设置的那个调试密码。之后输入命令chromeos-setdevpasswd 设置新密码，这个就是下一步sudo需要的密码。Ctrl+ALT+back回到浏览器。\n确保CB全局接入万维网（不然可能在安装过程中卡住），输入sudo sh ~/Downloads/crouton -t xfce 输入上一步设置的密码开始安装，如果你想装unity桌面的话也可以sudo sh ~/Downloads/crouton -t unity，之后的教程默认xfce桌面\n安装进行中，网好30分钟，网差一两小时。喝杯咖啡或者泡壶茶，休息一会。如果异常中断试试sudo startxfce能否继续。\n安装的最后要求填入用户名和密码，建议与调试密码一致（非必须一致）\n在shell中\n1 2 3 4 sudo enter-chroot 进入终端 sudo startunity 启动桌面 sudo startxfce4 启动 xfce 桌面 在 Chrome os 和 Linux 之间切换： 从 C 到 L：shift + ctrl + alt + 前进键 从 L 到 C：shift + ctrl + alt + 后退键\n1 2 3 4 ### 其他命令（备用） #### 备份与恢复 默认是存储在/usr/local/chroots/下，每个版本对应一个目录，***如/usr/local/chroots/xenial，所以chrootname为xenial***。 所以chroots的备份和恢复： 备份命令：sudo edit-chroot -b chrootname (生成文件precise-20141230-0321.tar.gz，将该文件mv到Downloads下面即可) 恢复命令:sudo edit-chroot -r chrootname //chrootname: 所安装 ubuntu 的版本代号 删除ubuntu 1 2 sudo delete-chroot chrootname //chrootname: 所安装 ubuntu 的版本代号,详见备份与恢复 crouton 进阶使用 使用 xiwi 先在 chrome 网上应用商店里下载 cronton-integration\n1 2 sudo sh ~/Downloads/crouton -t xfce,extension,xorg,xiwi //我是在 xfce 桌面下使用的 unity 也可行 但要求下载 extension,xorg,xiwi sudo startxfce4 -X xiwi // 使用 xiwi 来实现 窗口化 可以做到左边 chrome 右边 xfce 桌面\n4. 环境配置，xfce4美化，安装日常软件 先看结果 环境配置 进入桌面打开命令行，快捷键ctrl+T没反应的话alt+F3搜索term，建议使用xfce终端\n建议换源 不同版本换的源不同，建议了解后自行更改，不改也可，用国内网apt会比较慢\n首次进入桌面 1 2 sudo apt update sudo apt upgrade 设置中文环境 1 2 3 4 5 sudo apt-get install language-pack-zh-hans language-pack-zh-hans-base language-pack-gnome-zh-hans language-pack-gnome-zh-hans-base sudo apt-get install \u0026amp;#x60;check-language-support -l zh\u0026amp;#x60; sudo localectl set-locale LANG=zh_CN.UTF-8 //重启后生效\n对于中文乱码是空格的情况，安装中文字体解决\n1 sudo apt-get install fonts-droid-fallback ttf-wqy-zenhei ttf-wqy-microhei fonts-arphic-ukai fonts-arphic-uming 卸载不必要的软件 1 2 3 sudo apt-get remove libreoffice-common -y //删除 libreoffice sudo apt-get remove unity-webapps-common -y //删除 amazon sudo apt-get remove thunderbird totem rhythmbox empathy brasero simple-scan gnome-mahjongg aisleriot gnome-mines cheese transmission-common gnome-orca webbrowser-app gnome-sudoku landscape-client-ui-install onboard deja-dup -y 安装常用软件 1 2 3 sudo apt install g++ git unrar unzip vim nano //以上最好安装，以下可选 sudo apt install gedit 主题配置 1 2 3 4 5 6 7 8 9 wget -q -O - http://archive.getdeb.net/getdeb-archive.key | sudo apt-key add - sudo sh -c \u0026amp;#039;echo \u0026amp;quot;deb http://archive.getdeb.net/ubuntu xenial-getdeb apps\u0026amp;quot; \u0026amp;gt;\u0026amp;gt; /etc/apt/sources.list.d/getdeb.list\u0026amp;#039; sudo add-apt-repository ppa:noobslab/themes sudo add-apt-repository ppa:noobslab/icons sudo apt-get update sudo apt-get install ubuntu-tweak -y sudo apt-get install flatabulous-theme -y sudo apt-get install ultra-flat-icons -y sudo apt-get install vpnc git -y xfce4美化等待更新 系统转移sd卡 材料：一个U盘（FAT32格式，其他格式可能出错），sd卡一张（高速，较大容量，作为系统盘）\n1.设置sd卡 插入sd卡，ctrl+alt+t shell\n1 2 3 4 5 6 7 8 9 10 11 12 sudo -i #列出当前所有设备 fdisk -l #找到SD卡，比如我的是/dev/sdc1,将其卸载 umount /dev/sdc1 #把设备格式化成ext4 mkfs.ext4 /dev/sdc1 #添加linux文件夹 mkdir /media/removable/linux #把设备挂载到linux文件夹下 mount /dev/mmcblk1 /media/removable/linux chmod 777 -R /dev /media/removable 2.备份系统 1 2 3 4 5 6 7 8 cd /usr/local/chroots/ #找到安装的linux名 #如/usr/local/chroots/xenial，所以chrootname为xenial sudo edit-chroot -b chrootname #当前目录生成文件xxxxx.tar.gz，将该文件mv到Downloads下面即可 #空间紧张就移动到U盘 #删除原有系统（可选） sudo delete-chroot chrootname 3.恢复系统到SD卡 1 2 #-f指向备份文件，-p指向安装位置（sd卡） sudo sh ~/Downloads/crouton -f mybackup.tar.gz -p /media/removable/linux 4.运行命令 每次重启后都要运行以下命令来启动ubuntu，建议./xxx.sh运行\n1 2 3 4 5 #!/bin/sh sudo umount /dev/sdb1 sudo mkdir /media/removable/linux sudo mount /dev/sdb1 /media/removable/linux sudo media/removable/linux/bin/startxfce4 进入终端把line5改成\nsudo media/removable/linux/bin/enter-chroot\n致谢和资料 感谢几位的无畏折腾和无私奉献，替后来人趟过了各种坑！\nchromebook折腾开发历程——主要参考 ChromeBook 折腾小记 一天一夜chromebook折腾心得 【教程】在SD卡或任意存储设备安装ubuntu14.04+steam游戏——系统转移参考 chromebook激活及通过crouton安装ubuntu——解决sudo密码问题 ","date":"2020-02-12T00:00:00Z","permalink":"https://96bear.github.io/p/chromebook%E6%8A%98%E8%85%BE%E5%85%A8%E6%94%BB%E7%95%A5/","title":"Chromebook折腾全攻略"},{"content":"环境配置 进入桌面打开命令行，快捷键ctrl+T没反应的话alt+F3搜索term，建议使用xfce终端\n建议换源 不同版本换的源不同，建议了解后自行更改，不改也可，用国内网apt会比较慢\n首次进入桌面 1 2 sudo apt update sudo apt upgrade 设置中文环境 1 2 3 4 5 sudo apt-get install language-pack-zh-hans language-pack-zh-hans-base language-pack-gnome-zh-hans language-pack-gnome-zh-hans-base sudo apt-get install \u0026amp;#x60;check-language-support -l zh\u0026amp;#x60; sudo localectl set-locale LANG=zh_CN.UTF-8 //重启后生效\n对于中文乱码是空格的情况，安装中文字体解决\n1 sudo apt-get install fonts-droid-fallback ttf-wqy-zenhei ttf-wqy-microhei fonts-arphic-ukai fonts-arphic-uming 卸载不必要的软件 1 2 3 sudo apt-get remove libreoffice-common -y //删除 libreoffice sudo apt-get remove unity-webapps-common -y //删除 amazon sudo apt-get remove thunderbird totem rhythmbox empathy brasero simple-scan gnome-mahjongg aisleriot gnome-mines cheese transmission-common gnome-orca webbrowser-app gnome-sudoku landscape-client-ui-install onboard deja-dup -y 安装常用软件 1 2 3 sudo apt install g++ git unrar unzip vim nano //以上最好安装，以下可选 sudo apt install gedit 主题配置 1 2 3 4 5 6 7 8 9 wget -q -O - http://archive.getdeb.net/getdeb-archive.key | sudo apt-key add - sudo sh -c \u0026amp;#039;echo \u0026amp;quot;deb http://archive.getdeb.net/ubuntu xenial-getdeb apps\u0026amp;quot; \u0026amp;gt;\u0026amp;gt; /etc/apt/sources.list.d/getdeb.list\u0026amp;#039; sudo add-apt-repository ppa:noobslab/themes sudo add-apt-repository ppa:noobslab/icons sudo apt-get update sudo apt-get install ubuntu-tweak -y sudo apt-get install flatabulous-theme -y sudo apt-get install ultra-flat-icons -y sudo apt-get install vpnc git -y ","date":"2020-02-12T00:00:00Z","permalink":"https://96bear.github.io/p/ubuntu%E6%96%B0%E8%A3%85%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/","title":"ubuntu新装环境配置"},{"content":"先看结果 主题配置 1 2 3 4 5 6 7 8 9 wget -q -O - http://archive.getdeb.net/getdeb-archive.key | sudo apt-key add - sudo sh -c \u0026amp;#039;echo \u0026amp;quot;deb http://archive.getdeb.net/ubuntu xenial-getdeb apps\u0026amp;quot; \u0026amp;gt;\u0026amp;gt; /etc/apt/sources.list.d/getdeb.list\u0026amp;#039; sudo add-apt-repository ppa:noobslab/themes sudo add-apt-repository ppa:noobslab/icons sudo apt-get update sudo apt-get install ubuntu-tweak -y sudo apt-get install flatabulous-theme -y sudo apt-get install ultra-flat-icons -y sudo apt-get install vpnc git -y 返回Chromebook折腾全攻略\n","date":"2020-02-12T00:00:00Z","permalink":"https://96bear.github.io/p/xfce4%E7%BE%8E%E5%8C%96%E5%AE%89%E8%A3%85%E6%97%A5%E5%B8%B8%E8%BD%AF%E4%BB%B6%E7%AD%89%E5%BE%85%E6%9B%B4%E6%96%B0/","title":"xfce4美化，安装日常软件（等待更新）"},{"content":"关于激活 由于是登录谷歌账号，需要接入万维网，这个就需要八仙过海各显神通了，给出几个建议，更加具体请百度吧：\n通过路由器代理（需要技术） 局域网ipv4共享ss 需要使用ss，在win本上的ss客户端开启“允许来自局域网的连接”，然后把你的Chromebook和win本连接同一个WiFi，在win本上查看本机在局域网上的IP（win+r，cmd，回车，ipconfig，回车），然后在cb的WiFi设置里启用代理，在“手动配置代理”里面勾选“对所有协议使用相同代理”，然后把你win本的IP输入进去，端口填：1080“，再重连一下cb的WiFi，就可以激活了 手机软件分享，通过手机热点分享（我用的方法） 使用两个app，主app联万维网，辅助app分享主软件联的网。辅助app下载地址 登录好google 会自动同步所有的记录，比如书签，密码，扩展，建议在设置同步中关闭同步，避免影响pc端扩展使用。\n推荐插件 下载地址： 谷歌应用商店 应用商店镜像站\nHoxx γPŅ Proxy 联网用的，虽然慢点但还算稳定且免费 Ads Killer Adblocker Plus 就像它的说明：从所有网站中移除广告！ 侧边翻译 选中后在侧边栏进行翻译，适应不需要全文翻译的情况 Evernote Web Clipper 印象笔记一键剪藏插件，个人很喜欢 Tampermonkey 通常叫做油猴，网页神器。建议脚本源Greasy Fork和github 推荐扩展 暂时没找到好用的(^.^)\n返回Chromebook折腾全攻略\n","date":"2020-02-12T00:00:00Z","permalink":"https://96bear.github.io/p/%E6%BF%80%E6%B4%BB%E7%86%9F%E6%82%89chromeos%E7%BD%97%E5%88%97%E4%BD%BF%E7%94%A8%E7%9A%84%E6%8F%92%E4%BB%B6/","title":"激活熟悉chromeos（罗列使用的插件）"},{"content":"1.关于crouton Chrome OS系统基于linux内核，crouton安装是基于chroot的。利用crouton可以在Chrome OS系统内装入精简的Ubuntu系统（可自行扩充），这种方式两系统的切换非常方便，crouton文档。 不过注意了，想达到日常使用的程度，机器的硬盘是有限且绝对不够用的，这就是为什么装入的ubuntu是精简的，为什么我要把系统转移到128g的sd卡上——不用担心，对于已经安装在硬盘的系统也可以像我一样把系统转移到便携储存上，具体在后详细叙述。\n2.备份Chrome OS 折腾以前一定要对原Chrome OS系统进行备份 Chrome网上应用商店搜索并下载Chromebook Recovery Utility，准备一个4G以上的U盘插入电脑，根据提示备份（U盘格式化）——话说我没做这一步，没出问题也是幸运。\n3.进入开发者模式 警告: 进入开放模式后，会清除此前硬盘中的所有数据！ 按住Esc键、刷新键和电源按钮——顶部第一个、第四个、最后一个——进入恢复模式。听说有的Chromebook需要切换的物理开发者开关。 恢复屏幕上，按Ctrl+D，同意提示，启动进入开发人员模式。 步骤： 进入恢复模式——按 Ctrl+D——反正不是 Ctrl+D就是Enter，回车重启一次，再Ctrl+D，等一会，上面的进度条走完了之后再自动重启，接下来设置系统语言，开启调试模式(密码记牢了)，就进入开发者模式了。 以后每次开机都需要摁Ctrl+D跳过警告，否则迎接你的是30s后一声刺耳的尖鸣再进入系统——我承认，吓到过我，并且有了心理阴影。\n动手能力强有基础的同学接下来可以参考本文首Crouton官方文档进行自定义安装 以下是我安装时的步骤： 下载crouton请解压后仍然放入Downloads文件夹\nCtrl+Alt+T打开crosh，输入shell并回车\n这一步很关键：Ctrl+ALT+forward，然后登录root,密码之前设置的那个调试密码。之后输入命令chromeos-setdevpasswd 设置新密码，这个就是下一步sudo需要的密码。Ctrl+ALT+back回到浏览器。\n确保CB全局接入万维网（不然可能在安装过程中卡住），输入sudo sh ~/Downloads/crouton -t xfce 输入上一步设置的密码开始安装，如果你想装unity桌面的话也可以sudo sh ~/Downloads/crouton -t unity，之后的教程默认xfce桌面\n安装进行中，网好30分钟，网差一两小时。喝杯咖啡或者泡壶茶，休息一会。如果异常中断试试sudo startxfce能否继续。\n安装的最后要求填入用户名和密码，建议与调试密码一致（非必须一致）\n在shell中\n1 2 3 4 sudo enter-chroot 进入终端 sudo startunity 启动桌面 sudo startxfce4 启动 xfce 桌面 在 Chrome os 和 Linux 之间切换： 从 C 到 L：shift + ctrl + alt + 前进键 从 L 到 C：shift + ctrl + alt + 后退键\n1 2 3 4 ### 其他命令（备用） #### 备份与恢复 默认是存储在/usr/local/chroots/下，每个版本对应一个目录，***如/usr/local/chroots/xenial，所以chrootname为xenial***。 所以chroots的备份和恢复： 备份命令：sudo edit-chroot -b chrootname (生成文件precise-20141230-0321.tar.gz，将该文件mv到Downloads下面即可) 恢复命令:sudo edit-chroot -r chrootname //chrootname: 所安装 ubuntu 的版本代号 删除ubuntu 1 2 sudo delete-chroot chrootname //chrootname: 所安装 ubuntu 的版本代号,详见备份与恢复 crouton 进阶使用 使用 xiwi 先在 chrome 网上应用商店里下载 cronton-integration\n1 2 sudo sh ~/Downloads/crouton -t xfce,extension,xorg,xiwi //我是在 xfce 桌面下使用的 unity 也可行 但要求下载 extension,xorg,xiwi sudo startxfce4 -X xiwi // 使用 xiwi 来实现 窗口化 可以做到左边 chrome 右边 xfce 桌面\n返回Chromebook折腾全攻略\n","date":"2020-02-12T00:00:00Z","permalink":"https://96bear.github.io/p/%E9%80%9A%E8%BF%87crouton%E5%AE%89%E8%A3%85ubuntu/","title":"通过crouton安装Ubuntu"},{"content":" 伊拉克成色 外屏碎裂，键盘缺←掉J，磨损不必多说，但是200元还是挺值得哈\n下面开始物理美化 修复屏幕 一开始想用亚克力板贴在屏幕上代替外屏，后来发现对于我来说实现难度过高，于是购买了一张15.6的高清软膜，经过测量后裁剪高清膜内膜外框（方便粘在屏幕上），也较好的嵌入外边框。\n三面贴膜 因为国内不流行，淘宝商家没有这个模，这次淘宝也不是万能的咯，买了三面14寸（本子13.3），自己动手丰衣足食。\n修复键盘 理由同上，问了很多店铺找不到相同的，自己做了一个超简陋的LOL。\n效果展示 个人评价 6/10分，勉强能带出去不嫌弃丢人现眼了，功能上还算顺手\n返回Chromebook折腾全攻略\n","date":"2020-02-12T00:00:00Z","permalink":"https://96bear.github.io/p/%E4%BC%8A%E6%8B%89%E5%85%8B%E6%88%98%E6%8D%9F%E7%AC%94%E8%AE%B0%E6%9C%ACdell-chromebook-11%E7%89%A9%E7%90%86%E7%BE%8E%E5%8C%96/","title":"伊拉克战损笔记本DELL Chromebook 11物理美化"},{"content":"// JavaScript初学笔记1 // 打印 定义 运算符\n// 打印 // log(\u0026ldquo;helloword\u0026rdquo;);\n// var let const // var a=10;//var 全局变量 // let b=11;//let 局部变量 // const c=20;//const 常量 // log(a,b,c);\n// 简单运算符：+-*/=\u0026gt;\u0026lt;%等 // 关系运算符：\u0026amp;\u0026amp; || // 自加等和C一致 //注意=== /* //Examples 1 const right=\u0026ldquo;成功\u0026rdquo;,misktake=\u0026ldquo;失败\u0026rdquo;; var a=1,b=3; var result=a+b; log(result);//计算赋值\n//几句简单判断 if(a===b) log(right); else log(misktake);\nif(a==b) log(right); else log(misktake);\nif(a\u0026amp;\u0026amp;b) log(right); else log(misktake);\nif(a||b) log(right); else log(misktake);\nvar result1=a++; log(result1); log(a);//观察变化 var result2=++b; log(result2);//++在后先赋值后自增 */\n// test 1 0 true false /* if(1\u0026amp;\u0026amp;0) log(\u0026ldquo;right\u0026rdquo;); else log(\u0026ldquo;misktake\u0026rdquo;); */ /* if(true||false) log(\u0026ldquo;right\u0026rdquo;); else log(\u0026ldquo;misktake\u0026rdquo;); */ /* if(true\u0026amp;\u0026amp;1) log(\u0026ldquo;right\u0026rdquo;); else log(\u0026ldquo;misktake\u0026rdquo;); */\n//test sanyuan /* var a=1,b=2; log(a\u0026gt;b?1:2); */\n","date":"2019-12-25T00:00:00Z","permalink":"https://96bear.github.io/p/javascript%E5%88%9D%E5%AD%A6%E7%AC%94%E8%AE%B01%E6%89%93%E5%8D%B0-%E5%AE%9A%E4%B9%89-%E8%BF%90%E7%AE%97%E7%AC%A6/","title":"JavaScript初学笔记1||打印 定义 运算符"},{"content":"// JavaScript初学笔记2||定义类型 取整 循环 // var a=\u0026ldquo;helloword你好！\u0026rdquo;;//字符 // var b=10;//number // var c=true;//boolean true flase\n/* var number=8.5; var result=Math.trunc(number);//取整，理解为C强制int型 log(result); var result1=Math.floor(number);//下退 log(result1); var result2=Math.ceil(number);//上进,点后除零都进一 log(result2); var result31=Math.round(number);//四舍五入 log(result31); var result32=Math.round(number-0.01);//四舍五入,可在函数中运算 log(number-0.01);//打印8.49 log(result32); */\n/* //随机数2方法 var result41=Math.random();//0-1随机浮点数 log(result41); var result42=Math.trunc(Math.random()*100);//尝试取需要的位数1-100 log(result42);//成功，猜测是否存在0和1？\nrandom(1,10) //可能重复*/\n//初学者的尝试↓ /* for(var i=0;i\u0026lt;15;i++) { var m=random(1,10); log(m); if(m\u0026gt;9) { sleep(1000); log(\u0026ldquo;sleep(1000)\u0026rdquo;); } } */\n//循环 //if语句switch语句同C语言； //switch 关键 switch变量 case： break default\n","date":"2019-12-25T00:00:00Z","permalink":"https://96bear.github.io/p/javascript%E5%88%9D%E5%AD%A6%E7%AC%94%E8%AE%B02%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B-%E5%8F%96%E6%95%B4-%E5%BE%AA%E7%8E%AF/","title":"JavaScript初学笔记2||定义类型 取整 循环"},{"content":"// JavaScript初学笔记3||循环 数组 冒泡排序\n/* for(;;) log(\u0026ldquo;LOL\\n\u0026rdquo;); */ /* while(true) log(\u0026ldquo;LOL\\n\u0026rdquo;); */ /* do log(\u0026ldquo;LOL\\n\u0026rdquo;); while(true); */ /* var a=3 for(;;) log(\u0026ldquo;LOL\\n\u0026rdquo;+a);//log的复合打印写法 和 牛X的不加;也能运行 */\n/* var number =[1,2,3,4,5,6]; //数组的表示 /* log(number[0],number[1]+number[2]);//尝试输出1 5 log(number[0],number[1],number[2]);//right log(number.length);//length */ /* for(let count=0;count\u0026lt;number.length;count++) log(number[count]); //以上二者的结合*/\n// number.push(100);//数组放入 // number.shift();//删除左侧第一个 队列先进先出? // number.pop();//删除右侧最后一个 所以什么结构？*/ //log(number) /* var messages=\u0026ldquo;hello|world\u0026rdquo;; var result=messages.split(\u0026quot;|\u0026quot;); log (result[0]+\u0026quot;\\n\u0026quot;); log (result[1]);//转为了两个小的字符串，分别存入 好奇内在 */\n/* //由大到小冒泡排序 var number =[16,23,3,48,15,46,75,123,54,11,2,8,33]; //while(number.length===100)number.push(random(1,140)); //var kk=number.length; for(let i=0;i\u0026lt;number.length-1;i++) { //for(let j=0;j\u0026lt;kk-1;j++)//kk的自减可以改成 for(let j=0;j\u0026lt;number.length-1-i;j++) { if(number[j]\u0026lt;number[j+1])//如果小到大这里改为\u0026gt; {let a=number[j]; number[j]=number[j+1]; number[j+1]=a; } } } log(number); */\n","date":"2019-12-25T00:00:00Z","permalink":"https://96bear.github.io/p/javascript%E5%88%9D%E5%AD%A6%E7%AC%94%E8%AE%B03%E5%BE%AA%E7%8E%AF-%E6%95%B0%E7%BB%84-%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/","title":"JavaScript初学笔记3||循环 数组 冒泡排序"},{"content":"\n开个坑学习JavaScript，目标是使用autojs制作手机脚本，本文作为开篇日后添加后文目录。\nJavaScript初学笔记1||打印 定义 运算符 JavaScript初学笔记2||定义类型 取整 循环 JavaScript初学笔记3||循环 数组 冒泡排序 ","date":"2019-12-25T00:00:00Z","permalink":"https://96bear.github.io/p/%E5%BC%80%E7%AF%87%E5%AD%A6%E4%B9%A0javascript%E8%AE%B0%E5%BD%95/","title":"开篇：学习JavaScript记录"},{"content":"红手指是一种虚拟安卓手机. 原理类似电脑云主机. 是一个付费软件. 我主要用来游戏挂机和安装垃圾软件(比如淘宝之类). 这个平台不让带\u0026quot;多开/双开/分身\u0026quot;之类的软件安装.↓ (虽然root, 也破解了签名校验, 但是System是锁区的)\n前几天发现一个方法可以绕过限制, 正常安装多开类软件. 需要用到MT文件管理器2.\n先把MT和多开软件通过网盘或者其它什么方式下载到红手指云手机上, 安装好.\n点要改的apk, 再点查看. ↓\n点开arsc文件, 打开方式选Arsc编辑器, ↓\n搜索字符串, 注意这里搜索的, 就是软件的名称(不是包名).\n修改一下↓ 然后右上角点菜单 - 保存\n一直往后返回, 会提示是否更新, 点确定↓\n这时你要是安装会提示失败, 是因为包名还没有改, 红手指把包名也加进黑名单了.\n下面改包名. 点开AndroidManifest.xml, 选择字符常量池.↓\n找到包名(这个自己根据常识找)↓\n把包名改掉. 注意为了避免其它问题, 最好改成相同位数的, 比如\ncom.bly.dkplat\ncom.aaa.aaaaaa\n也是保存, 更新文件.↓\n现在安装还是会出现问题, 因为没有签名, 再点开apk, 选功能. 先来一遍RES资源混淆(不知道会不会给程序猿制造障碍反正我是习惯加个密), 混淆会自动签名, 所以就不用点APK签名了. 生成的安装包带一个 文件名_r.apk 的后缀. 现在点开安装.\n运行一下↓\n*软件如果加了自校验, 此方法可能不适用.\n作者：chermy\n链接：https://www.jianshu.com/p/7b66f316b45a\n来源：简书\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n","date":"2019-12-25T00:00:00Z","permalink":"https://96bear.github.io/p/%E6%89%8B%E6%8C%87%E5%AF%B9%E4%BA%8E%E5%A4%9A%E5%BC%80%E8%BD%AF%E4%BB%B6%E7%9A%84%E9%99%90%E5%88%B6-%E7%A6%81%E6%AD%A2%E5%AE%89%E8%A3%85%E5%A4%9A%E5%BC%80%E8%BD%AF%E4%BB%B6-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/","title":"手指对于多开软件的限制 禁止安装多开软件 解决方法"},{"content":"以前从来不重视评论过滤，直到有一天被盯上，邮箱疯狂推送某种违法物品的宣传广告评论我才意识到不对。\n正经的备案，真的不能放任不管\nWordpress自带垃圾评论过滤Akismet Anti-Spam还是比较有效的，这是个免费的插件。\n使用插件需要注册账号申请一个api，很简单三分钟的事，安装后（一般自带）点击设置跟随指示做就好。\n注意申请时可以选择免费个人版！\n设置页面\n","date":"2019-12-22T00:00:00Z","permalink":"https://96bear.github.io/p/wordpress%E8%87%AA%E5%B8%A6%E5%9E%83%E5%9C%BE%E8%AF%84%E8%AE%BA%E8%BF%87%E6%BB%A4akismet-anti-spam/","title":"Wordpress自带垃圾评论过滤Akismet Anti-Spam"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #include\u0026lt;stdio.h\u0026gt; int main() { int score; printf(\u0026#34;Please input ur score\\n\u0026#34;); scanf(\u0026#34;%d\u0026#34;,\u0026amp;score); if(score\u0026gt;100||score\u0026lt;0) {printf(\u0026#34;error!\\n\u0026#34;); return 0; } score/=10; switch(score) { case 10:printf(\u0026#34;A\\n\u0026#34;);break; case 9:printf(\u0026#34;A\\n\u0026#34;);break; case 8:printf(\u0026#34;B\\n\u0026#34;);break; case 7:printf(\u0026#34;C\\n\u0026#34;);break; case 6:printf(\u0026#34;D\\n\u0026#34;);break; default:printf(\u0026#34;E\\n\u0026#34;);break; } return 0; } ","date":"2019-11-20T00:00:00Z","permalink":"https://96bear.github.io/p/score-to-grade/","title":"Score to grade"},{"content":"\n很皮的2233。详情点击传送门\n犬\u0026rsquo;s Blog\n","date":"2019-11-18T00:00:00Z","permalink":"https://96bear.github.io/p/live2d-%E7%9C%8B%E6%9D%BF%E5%A8%98/","title":"Live2D 看板娘"},{"content":"结合语音更容易记忆\n1桥梁建设分哪些阶段?\n桥梁建设一般要经过规划、勘察、设计和施工阶段。(主要包括施工技术和施工组织)p1\n2现代大型桥梁施工设备和机具设备主要有?\n(1)各种常备式结构(例如万能杆件、贝雷梁、六四式军用梁等);\n(2)各种起重机具设备(例如千斤顶、吊机等);\n(3)混凝土施工设备(例如搅拌机、输送泵、振捣设备等);\n(4)预应力施工设备(锚具、张拉千斤顶)。\n常备式结构有?\n钢板桩、脚手架(扣件式、碗扣式、门式脚手架)、拼装式模板、万能杆件(由角钢和连接\n板组成,用螺栓连接的桁架杆件)、贝雷梁。P14\n3高墩施工常用方法?\n滑升模板施工、翻板式模板施工、爬升式模板施工。P120\n4沉井钢套箱下不去有哪些辅助措施?\n加压、抽水、炮振、射水、泥浆套、空气幕。P84\n5预应力混凝土简支梁施工方法?\n先张法、后张法、混凝土简支梁整孔架设p142\n混凝土连续梁施工方法?\n膺架法、先简支后连续法、移动支架法、模架逐孔施工法、顶推法和悬臂法、p163\n6拱桥常用施工方法?\n就地浇筑法、支架施工法、缆索吊装法、转体法、劲性骨架施工法、悬臂施工法p198\n有支架施工:满布式拱架法,拱式拱架法,混合式拱架法,支架横移法刚性骨架法。\n无支架施工:转体法施工(平面转体、竖向转体平竖结合转体)、悬臂法施工、悬臂桁架\n法拼装、塔架斜拉索法。P206\n7预应力混凝土梁四大工程?\n钢筋、混凝土、预应力、预制拼装。\n8预应力结构:在结构承受外荷载之前,预先对其在外荷载作用下的受拉区施加压应力,以\n改善结构使用性能。\n预应力钢结构的四大种类①传统结构型②吊挂结构型③整体加拉型④张拉金属膜型\n波纹管的类型波纹管主要包括金属波纹管、波纹膨胀节、波纹换热管、膜片膜盒和金属软\n管等。\n先张法:是在浇筑混凝土前张拉预应力筋并将其临时锚固在张拉台座上,然后立模板浇筑\n混凝土,待混凝土达到规定强度(70%),逐渐将预应力筋放松。(先张法生产可采用台座\n法和流水机组法)\n后张法:先制作留有预应力筋孔道的梁体,待其混凝土达到规定强度后,再在孔道内穿入预\n应力筋,进行张拉并锚固,最后进行孔道压浆并浇筑梁端封头混凝土。(成孔方法:在浇筑\n混凝土梁体前,须在预应力筋的设计位置先安放制孔器,以便在梁体制成后在梁内形成孔道)\np142\n张拉设备:锚具、液压千斤顶、高压油泵。P42\n9悬臂施工方法悬臂施工方法也称为分段施工法。它是以桥墩为中心向两岸对称的、逐节悬\n臂接长的施工方法。其主要特点有:\n(1)在跨间不需要搭设支架。\n(2)施工期间可不影响桥下通航或行车。\n(3)能减少施工设备,简化施工工序。\n(4)对每个墩有两个工作面平行作业。\n(5)悬臂施工法充分利用预应力混凝土悬臂结构承受负弯矩能力强的特点,将跨中正弯\n矩转移为支点负弯矩,使桥梁的跨越能力提高。\n(6)悬臂施工用的悬拼吊机或挂篮设备可重复使用,施工费用较省,可降低工程造价。\n25拱桥的主要施工方法就地浇筑法、支架施工法、悬臂施工法、缆索吊装法、转体法和劲\n性骨架法。\n悬臂灌注法:又称无支架平衡伸臂法或挂篮法,所用主要设备是挂篮。为了拼制挂篮,在墩\n柱梁两侧常先采用托架支撑,灌注一定长度的梁段,这个长度称为起步长度,以此节点为起\n点,通过挂篮的前移,对称地向两侧跨中逐段灌注混凝土,并施加预应力,如此循环作业。\n(挂篮是桥梁悬臂浇筑施工的主要设备,通常由五部分组成,依次是主桁架,提吊系统,\n模板系统,走行系统,锚固系统。)\n悬臂拼装法:主要包括梁体节段的预制、移位存放、运输;梁段起吊拼装;悬拼梁体体系\n转换;合拢段施工。(悬拼按照起重吊装方式的不同可分为:浮吊悬拼、牵引滑轮组悬拼、\n连续千斤顶悬拼、缆索起重机悬拼。悬拼的核心是梁的吊运与拼装,梁体节段的预制是悬拼 的基础)\n10钻孔桩施工的主要工序:场地准备、埋设护筒、制备泥浆、钻孔、清孔、钢筋笼入孔和\n浇筑水下混凝土等。\n泥浆护壁的工作原理:充填于钻孔内的泥浆比重比地下水大,且通常保持孔内泥浆液面略高\n于孔外地下水位。故孔内泥浆的液柱压力既足以平衡孔外地下水压而成为孔壁土体的一种\n液态支撑,又促使泥浆渗入孔壁土体并在其表面形成一层细密而透水性很小的泥皮,从而维\n护了孔壁的稳定。在钻孔桩施工中,泥浆除起护臂作用之外,还起悬浮钻碴、润滑钻具作用,\n有利于钻进,在正循环钻孔时还起了排碴作用。\n用什么拌泥浆:由黏土和水拌和而成。\n要求:造浆的黏土应采用膨润土,水的ph值应在7-8即呈中性,并且不含杂质,泥浆比重\n达1.05-1.15,粘度18-22P72\n11预应力张拉实行双控:\n张拉的双控不是指两端张拉,而是指控制张拉应力和控制钢绞线的张拉伸长值,以控制张\n拉应力为主,用钢绞线的伸长线做校核\n预应力张拉的智能张拉:\n智能张拉是指不依靠工人手动控制,而利用计算机智能控制技术,完成钢绞线的张拉施工\n千斤顶拉力的大小可由油泵压力表的读数直接显示。\n智能压浆:\n智能压浆技术一般来说都是采用计算机来操控整个压浆过程。\n浆液循环的方式:将管道内的空气杂质排除,完全不需要人工来开泵以及补压等操作。精\n准的比例控制以及自动调节功能都在里面操控,自动记录压浆数据以及压浆时间,能够确保\n压浆饱满密实,能够有效提高施工的耐久度。\n12底模和侧模的受力?\n竖向荷载:模板及支架密度、新浇混凝土密度、钢筋混凝土的密度、人及运输设备、振捣混 凝土产生的荷载、滑升模板与混凝土之间的摩阻力。\n水平荷载:新浇混凝土对模板的侧向压力倾倒混凝土时因振动产生的水平荷载。P108\n13沉井的施工方法:按下沉方法,沉井可分为就地下沉沉井和浮运沉井两类。(泥浆润滑\n套沉井工法、空气幕沉井工法、ss沉井工法)\n沉井结构主要由套井、井壁、刃脚组成\n(1)井壁沉井的外壁,是沉井的主要部分;\n(2)刃脚:井壁下端一般都做成刀刃状的“刃脚”,其功能是减少下沉阻力;\n(3)隔墙:设置在沉井井筒内,其主要作用是增加沉井在下沉过程中的刚度;\n(4)凹槽:设置在刃脚上方井壁内侧,其作用是使封底混凝土和底板与井壁间有更好的联\n结,以传递基地反力;\n(5)封底:当沉井下沉到设计标高,经过技术检验并对井底清理整平后,即可封底以防止\n地下水渗入井内;\n(6)顶盖井顶浇筑钢筋混凝土顶盖,待顶盖达到设计强度后方可砌筑墩。\n沉井倾斜的原因?\n(1)沉井制作时基坑底下土层或其下卧土层支承强度不够或地基软硬不均匀如有暗浜、大型 障碍物等;\n(2)砂垫层厚度不够或施工质量差(不密实、不均匀、被地下水浸泡等)致使其支撑强度达不到\n要求;\n(3)多次下沉的沉井接高时刃脚入土深度少,或井内水浮力不够或井底及其下卧土层支撑强\n度不够;\n(4)沉井制作高度偏大井身较小重心过高;(5)刃脚下承垫枕木末对称均匀地抽出或末及时填\n塞好枕木抽出后的空隙;\n沉井纠偏的方法?\n1)偏除土纠偏②井顶施加水平力,在低的一侧刃脚下加设支垫纠偏③井顶施加水平力、\n井外射水、井内偏除土纠偏④增加偏土压纠偏⑤沉井位置扭转的纠正\n14桥梁围堰的形式土石围堰、板桩围堰、钢套箱围堰和双壁围堰\n桥梁围堰的适用范围?\n土石围堰:一般适用于水深在2m以内,流速小于0.3米/s,冲刷作用很小,且河床为渗水\n性较小的土。\n板桩围堰:1钢板桩围堰:钢板桩本身强度大、防水性能好,打入土的穿透力强,不但能穿\n过砾石、卵石层,也能切入软岩层和风化层,一般河床水深在4-8m且为较软岩层时最为适\n用。2钢筋混凝土板桩围堰:适用于深水或深基坑,流速较大的砂类土、黏质土和碎石河\n床\n钢套箱围堰:、适用于流速较小、覆盖层较薄、透水性较强的砂砾或岩石深水河床\n双壁围堰:大型河流的深水基础,覆盖层较薄、平坦的岩石河床p54\n围堰的施工工序:施工准备、导框安装、插打与合拢、抽水堵漏及拔桩整理。\n15桥梁施工的临时结构举例:如支架、栈桥、模板、围堰结构。挂篮。\n临时结构设计步骤:收集资料,现场勘查,结构设计\n16转动体系组成:上转轴、下转盘、拱箱、扣索。\n转体法施工时将拱圈或整个上部结构分成两个半跨,分别在河的两岸利用地形或简单支架灌 注或预制装配成半拱。然后,利用动力装置将两个半拱转动至桥轴线位置上或设计标高合拢 成拱。它适用于各类单孔拱桥的施工,也适用于梁桥、斜拉桥和斜腿刚构桥等各种不同类型 桥梁的施工中。\n17预拱度考虑的因素?\na支架拆除后上部构造本身及活载一半所产生的挠度;\nb支架在荷载作用下的弹性变形;\nc支架在荷载作用下的非弹性变形;\nd支架基础在荷载作用下的非弹性沉陷;\ne由混凝土收缩及温度变化而引起的挠度。\n18多孔的连拱在特殊环境下用什么方法施工(同时进行浇筑时用支架法比较好)\n19挂篮通常都由以下几部分组成:承重梁、悬吊模板、锚固装置、走行系统和工作平台。\n20悬臂施工为了承受施工过程可能出现的不平衡力矩需要采取措施保证梁体稳定(1)在\n墩旁搭设临时塔架90(或托架)。塔架顶设置千斤顶用以支撑墩顶梁段(2)将墩顶的阶\n段与桥墩临时固结起来\n21钻孔桩施工的主要工序:场地准备、埋设护筒、制备泥浆、钻孔、清孔、钢筋笼入孔和\n浇筑水下混凝土。钻孔方法:冲击法、冲抓法和旋转\n","date":"2019-11-18T00:00:00Z","permalink":"https://96bear.github.io/p/%E6%A1%A5%E6%A2%81%E6%96%BD%E5%B7%A5%E4%B8%8E%E7%9B%91%E6%B5%8B/","title":"桥梁施工与监测"},{"content":"格式：\n题目 答案 1、2018年国内生产总值总量突破_______万亿元。\n90\n2、2019年国务院政府工作报告强调，要持续推进污染防治，今年二氧化硫、氮氧化物排放量下降（）\n3%\n3、2019年国务院政府工作报告强调，要深入推进简政减税减费。取消一批行政许可事项，“证照分离”改革在全国推开，企业开办时间大幅压缩，工业生产许可证种类压减___以上。\n三分之一\n4、政协委员的主要职能是：\n参政议政\n5、中华人民共和国最高权力机关是：\n全国人民代表大会\n6、下列哪项机构可以行使国家立法权：\n人大常务委员会\n7、下列有关两会的说法错误的是：\n全国政协委员提出的是“议案”\n8、下列习近平总书记位围绕改革开放表示正确的选项有（）\n伟大觉醒孕育了我们党从理论到实践的伟大创造#改革开放是我们党的一次伟大觉醒#伟大革命推动了中国特色社会主义事业的伟大飞跃#改革开放是中国人民和中华民族发展史上一次伟大革命\n9、下列关于改革开放重要性表述正确的选项有（）\n是党和人民大踏步赶上时代的重要法宝#是决定当代中国命运的关键一招#是坚持和发展中国特色社会主义的必由之路#是决定实现‘两个一百年’奋斗目标、实现中华民族伟大复兴的关键一招\n10、党中央提出全面深化改革的总目标是（）\n完善和发展中国特色社会主义制度#推进国家治理体系和治理能力现代化\n11、下列关于改革开放40年积累的宝贵经验表述正确的选项有（）\n必须坚持以人民为中心，不断实现人民对美好生活的向往#必须坚持党对一切工作的领导，不断加强和改善党的领导#必须坚持走中国特色社会主义道路，不断坚持和发展中国特色社会主义#必须坚持马克思主义指导地位，不断推进实践基础上的理论创新\n12、下列关于改革开放40年现实启迪表述正确的选项有（）\n方向决定前途，道路决定命运#创新是改革开放的生命#开放带来进步，封闭必然落后#制度是关系党和国家事业发展的根本性、全局性、稳定性、长期性问题\n13、改革开放40年来，我国以（ ）为主导的有计划有组织的扶贫开发，尤其是党的十八大以来精准脱贫方略的实施，为全球减贫事业提供了中国方案和中国经验。\n政府\n14、改革开放40年来，我国减贫人口占全球减贫超过（ ），对全球减贫作出了巨大贡献。\n70%\n15、2017年，贫困地区农村居民人均可支配收入9377元，名义水平是2012年的1.8倍，五年年均增长（ ）。\n12.4%\n16、习近平强调，深入实施东西部扶贫协作，重点攻克深度贫困地区脱贫任务，确保到（ ）我国现行标准下农村贫困人口实现脱贫，贫困县全部摘帽，解决区域性整体贫困，做到脱真贫、真脱贫。\n2020年\n17、要把（ ）扶贫作为脱贫基本途径，针对致贫原因和贫困人口结构，加强和完善保障性扶贫措施，造血输血协同，发挥两种方式的综合脱贫效应。\n开发式\n18、《中共中央国务院关于打赢脱贫攻坚战三年行动的指导意见》要求，要确保实现贫困地区（ ）增长幅度高于全国平均水平。\n农民人均可支配收入\n19、2018年中央经济工作会议召开的时间是（ ）\n2018年12月19日至21日\n20、2019年经济工作的总基调是（ ）\n坚持稳中求进\n21、2019年经济工作的主线是（ ）\n供给侧结构性改革\n22、全面建成小康社会的底线任务是（ ）\n打赢脱贫攻坚战\n23、加强农村工作队伍建设的要求是（ ）\n懂农业#爱农村#爱农民\n24、2019年经济工作在要（ ）八个字上下功夫\n巩固、增强、提升、畅通\n25、狭义的“五四”是指（ ）。\n1919年5月4日的政治运动\n26、广义的“五四”是指（ ）。（1）思想启蒙 （2）文学革命 （3）政治抗议\n（1）（2）（3）\n27、晚清时期的国家观念，以西方政治学思想理论为核心，主要是（ ）。\n国家有机体论\n28、1914年陈独秀在《甲寅》发表（ ）一文，明确提出：“盖保民之国家，爱之宜也，残民之国家，爱之也何居。”\n《爱国心与自觉心》\n29、新文化运动时期，成为新的主流国家观的是（ ）。\n功利主义的国家观\n30、陈独秀认为，五四运动虽然是爱国救国运动，但与以前的爱国运动不同，有其独特的精神，乃是（ ）。\n“直接行动”和“牺牲精神”\n31、习近平强调，40年的实践充分证明，（ ）是党和人民大踏步赶上时代的重要法宝，是坚持和发展中国特色社会主义的必由之路，是决定当代中国命运的关键一招，也是决定实现“两个一百年”奋斗目标、实现中华民族伟大复兴的关键一招。\n改革开放\n32、习近平指出，改革开放铸就的伟大（ ），极大丰富了民族精神内涵，成为当代中国人民最鲜明的精神标识！\n改革开放精神\n33、改革开放40年极大改变了中国的面貌、中华民族的面貌、中国人民的面貌、中国共产党的面貌，（ ）。　①中华民族迎来了从站起来、富起来到强起来的伟大飞跃！②中国特色社会主义迎来了从创立、发展到完善的伟大飞跃！③中国人民迎来了从温饱不足到小康富裕的伟大飞跃！④中国迎来了从社会主义初级阶段到社会主义高级阶段的伟大飞跃！\n①②③\n34、（ ）是五四运动以来我国发生的三大历史性事件，是近代以来实现中华民族伟大复兴的三大里程碑。①抗战胜利②建立中国共产党③成立中华人民共和国④推进改革开放和中国特色社会主义事业\n②③④\n35、习近平强调，（ ）是我们党的一次伟大觉醒，正是这个伟大觉醒孕育了我们党从理论到实践的伟大创造。\n改革开放\n36、改革开放40年的实践启示我们：（ ）是中国特色社会主义最本质的特征，是中国特色社会主义制度的最大优势。\n中国共产党的领导\n37、教育的首要问题是（ ）。\n培养什么人\n38、（ ）是评价教师队伍素质的第一标准。\n师德师风\n39、我国大学最鲜亮的底色是（ ）。\n马克思主义\n40、关于教育，古今中外，思想流派繁多，理论观点各异，但在教育要培养什么人这个问题上却有着广泛的共识。具体来说，教育就是要培养（ ）、制度运行所要求的人。\n知识积累#文化传承#社会发展#国家存续\n41、社会主义教育的根本任务是（ ）。\n培养社会主义建设者和接班人#立德树人\n42、美国在贸易政策上的变化（ ）\n公平贸易\n43、美国优先战略的影响（ ）\n并不一定使得美国重新伟大#主要是负面的#在国内存在争议\n44、以下判断错误的是（ ）\n中国应该另起炉灶#美国优先只会对世界经济造成影响\n45、美国优先实际上就是美国唯一。\n对\n46、美国优先本质上是提高美国自己的实力。\n对\n47、美国优先战略必将导致世界大战。\n错\n48、回顾历史，中非合作大致是从何时开启的（ ）\n1950年代\n49、2014年5月，李克强总理访非期间提出“461”中非合作框架，主要是指（ ）\n四项合作原则、六大合作工程和一个合作平台\n50、中国对非援助提供的无偿援助和无息贷款，主要用于以下哪个领域（ ）\n民生领域\n51、中非双方共同拥有的宝贵历史财富是（ ）\n中非传统友谊\n52、中国的对非政策具体包涵以下哪些理念？（ ）\n诚#实#亲#真\n53、新形势下中非合作的历史基调是？（ ）\n中非合作是互利合作#中非合作是开放的、包容的#中非合作是全方位的合作#中非是新型战略伙伴关系\n","date":"2019-10-28T00:00:00Z","permalink":"https://96bear.github.io/p/2019%E6%99%BA%E6%85%A7%E6%A0%91%E7%9F%A5%E9%81%93app-%E5%BD%A2%E5%8A%BF%E4%B8%8E%E6%94%BF%E7%AD%96-%E9%A2%98%E7%9B%AE%E4%B8%8E%E7%AD%94%E6%A1%88/","title":"2019智慧树|知道APP 形势与政策 题目与答案"},{"content":"安装前的准备： 用户名不含中文字符 Windows 7 SP1+ / Windows Server 2008+ PowerShell 3+ .NET Framework 4.5+\n若Powershell或.NET Franmework版本过旧，更新后重启即可。\n若不清楚版本号，可Win+R运行powershell，输入以下命令获取版本号。 $PSVersionTable.PSVersion.Major #查看Powershell版本 $PSVersionTable.CLRVersion.Major #查看.NET Framework版本\n安装scoop： 1 2 Set-ExecutionPolicy RemoteSigned -scope CurrentUser iex (new-object net.webclient).downloadstring(\u0026#39;https://get.scoop.sh\u0026#39;) 如果下载scoop的过程中断，那么必须先删除(C:\\Users\\scoop)文件夹，再执行以上命令安装。\n下载完成后，输入scoop出现如下帮助即安装成功。\n安装成功 输入scoop获取帮助 ","date":"2019-10-28T00:00:00Z","permalink":"https://96bear.github.io/p/scoopwindows%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/","title":"scoop—Windows命令行包管理工具"},{"content":"\n示例\n代码:\n1 echo \u0026#34;网址|文本\u0026#34; |curl -F-=\\\u0026lt;- qrenco.de ","date":"2019-10-28T00:00:00Z","permalink":"https://96bear.github.io/p/%E5%B0%8F%E6%8A%80%E5%B7%A7termux%E6%89%93%E5%8D%B0%E4%BA%8C%E7%BB%B4%E7%A0%81/","title":"小技巧:termux打印二维码"},{"content":"Clang是一个C语言、C++、Objective-C语言的轻量级编译器。源代码发布于BSD协议下。Clang将支持其普通lambda表达式、返回类型的简化处理以及更好的处理constexpr关键字。\n1 本文可直接wget得到，配合tmux使用体验更佳。（文章末尾） 编译命令：\ngcc/clang -g -O2 -o log ffmpeg_log.c -I -L -l(第一竖线是大写的i，第三个竖线是小写的L)\n示例clang -g -O2 -o log ffmpeg_log.c -I …/ffmpeg -L …/ffmpeg/libavutil -lavutil\n解析：\n-g 输出文件中的调试信息\n-O2 对输出文件做指令优化（默认是-O1是不对指令进行优化，-O2编译器会按照自己的理解优化指令，让指令运行的更快）\n-o 输出文件的名字\n-o后面跟的.c文件就是要编译的文件的名字\n-I 指定头文件的位置\n-L 指定库文件的位置\n-l 指定引用的库文件名字\nhttps://bear962464.cn/2019/10/27/640/\n","date":"2019-10-27T00:00:00Z","permalink":"https://96bear.github.io/p/clang%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B/","title":"clang使用示例"},{"content":" 1 本文可直接wget得到，配合tmux使用体验更佳。（文章末尾） 文件管理\u0026ndash;增, 删, 改, 查\npwd 显示工作目录的绝对路径（类似于windows电脑窗口的地址栏内容）\nmkdir,touch(创建新的文件);\n新建文件：touch 文件名 例：touch a.txt\n新建文件夹：mkdir 文件夹名(即目录名) 例：mkdir test\nmkdir -p /a/b/c #递归依次创建 /a , /a/b , /a/b/c\ncp：\n复制文件：cp 源文件 目标位置或新文件名\n例：cp -v a.txt aa.txt 复制文件并显示(Verbose)执行过程\n复制文件夹：cp -rv 源文件夹名 目标位置或新文件夹名\n例：cp -rv test test-1 说明：-r是递归的意思，复制文件夹时必须用此选项\n重命名（移动mv）: mv 源文件名 目标位置或新文件名\n例：mv -v test-1 test-2\n删remove(rm)：\n用法： rm -rfv 文件名\n例：删除当前文件夹中的test、test-2、a.txt、aa.txt文件\nrm -rfv test test-2 a.txt aa.txt\n说明：-r 是递归操作，删除目录时必须使用此选项\n-f 是强制(force)删除\n-v 是显示(verbose)执行过程\n文件查找命令:cat ,head, tail, more, less\n1.看全文：cat 文件名 例1: cat /etc/hosts\n例2：cat -n /etc/passwd 看文件内容并显示行号(number)\n2.看头几行(默认看头10行)：head -行数 文件名\n例：head -3 /etc/passwd 看头3行内容\n3.看最后几行(默认看尾部10行)：tail -行数 文件名\n例：tail -3 /etc/passwd 看尾部3行内容\n4.看更多(向下翻页显示)：more 文件名\n例：more /etc/passwd\n快捷键：空格键下翻一页，回车键下翻一行，q键退出(quit)\n5.看更少(上下翻页显示)：less 文件名\n例：less /etc/passwd\n快捷键：方向键上下左右翻，空格键或pagedown下翻一页，pageup键向上翻一页，回车键下翻一行，q键退出(quit)\nhttps://bear962464.cn/2019/10/27/640/\n","date":"2019-10-27T00:00:00Z","permalink":"https://96bear.github.io/p/linuxtermux%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","title":"linux（termux）文件管理常用命令"},{"content":" 1 本文可直接wget得到，配合tmux使用体验更佳。（文章末尾） 服务器运行状态相关命令 ps 查看系统进程线程，我一般都是用这个命令查看进程pid的，然后用pid做更深入的排查。 基本用法 ps -aux 查看所有进程 ps -T -p ${pid} 查看某个进程的线程 参考资料 10个重要的Linux ps命令实战 pstree 查看系统进程树，他可以把各个进程之间的关系用树形结构标识出来。 基本用法 pstree top 查看系统进程线程运行情况，包裹资源的使用情况，系统负载等。我的用法是看下服务器上负载是否很高，然后看具体是哪个进程，哪个线程占用cpu比较多。 基本用法 top 列出所有线程负载信息 top -H 列出所有线程的负载信息 top -H -p ${pid} 列出某个pid下所有线程的负载信息 free 查看内存及使用情况 基本用法 free 文件操作相关 cat 我都是用这个命令查看配置文件，或者是日志文件，但是有点需要注意，cat命令会把整个文件输出到终端了，如果文件内容非常多，建议使用grep进行过滤，或者直接用less或more命令。 基本用法 cat file.txt tail 查看某个文件的尾部，或者查看标准出入的最末尾，默认值显示10行，可以用-n参数来指定输出多少行。 基本用法 tail -n 100 file.txt 输出最末尾的100行 tail -f file.txt 随着文件新增，持续输出新增的内容，一般用来看实时日志 head 和tail命令很相似，不过head是输出头部内容，个人感觉head远没有tail命令用的多。 基本用法 head -n 100 file.txt 输出最开始的100行 more 也是用来查看文件，但more命令只加载一屏的内容，可以向下翻动，因为加载的内容少，所以比cat快多了。 基本用法 more file.txt less 和more很像，但是可以上下翻动，感觉less和more只需要less就可以了，完全可以去掉more啊 基本用法 less file.txt grep 这个是我非常常用的一个命令了，尤其是在问题排查的时候，需要用grep从大量的数据中筛选出一些我想要的。 grep也支持正则表达式匹配。 基本用法 grep \u0026ldquo;abc\u0026rdquo; file 从file中筛选出包含 abc的行。 awk 开头我也说过，这个命令是我最常用的命令之一，比如在文件有多列的时候，我可以用awk输出具体某几列，或者做一些简单的统计 求和，求平均值啊，再或者做一下简单的数据格式化。 基本用法 cat data | awk \u0026lsquo;{print $1,$3,$5}\u0026rsquo; 输出第1 3 5列，注意下标是从1开始 cat data | awk \u0026lsquo;{ sum += $1 } END { print sum }\u0026rsquo; 对第一列求和 cat data | awk -F\u0026rsquo;\\t\u0026rsquo; \u0026lsquo;{print $1,$3}\u0026rsquo; 把每行数据按tab分列，并输出1 3列 参考资料 阮一峰 awk介绍 sort 对标准内容做排序， 基本用法 cat file|sort 把file里的数据排序，注意是按字典序排的，如果想按数值排，需要能够加-n参数 cat file|sort -k2 -n -r 按第二列 数值 倒序 排序，-k指定第几列，-r是翻转reverse的意思 uniq 对排序好的内容去重，注意它只是把相邻且相同的去重，所以如果想要全局去重，需要先用sort排序。 基本用法 cat file|sort|uniq 把file里的文件排序并去重 cat file|sort|uniq -c 把file里的文件排序并去重，且输出每行出现的次数 wc 我都是用wc来数有多上行，其实wc不仅仅能数多少行，还可以数多少单词，多少字符。 基本用法 wc -l file 数下file里有多少行 wc -w file 多少个单词 wc -c file 多少个字节 wc -m file 多少个字符 参考资料 http://www.runoob.com/linux/linux-comm-wc.html sed parallel linux大部分命令都是单进程的，这个命令可以让其他命令多进程执行。 参考资料 15分钟神器gnu parallel 入门观止 scp 之前运维大量机器的时候，通常需要批量修改某个配置文件，都是在一台机器上改好，然后用scp脚本分发到其他机器上去的，大大提高效率。 基本用法 scp aaa.txt test@192.168.1.3:/tmp/ 把当前目录下的aaa.txt文件通过192.168.1.3上的test账号放到/tmp目录下 scp test@192.168.1.3:/tmp/aaa.txt . 和上一条相反 磁盘及IO du 查看目录大小 基本用法 du -h \u0026ndash;max-depth=1 输出最深1层的目录，然后文件大小用人类可读的方式，比如1K 234M 2G df 查看磁盘大小和占用情况 基本用法 df -h 查看各个分区的大小和使用情况 iostat 查看磁盘的io状态 iotop 可以类似于top目录一样，实时显示各个进程的io状态。 find 查找文件，查找条件可以是文件名，文件日期，文件大小，很强大。 我们之前服务器上有个磁盘满就强制删除服务器某个目录下大于1g，且时间大于2天，且文件名是*.log的文件，就是用find加xargs命令做的 基本用法 find /home/test -iname \u0026ldquo;test.txt 在/home/test/下找文件名为test.txt的文件，也支持通配符 find /home/test -isize +100M 查找/home/test下大于100M的文件 参考资料 wikipedia unix find locate 定位某个具体文件的位置，locate命令要比find -name快得多，原因是它不搜索具体目录，而是搜索一个数据库/var/lib/mlocate/mlocate.db，这个数据库会通过一个cron定时更新，所以有可能新建的文件会检索不到。 基本用法 locate a.txt 定位a.txt的位置，如果系统中有多个a.txt，会全部显示出来。 tree 可以看到树状目录结构， 基本用法 tree -L 2 只显示两层树状结构 网络 ping 查看网络是否通 基本用法 ping www.baidu.com nc netcat，可以用来看远程某个端口是否打开，功能很强大，但是我用到的不多。 基本用法 nc -z xindoo.me 443 检测我服务器上的443端口是否开放（当然是开的） 参考资料 linux nc命令介绍 route 查看和操作本机路由表 基本用法 route 列出本地路由表 参考资料 百度百科 route命令 netstat 查看本机的网络状态，可以看到端口占用情况和网络链接情况。 基本用法 netstat -antp traceroute 查看一个请求到目标服务器所经过的所有路由节点，一般用来排查网络问题。 基本用法 traceroute www.baidu.com 参考资料 百度百科 netstat iftop 查看实时网络io情况 lsof 查看端口占用 dig 查看域名的信息，之前做运维的时候，经常需要验证某个域名解析改动是否生效，因为一般一个域名会-A到多个ip上，用ping命令只能看到一个ip，这个时候我就会用dig来看域名解析信息了。 基本用法 dig www.baidu.com 参考资料 dig 命令介绍 curl 发起一个http请求，我一般都是用这个命令来验证服务是否能正常访问的，它有获取html源码的功能。 基本用法 curl www.baidu.com curl -I www.baidu.com 获取请求baidu.com的请求头 参考资料 curl的用法(英文) wget 下载网络上一个文件，基本上就是有个命令行版的下载工具了。 基本用法 wget xindoo.me/test.txt 把我服务器上test.txt文件下载到本地 其他 yum|apt install 很多时候服务器上没有我们想要的工具，可以用这个命令安装下，yum是Fedora和RedHat以及CentOS中的Shell前端软件包管理器， apt是ubuntu平台上的。 基本用法 yum install curl apt install curl man 这个命令是用来查看其它命令手册的，可以看到具体某个命令的详细作用，和具体参数。这个是个很重要的命令了，一般他会比各命令自带的–help详细很多。 基本用法 man curl 查看curl命令的手册\n版权声明：本文为CSDN博主「xindoo」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。\n原文链接：https://blog.csdn.net/xindoo/article/details/85193744\n","date":"2019-10-27T00:00:00Z","permalink":"https://96bear.github.io/p/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%BD%AC/","title":"linux常用命令（转）"},{"content":" 1 本文可直接wget得到，配合tmux使用体验更佳。（文章末尾） nmap -v scanme.nmap.org\n这个选项扫描主机scanme.nmap.org中 所有的保留TCP端口。选项-v启用细节模式。\nnmap -sS -O scanme.nmap.org/24\n进行秘密SYN扫描，对象为主机Saznme所在的“C类”网段 的255台主机。同时尝试确定每台工作主机的操作系统类型。因为进行SYN扫描 和操作系统检测，这个扫描需要有根权限。\nnmap -sV -p 22，53，110，143，4564 198.116.0-255.1-127\n进行主机列举和TCP扫描，对象为B类188.116网段中255个8位子网。这 个测试用于确定系统是否运行了sshd、DNS、imapd或4564端口。如果这些端口 打开，将使用版本检测来确定哪种应用在运行。\nnmap -v -iR 100000 -P0 -p 80\n随机选择100000台主机扫描是否运行Web服务器(80端口)。由起始阶段 发送探测报文来确定主机是否工作非常浪费时间，而且只需探测主机的一个端口，因 此使用-P0禁止对主机列表。\nnmap -P0 -p80 -oX logs/pb-port80scan.xml -oG logs/pb-port80scan.gnmap 216.163.128.20/20\n扫描4096个IP地址，查找Web服务器(不ping)，将结果以Grep和XML格式保存。\nhost -l company.com | cut -d -f 4 | nmap -v -iL - 进行DNS区域传输，以发现company.com中的主机，然后将IP地址提供给 Nmap。上述命令用于GNU/Linux \u0026ndash; 其它系统进行区域传输时有不同的命令。\n","date":"2019-10-27T00:00:00Z","permalink":"https://96bear.github.io/p/nmap%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","title":"nmap常用命令"},{"content":" 1 本文可直接wget得到，配合tmux使用体验更佳。（文章末尾） ./sqlmap.py –h //查看帮助信息 ./sqlmap.py –u “http://www.bigesec.com/inject.asp?id=injecthere” //get注入 ./sqlmap.py –u “http://www.bigesec.com/inject.asp?id=injecthere” \u0026ndash;data “DATA”//post注入 ./sqlmap.py –u “http://www.bigesec.com/inject.asp?id=injecthere” \u0026ndash;cookie “COOKIE”//修改请求时的cookie ./sqlmap.py –u “http://www.bigesec.com/inject.asp?id=injecthere” \u0026ndash;dbs //列数据库 ./sqlmap.py –u “http://www.bigesec.com/inject.asp?id=injecthere” –-users //列用户 ./sqlmap.py –u “http://www.bigesec.com/inject.asp?id=injecthere” –-passwords //获取密码hash ./sqlmap.py –u “http://www.bigesec.com/inject.asp?id=injecthere” –-tables -D DB_NAME //列DB_NAME的表 ./sqlmap.py –u “http://www.bigesec.com/inject.asp?id=injecthere” –-columns –T TB_NAME -D DB_NAME //读取TB_NAME中的列 ./sqlmap.py –u “http://www.bigesec.com/inject.asp?id=injecthere” –-dump –C C1,C2,C3 –T TB_NAME -D DB_NAME //读字段C1,C2,C3数据 ./sqlmap.py –u “http://www.bigesec.com/inject.asp?id=injecthere” –-os-shell //取得一个shell\n","date":"2019-10-27T00:00:00Z","permalink":"https://96bear.github.io/p/sqlmap%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","title":"sqlmap常用命令"},{"content":"\n不用切换使用\n使用方法：wget https://bear962464.cn/termux/文件名\n下载完成后使用 vi命令打开，可使用tab自动填充，esc ZQ退出。\n目前已有： linux .txt\nnmap .txt\nsqlmap .txt\ntmux .txt\nclang.txt\nfile.txt\n","date":"2019-10-27T00:00:00Z","permalink":"https://96bear.github.io/p/termux%E9%85%8D%E5%90%88tmux%E4%BD%BF%E7%94%A8%E7%9A%84%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3/","title":"termux配合tmux使用的帮助文档"},{"content":"最近迷上了termux，一个移动端强大的终端，我也借此学习一下linux相关的操作。这篇文章介绍一下linux下通用tmux分屏工具。\n先看一下效果： 不香么\n左侧编辑文档，进行主要操作\n右侧放个帮助文档，多舒服\n使用： 1 apt install tmux 1 2 3 4 5 6 输入tmux 每次Ctrl+b进入控制台 简单的几个命令 左右分屏Ctrl+b % 上下分屏Ctrl+b \u0026#34; 关现分屏Ctrl+b x 更多的命令: https://bear962464.cn/2019/10/27/636/\n可直接终端wget bear962464.cn/termux/tmux.txt\n配合tmux分屏阅读体验更佳\n","date":"2019-10-27T00:00:00Z","permalink":"https://96bear.github.io/p/termux%E4%BD%BF%E7%94%A8%E5%B8%AE%E5%8A%A9/","title":"termux使用帮助"},{"content":"tmux 在终端中输入tmux就可以打开一个新的 tmux session，tmux 的所有操作必须先使用一个前缀键（默认是 ctrl + b）进入命令模式，或者说进入控制台，就像 vim 中的 esc。\n下面列出了一些常用的基本操作：\n信息查询\ntmux list-keys 列出所有可以的快捷键和其运行的 tmux 命令 tmux list-commands 列出所有的 tmux 命令及其参数 tmux info 列出所有的 session, window, pane, 运行的进程号，等。 ## 窗口控制 先来看看在 tmux 之外如何进行控制 session 会话：session是一个特定的终端组合。输入tmux就可以打开一个新的session tmux new -s session_name 创建一个叫做 session_name 的 tmux session tmux attach -t session_name 重新开启叫做 session_name 的 tmux session tmux switch -t session_name 转换到叫做 session_name 的 tmux session tmux list-sessions / tmux ls 列出现有的所有 session tmux detach 离开当前开启的 session tmux kill-server 关闭所有 session window 窗口：session 中可以有不同的 window（但是同时只能看到一个 window） tmux new-window 创建一个新的 window tmux list-windows tmux select-window -t :0-9 根据索引转到该 window tmux rename-window 重命名当前 window pane 面板：window 中可以有不同的 pane（可以把 window 分成不同的部分） tmux split-window 将 window 垂直划分为两个 pane tmux split-window -h 将 window 水平划分为两个 pane tmux swap-pane -[UDLR] 在指定的方向交换 pane tmux select-pane -[UDLR] 在指定的方向选择下一个 pane 更常用的是在 tmux 中直接通过默认前缀 ctrl + b 之后输入对应命令来操作，具体如下（这里只列出输入默认前缀之后需要输入的操作）：\n基本操作 ? 列出所有快捷键；按q返回 d 脱离当前会话,可暂时返回Shell界面 s 选择并切换会话；在同时开启了多个会话时使用 D 选择要脱离的会话；在同时开启了多个会话时使用 : 进入命令行模式；此时可输入支持的命令，例如 kill-server 关闭所有tmux会话 [ 复制模式，光标移动到复制内容位置，空格键开始，方向键选择复制，回车确认，q/Esc退出 ] 进入粘贴模式，粘贴之前复制的内容，按q/Esc退出 ~ 列出提示信息缓存；其中包含了之前tmux返回的各种提示信息 t 显示当前的时间 ctrl + z 挂起当前会话 窗口操作 c 创建新窗口 \u0026amp; 关闭当前窗口 [0-9] 数字键切换到指定窗口 p 切换至上一窗口 n 切换至下一窗口 l 前后窗口间互相切换 w 通过窗口列表切换窗口 , 重命名当前窗口，便于识别 . 修改当前窗口编号，相当于重新排序 f 在所有窗口中查找关键词，便于窗口多了切换 面板操作 \u0026quot; 将当前面板上下分屏（我自己改成了 |） % 将当前面板左右分屏（我自己改成了 -） x 关闭当前分屏 ! 将当前面板置于新窗口,即新建一个窗口,其中仅包含当前面板 ctrl+方向键 以1个单元格为单位移动边缘以调整当前面板大小 alt+方向键 以5个单元格为单位移动边缘以调整当前面板大小 q 显示面板编号 o 选择当前窗口中下一个面板 方向键 移动光标选择对应面板 { 向前置换当前面板 } 向后置换当前面板 alt+o 逆时针旋转当前窗口的面板 ctrl+o 顺时针旋转当前窗口的面板 z 最大化当前所在面板 page up 向上滚动屏幕，q 退出 page down 向下滚动屏幕，q 退出\n因为 iTerm2 的支持，很多切换的操作可以直接用鼠标进行，非常方便。具体大家可以自己尝试一下。\n配置\n修改~/.tmux.conf即可 ","date":"2019-10-27T00:00:00Z","permalink":"https://96bear.github.io/p/tmux%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/","title":"tmux使用手册"},{"content":"脚本非原创，转载自炫猿线报。\n原地址:https://oo1.win/docs/jdjs/\n京东养红包脚本 1、Chrome浏览器打开京东登录https://passport.jd.com/uc/login#炫猿，确保登录状态。\n2、打开https://happy.m.jd.com/babelDiy/GZWVJFLMXBQVEBDQZWMY/XJf8bH6oXDWSgS91daDJzXh9bU7/index.html#/index 炫猿线报oo1.win:\n3、F12=\u0026gt;console=\u0026gt;粘贴下面脚本\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 let productList = [], shopList = [], url = \u0026#34;https://api.m.jd.com/client.action\u0026#34;; function autoPost(id,type){ fetch(`${url}?timestamp=${new Date().getTime()}`,{method: \u0026#34;POST\u0026#34;,mode: \u0026#34;cors\u0026#34;,credentials: \u0026#34;include\u0026#34;,headers:{\u0026#34;Content-Type\u0026#34;: \u0026#34;application/x-www-form-urlencoded\u0026#34;},body:`functionId=raisepacket_collectScore\u0026amp;body={\u0026#34;type\u0026#34;:${type},\u0026#34;ext\u0026#34;:\u0026#34;${id}\u0026#34;,\u0026#34;appsign\u0026#34;:1,\u0026#34;msgsign\u0026#34;:2}\u0026amp;client=wh5`}) .then(function(response){return response.json()}) .then(function(res){ console.log(res.data.biz_msg); }); } //炫猿线报 https://oo1.win function start(){ fetch(`${url}?${new Date().getTime()}`,{method: \u0026#34;POST\u0026#34;,mode: \u0026#34;cors\u0026#34;,credentials: \u0026#34;include\u0026#34;,headers:{\u0026#34;Content-Type\u0026#34;: \u0026#34;application/x-www-form-urlencoded\u0026#34;},body:\u0026#39;functionId=raisepacket_getShopAndProductList\u0026amp;body=\u0026amp;client=wh5\u0026#39;}) .then(function(response){return response.json()}) .then(function(res){ productList = res.data.result.productList; shopList = res.data.result.shopList; console.log(`获取到任务,商品：${productList.length} 商品：${shopList.length}`); autoProductTask(); }); } //逛商品 function autoProductTask(){ for(let i = 0,leng = productList.length;i\u0026lt;leng;i++){ (function(index){ setTimeout(()=\u0026gt;{ let item = productList[index]; autoPost(item[\u0026#39;id\u0026#39;],4); console.log(`商品总任务数：${leng} 当前任务数：${index + 1}`); if( leng-1 == index){ autoShopTask(); } },index*1500) })(i) } } //逛店铺 function autoShopTask(){ for(let i = 0,leng = shopList.length;i\u0026lt;leng;i++){ (function(index){ setTimeout(()=\u0026gt;{ let item = shopList[index]; autoPost(item[\u0026#39;id\u0026#39;],2); console.log(`商铺总任务数：${leng} 当前任务数：${index + 1}`); if( leng-1 == index){ autoPlay(); } },index*1500) })(i) } } //好玩互动 function autoPlay(){ for(let i = 0,leng = 4;i\u0026lt;leng;i++){ (function(index){ setTimeout(()=\u0026gt;{ autoPost(0,5); console.log(`好玩互动：${leng} 当前任务数：${index + 1}`); if( leng-1 == index){ autoInteract(); } },index*1000) })(i) } } //视频直播 function autoInteract(){ for(let i = 0,leng = 4;i\u0026lt;leng;i++){ (function(index){ setTimeout(()=\u0026gt;{ autoPost(0,10); console.log(`视频直播：${leng} 当前任务数：${index + 1}`); if( leng-1 == index){ autoShopping(); } },index*1000) })(i) } } //精彩会场 function autoShopping(){ for(let i = 0,leng = 3;i\u0026lt;leng;i++){ (function(index){ setTimeout(()=\u0026gt;{ autoPost(0,3); console.log(`精彩会场：${leng} 当前任务数：${index + 1}`); }, index*1000) })(i) } } start(); 最后按一下回车！\n这个活动养红包截止到11月10号之前。我用了一次就刷了3000多。只要每天能刷，用不了几天就能到满级。\n喵币脚本已失效\n老哥的导航站，很全很漂亮哈，网址也好记https://oo1.win/\n以上，补充一个我在使用的喵币手机脚本，可以模拟并自动操作，不需要root\n脚本下载（蓝奏云）\n大致的操作就是解压，安装apk，导入.js，开启悬浮窗，在活动界面开始脚本。\n","date":"2019-10-25T00:00:00Z","permalink":"https://96bear.github.io/p/%E4%BA%AC%E4%B8%9C%E5%85%BB%E7%BA%A2%E5%8C%85%E8%84%9A%E6%9C%AC-%E6%B7%98%E5%AE%9D%E5%96%B5%E5%B8%81%E8%84%9A%E6%9C%AC/","title":"京东养红包脚本 淘宝喵币脚本"},{"content":"\n","date":"2019-10-24T00:00:00Z","permalink":"https://96bear.github.io/p/%E8%AF%B7%E9%97%AE%E4%BD%A0%E4%BB%AC%E6%98%AF%E7%BE%A4%E4%BB%80%E4%B9%88%E7%A5%9E%E4%BB%99/","title":"请问你们是群什么神仙？？"},{"content":"MyHtml.html\n","date":"2019-10-17T00:00:00Z","permalink":"https://96bear.github.io/p/%E8%BF%B7%E5%AE%AB/","title":"迷宫"},{"content":"如果已知英制长度的英尺_f__o__o__t_和英寸_i__n__c__h_的值，那么对应的米是(f__o__o__t+i__n__c__h/12)×0.3048。现在，如果用户输入的是厘米数，那么对应英制长度的英尺和英寸是多少呢？别忘了1英尺等于12英寸。\n输入格式： 输入在一行中给出1个正整数，单位是厘米。\n输出格式： 在一行中输出这个厘米数对应英制长度的英尺和英寸的整数值，中间用空格分开。\n输入样例： 1 170 输出样例： 1 5 6 1 2 3 4 5 6 7 8 9 10 11 12 13 #include\u0026lt;stdio.h\u0026gt; int main (void) { double m,add; int foot,inch; scanf(\u0026#34;%lf\u0026#34;,\u0026amp;m); m=m/100; add=m/0.3048; foot=int(add); inch=(add-foot)*12; printf(\u0026#34;%d %d\u0026#34;,foot,inch); return 0; } ","date":"2019-10-05T00:00:00Z","permalink":"https://96bear.github.io/p/7-1-%E5%8E%98%E7%B1%B3%E6%8D%A2%E7%AE%97%E8%8B%B1%E5%B0%BA%E8%8B%B1%E5%AF%B8-15-%E5%88%86/","title":"7-1 厘米换算英尺英寸 (15 分)"},{"content":"有时候人们用四位数字表示一个时间，比如1106表示11点零6分。现在，你的程序要根据起始时间和流逝的时间计算出终止时间。\n读入两个数字，第一个数字以这样的四位数字表示当前时间，第二个数字表示分钟数，计算当前时间经过那么多分钟后是几点，结果也表示为四位数字。当小时为个位数时，没有前导的零，即5点30分表示为530。注意，第二个数字表示的分钟数可能超过60，也可能是负数。\n输入格式： 输入在一行中给出2个整数，分别是四位数字表示的起始时间、以及流逝的分钟数，其间以空格分隔。注意：在起始时间中，当小时为个位数时，没有前导的零，即5点30分表示为530；流逝的分钟数可能超过60，也可能是负数。\n输出格式： 输出四位数字表示的终止时间。题目保证起始时间和终止时间在同一天内。\n输入样例： 1 1120 110 输出样例： 1 1310 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 #include\u0026lt;stdio.h\u0026gt; int main() { int aa,ab; int time; scanf(\u0026#34;%d %d\u0026#34;,\u0026amp;aa,\u0026amp;time); ab=aa%100+time%60; if(ab\u0026gt;=60) { aa=aa/100+time/60+ab/60; ab=ab%60; } else if(ab\u0026lt;0) { aa=aa/100+time/60-1-ab/60; ab=ab%60+60; } else { aa=aa/100+time/60; ab=ab%60; } //printf(\u0026#34;%d%d\\n\u0026#34;,aa,ab); aa=100*aa+ab; printf(\u0026#34;%d\u0026#34;,aa); return 0; } ","date":"2019-10-05T00:00:00Z","permalink":"https://96bear.github.io/p/7-2-%E7%84%B6%E5%90%8E%E6%98%AF%E5%87%A0%E7%82%B9-15-%E5%88%86/","title":"7-2 然后是几点 (15 分)"},{"content":"程序每次读入一个正3位数，然后输出按位逆序的数字。注意：当输入的数字含有结尾的0时，输出不应带有前导的0。比如输入700，输出应该是7。\n输入格式： 每个测试是一个3位的正整数。\n输出格式： 输出按位逆序的数。\n输入样例： 1 123 输出样例： 1 321 1 2 3 4 5 6 7 8 9 10 11 12 #include\u0026lt;stdio.h\u0026gt; int main() { int count; scanf(\u0026#34;%d\u0026#34;,\u0026amp;count); for(int i=0;i\u0026lt;10;i++) {if(count%10!=0) printf(\u0026#34;%d\u0026#34;,count%10); count=count/10; } return 0; } ","date":"2019-10-05T00:00:00Z","permalink":"https://96bear.github.io/p/7-3-%E9%80%86%E5%BA%8F%E7%9A%84%E4%B8%89%E4%BD%8D%E6%95%B0-10-%E5%88%86/","title":"7-3 逆序的三位数 (10 分)"},{"content":"","date":"2019-10-03T00:00:00Z","permalink":"https://96bear.github.io/p/%E8%A6%81%E5%BE%80%E5%89%8D%E8%B5%B0%E8%B7%AF%E8%B6%8A%E8%B5%B0%E8%B6%8A%E6%98%8E/","title":"要往前走，路越走越明"},{"content":"\n奶嘴乐？\n","date":"2019-10-03T00:00:00Z","permalink":"https://96bear.github.io/p/%E4%B8%80%E9%95%BF%E5%9B%BE/","title":"一长图"},{"content":"有些不想听的声音因为电台推荐进入你的耳朵。\n对于一个爱听音乐的人来说这太糟心了。\n这篇文章就是关于如何拉黑歌手和歌曲，\n快快乐乐的听歌\n进入app设置页\n这里有黑名单设置，我还是刚发现\n舒服了\n","date":"2019-09-26T00:00:00Z","permalink":"https://96bear.github.io/p/qq%E9%9F%B3%E4%B9%90%E6%8B%89%E9%BB%91%E6%AD%8C%E6%9B%B2/%E6%AD%8C%E6%89%8B/","title":"QQ音乐拉黑歌曲/歌手"},{"content":"\n一教\n","date":"2019-09-18T00:00:00Z","permalink":"https://96bear.github.io/p/%E6%8C%BA%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E7%95%99%E4%B8%8B%E4%B8%80%E7%82%B9%E8%B8%AA%E8%BF%B9/","title":"挺有意思的，留下一点踪迹"},{"content":"wordpress插件：Wechat Social\n个人博客的社会化登录可以快速接入订阅者的生活。我们可以通过这个插件达成这一功能。\n微信，QQ，钉钉，微博，手机注册登录，支持账户绑定解绑，完善资料，全新注册登录页面，找回密码页面，支持微信登录直接关注公众号，微信高级扩展不需要微信开放平台认证。\n特色：个人用户免签约代理登录功能，启用代理登录扩展一键实现微信，微博，QQ登录\n插件采用附加组件模式，每一个功能都是一个扩展，方便用户根据需求选择需要的功能。\n下载后可以免费使用社会化登录功能（有广告），付费后可无广告，博主尝试时需要38每年\n另附有一些实用的小功能\n包括登录页背景，图形验证码，社交分享，自带SMTP（邮件设置）\nhttp://bear962464.cn/2019/09/14/493/\n","date":"2019-09-15T00:00:00Z","permalink":"https://96bear.github.io/p/wordpress%E4%B9%8Bqq%E5%BE%AE%E4%BF%A1%E5%BE%AE%E5%8D%9A%E7%99%BB%E5%BD%95/","title":"wordpress之QQ微信微博登录"},{"content":"在wordpress博客的背景加上鼠标跟随CSS3动态特效，效果如本站背景，线条随鼠标飘动\n安装方式：\n1.Wordpress里搜索插件 canvas-nest\n2.代码（转载于 https://oldpan.me/ ）\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 \u0026lt;!DOCTYPE HTML\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta http-equiv=\u0026#34;content-type\u0026#34; content=\u0026#34;text/html; charset=UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;动态鼠标蜘蛛网特效\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;https://cdn.bootcss.com/canvas-nest.js/1.0.1/canvas-nest.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;　\u0026lt;script\u0026gt; ! function() { function n(n, e, t) { return n.getAttribute(e) || t } function e(n) { return document.getElementsByTagName(n) } function t() { var t = e(\u0026#34;script\u0026#34;), o = t.length, i = t[o - 1]; return { l: o, z: n(i, \u0026#34;zIndex\u0026#34;, -1), o: n(i, \u0026#34;opacity\u0026#34;, .5), c: n(i, \u0026#34;color\u0026#34;, \u0026#34;0,0,0\u0026#34;), n: n(i, \u0026#34;count\u0026#34;, 99) } } function o() { a = m.width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth, c = m.height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight } function i() { r.clearRect(0, 0, a, c); var n, e, t, o, m, l; s.forEach(function(i, x) { for (i.x += i.xa, i.y += i.ya, i.xa *= i.x \u0026gt; a || i.x \u0026lt; 0 ? -1 : 1, i.ya *= i.y \u0026gt; c || i.y \u0026lt; 0 ? -1 : 1, r.fillRect(i.x - .5, i.y - .5, 1, 1), e = x + 1; e \u0026lt; u.length; e++) n = u[e], null !== n.x \u0026amp;\u0026amp; null !== n.y \u0026amp;\u0026amp; (o = i.x - n.x, m = i.y - n.y, l = o * o + m * m, l \u0026lt; n.max \u0026amp;\u0026amp; (n === y \u0026amp;\u0026amp; l \u0026gt;= n.max / 2 \u0026amp;\u0026amp; (i.x -= .03 * o, i.y -= .03 * m), t = (n.max - l) / n.max, r.beginPath(), r.lineWidth = t / 2, r.strokeStyle = \u0026#34;rgba(\u0026#34; + d.c + \u0026#34;,\u0026#34; + (t + .2) + \u0026#34;)\u0026#34;, r.moveTo(i.x, i.y), r.lineTo(n.x, n.y), r.stroke())) }), x(i) } var a, c, u, m = document.createElement(\u0026#34;canvas\u0026#34;), d = t(), l = \u0026#34;c_n\u0026#34; + d.l, r = m.getContext(\u0026#34;2d\u0026#34;), x = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(n) { window.setTimeout(n, 1e3 / 45) }, w = Math.random, y = { x: null, y: null, max: 2e4 }; m.id = l, m.style.cssText = \u0026#34;position:fixed;top:0;left:0;z-index:\u0026#34; + d.z + \u0026#34;;opacity:\u0026#34; + d.o, e(\u0026#34;body\u0026#34;)[0].appendChild(m), o(), window.onresize = o, window.onmousemove = function(n) { n = n || window.event, y.x = n.clientX, y.y = n.clientY }, window.onmouseout = function() { y.x = null, y.y = null }; for (var s = [], f = 0; d.n \u0026gt; f; f++) { var h = w() * a, g = w() * c, v = 2 * w() - 1, p = 2 * w() - 1; s.push({ x: h, y: g, xa: v, ya: p, max: 6e3 }) } u = s.concat([y]), setTimeout(function() { i() }, 100) } (); \u0026lt;/script\u0026gt; \u0026lt;/html\u0026gt; ","date":"2019-09-15T00:00:00Z","permalink":"https://96bear.github.io/p/wordpress%E4%B9%8B%E8%9C%98%E8%9B%9B%E7%BD%91%E5%8A%A8%E6%80%81%E8%83%8C%E6%99%AF/","title":"wordpress之蜘蛛网动态背景"},{"content":"\n9.13-9.14连续玩了一天半中国式家长，除了吃饭睡觉都在耍。\n今天早上（9.15）猛地感觉我还在游戏里边，有些游戏现实分不清的感觉。玄妙而又兴奋，其中还掺杂着一些恐惧。\n这不禁让我思考，我和这个游戏有如此之大的共鸣，为什么我可以一直玩下去？我仔细想了想，我觉得还是虚拟和现实之间的满意度。\n中国式家长第一代加上不懂机制的我像极了真实的自己，随着越玩越熟练，我可以让游戏里的“我”变得越来越好，这个是可以上瘾的。我不禁有些佩服这个制作游戏的团队，可以让我的梦想在虚拟世界实现，而且是那么的自我感觉真实的不容易。\n但是换个角度想，我们真的可以像游戏里面那样，家长安排孩子执行吗？显然是不可能的。那么问题来了，我们怎么样才可以更好的培养自己的孩子？父母培养好一个孩子需要花费多大的精力、时间和金钱？\n","date":"2019-09-15T00:00:00Z","permalink":"https://96bear.github.io/p/%E4%B8%AD%E5%9B%BD%E5%BC%8F%E5%AE%B6%E9%95%BF-%E4%B9%8B%E5%90%8E%E7%9A%84%E6%80%9D%E8%80%83/","title":"中国式家长 - 之后的思考"},{"content":"可以写的题材不限（遵守法律）。\n有想写一些东西的朋友可以在本文下评论，评论并确保注册填写邮箱真实无误，我会尽快联系您。\n如技术，想法，美文，英语等等，随你心意\n由于本站没有收入来源，所以木得分成，本站只有作者授予的文章使用权。（有改动再议）\n欢迎你的到来，欢迎你在互联网上留下足迹！\n中秋快乐 阖家欢乐！\n","date":"2019-09-13T00:00:00Z","permalink":"https://96bear.github.io/p/%E5%85%B3%E4%BA%8E%E6%9C%AC%E7%AB%99%E4%BD%9C%E8%80%85%E6%9D%83%E9%99%90%E7%94%B3%E8%AF%B7/","title":"关于本站作者权限申请"},{"content":"wordpress首页显示全文不但拖慢了加载速度，还覆盖了好的文章，浪费页面空间。之前为了这个解决问题查了不少资料。终于在过往记忆该篇文章（此处致谢！）的帮助下完成了这一操作，但部分内容因为主题不同略有区别。\n原教程使用的 主题Twenty Twelve ，我是用的Twenty Fifteen。\n下面贴出原教程和对应的改动。\n原教程：\n到wordpress后台，依次选择 外观\u0026ndash;\u0026gt;编辑\u0026ndash;\u0026gt;选择右边的index.php文件，在里面可以看到语句\n\u0026lt;?php while ( have_posts() ) : the_post(); ?\u0026gt;\u0026lt;?php get_template_part( 'content', get_post_format() ); ?\u0026gt;\u0026lt;?php endwhile; ?\u0026gt;\r可以看出，index.php是嵌套一个 content.php 的文件用于专门显示文章的内容，这就是为什么在首页老是显示文章全文。那么，打开content.php文件找到\n\u0026lt;?php the_content( __( 'Continue reading \u0026lt;span\u0026gt;\u0026amp;rarr;\u0026lt;/span\u0026gt;', 'twentyeleven' ) ); ?\u0026gt;\r将它修改为\n\u0026lt;?php if(!is_single()) {the_excerpt();} else {the_content(__('(more…)'));} ?\u0026gt;\r改动：\n可以看到原教程分成三步\n第一步经验证完全符合，\n第二步第三步：\n找到line32\u0026ndash;line37\nthe_content(\nsprintf(\n__( 'Continue reading %s', 'twentyfifteen' ),\nthe_title( '\u0026lt;span class=\"screen-reader-text\"\u0026gt;', '\u0026lt;/span\u0026gt;', false )\n)\n);\r替换为：\nif(!is_single()) {the_excerpt();} else {the_content(__('(more…)'));}\rOK，over。其他主题照情况来改就行\n友情提示，修改前最好做个备份避免网站崩溃。\nhttp://bear962464.cn/2019/09/07/370/\n","date":"2019-09-13T00:00:00Z","permalink":"https://96bear.github.io/p/%E8%AE%A9wordpress%E9%A6%96%E9%A1%B5%E6%98%BE%E7%A4%BA%E6%96%87%E7%AB%A0%E6%91%98%E8%A6%81/","title":"让WordPress首页显示文章摘要"},{"content":"没有接触高端(高价)产品，只用过小米手环2和小米手环4nfc。\n其中2是在高中时购买，因为宿舍生活，主要用到震动闹钟和电子表的功能，计步也就图个有趣。\n而4刚购买两个多月，给我留下深刻印象的功能:\n1.支付功能\n学校食堂的收费可以用饭卡可以扫码，包括一部分开通扫码支付的店面，就算手机没电也没关系(现金早就不带了)。公交地铁出行也算在这里。\n2.天气和通知\n不用拿起手机也能得到很多生活信息，快递短信啊，通知啊，天气啊等等，可以自己选择通知应用，换一个说法就是订阅自己感兴趣的短消息，一定程度上减轻了手机依赖。\n3.运动功能\n对于我这个懒蛋来说就是“哇，这也能测，(改天——划掉——月——划掉)，明年吧。”\n我没发言权?\n4.查找手机\n经常用，在一定范围发出响声，可用于防盗和粗心——主要粗心。?\n5.非官方DIY(该功能在小米运动4.0.8被禁用)\n在第三方软件的帮助下可以做静态或动态表盘，可以用一些有纪念意义的图片，like this\n官方在4.0.8版本中推出自定义功能，暂时很简陋，倒是足够用和简单易用。\n6.文字版小爱同学\n听说对智能设备(小米生态)的控制比较方便，木得钱木有发言权，对于我来说可有可无。\n总结一下\n肯定是有用的，一方面替代手表，一方面运动监测，当然每人都有自己的习惯，对我我自己来说挺有用。\n其次兼具实用性娱乐性，带来了不少生活便利和乐趣。\n最后是一些思考，智能手环是科技改变生活中的细细一缕，未来的手环可能会越来越美观，集成度越来越高，逐渐脱离简单朴素，我想象一下，也许会结合投影和华为的LiteOS技术，再加上5g的传输，真正的掌上电脑或许就是这样，当然了这需要电池的技术大进步，只是不知道这个东西的出现时间是否恰当，又或者有其他恰当的东西出现。跑题跑远了，其实吧，我只是想说，未来一步步出现在眼前真的是一件很有意思的事情，正所谓：做一个亲历未来的人。(我自己说的?)\n本文首发于知乎，收录于个人博客\nbear962464.cn\n某算法图解app分享：\nhttp://bear962464.cn/2019/09/07/386/\n","date":"2019-09-12T00:00:00Z","permalink":"https://96bear.github.io/p/%E6%88%91%E7%9A%84%E5%B0%8F%E7%B1%B3%E6%89%8B%E7%8E%AF2%E5%92%8C%E5%B0%8F%E7%B1%B3%E6%89%8B%E7%8E%AF4nfc/","title":"我的小米手环2和小米手环4NFC"},{"content":"报名考点负责人打来电话\n电力故障，别来了，退款吧\n我心甚悲（慰）\n相对于错过这次考试机会，我更开心省下了256块钱$_$\n","date":"2019-09-07T00:00:00Z","permalink":"https://96bear.github.io/p/pat%E8%80%83%E8%AF%95%E5%89%8D%E4%B8%80%E5%A4%A9/","title":"PAT考试前一天"},{"content":"今天要推荐的是一个算法学习神器——算法动画图解，你可以通过多步骤的动画学习分类，图表搜索，安全，数据压缩等等，请看图。（下载链接直接翻到最后）\n易于理解的学习过程\n一个非常实用的软件\n这里分享的是v1.2.7破解版，默认解锁全部算法，如果你十分感激原作者可以考虑入正\n链接:\nhttps://pan.baidu.com/s/1c047celh9AjOtanu66Eh7g\n提取码:\n4yk6\n","date":"2019-09-07T00:00:00Z","permalink":"https://96bear.github.io/p/%E7%AE%97%E6%B3%95%E5%8A%A8%E7%94%BB%E8%A7%A3-v1.2.7/","title":"算法动画解 v1.2.7"},{"content":"本文记录本站使用过的，正在使用的css\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 /*全站半透明化*/ .hentry,.post-navigation,.comments-area,.site-footer,.page-header { background-color: rgba(255, 255, 255, 0.7); } button, input[type=\u0026#34;button\u0026#34;], input[type=\u0026#34;reset\u0026#34;], input[type=\u0026#34;submit\u0026#34;]{ background-color:rgba(51, 51, 51, 0.8); } .entry-footer,button, input, select, textarea{ background-color:rgba(247, 247, 247, 0.6); } input:focus,textarea:focus{ background-color:rgba(247, 247, 247, 0.8); } @media screen and (min-width: 59.6875em) { body:before { background-color: rgba(255, 255, 255, 0.6); } } 1 2 /*字体设置*/ *:not([class*=\u0026#34;icon\u0026#34;]):not(i) {font-family: Segoe UI, \u0026#34;Microsoft Yahei\u0026#34; !important;} 长期更新\n","date":"2019-09-06T00:00:00Z","permalink":"https://96bear.github.io/p/wordpress%E4%B9%8B%E9%A2%9D%E5%A4%96css/","title":"wordpress之额外css"},{"content":"本文介绍本文正在使用或使用过的美化插件\n1、WP Snow Effect\n让你的网站增加雪花坠落效果\n官方网站\nhttps://www.wpmaniax.com/seasonal-plugins\n2、 Login Designer\n登录界面设计辅助\n本文长期更新\n","date":"2019-09-06T00:00:00Z","permalink":"https://96bear.github.io/p/wordpress%E4%B9%8B%E7%BE%8E%E5%8C%96%E6%8F%92%E4%BB%B6/","title":"wordpress之美化插件"},{"content":"一方面是拼多多在用人性进行宣传，为了最后几块出卖灵魂，搭上一百个多年不见的朋友同学，成为拼夕夕的编外员工\n另一方面在淘宝上搜索，大量帮砍、微信群的商品，什么10元20刀的，认真想想，有这个能力为什么不给自己做？站在成本利润的角度就可以获得一个经过实践的信息，大部分商家认为获利小于成本。于是利用类似的方式割韭菜。。。\n话说自认为割着韭菜的韭菜们还没有意识到自己也是韭菜么？\n说来惭愧我也是刚刚才想明白\n","date":"2019-09-06T00:00:00Z","permalink":"https://96bear.github.io/p/%E5%85%B3%E4%BA%8E%E6%8B%BC%E5%A4%9A%E5%A4%9A%E7%99%BE%E5%85%83%E7%BA%A2%E5%8C%85%E7%9A%84%E6%80%9D%E8%80%83/","title":"关于拼多多百元红包的思考"},{"content":"能识别出来就怪了\n话说现在的qq画图红包风靡一时啊，各种搞怪，灵魂艺术家你方唱罢我登场\n话说这时你发了一个红包，让画哆啦A梦，大家会不会纷纷傻眼呢\n哈哈，本文就是教给你怎么通过修改底包xml完成这一操作。\n本教程来自bear962464.cn\n准备工作\n前提 获取root权限 工具 mt管理器（文末链接安装，官方酷安） 需要时间 5min 无风险，可改回，不影响正常功能预计下次更新自动修正 视频教程https://b23.tv/av66591070\n教程开始\n1.安装mt管理器，获取root权限\n**2.**打开mt管理器\n左上角菜单先注册账号，登录（后面要用到登陆使用的功能）\n根目录（没有根目录请重启管理器）→data→app→com.tencent.mobileqq\n根目录\nmobileqq\n3.\n点击右侧，点击左上角菜单，选择内部储存，选一个自己能找到的目录\n4.\n长摁bask.apk移动\n移动完成\n5.\n依次点击base.apk\n查看\n右上角搜索\n输入piy\n6.\n依次点击piy.xml→piy.xml→反编译（登录功能）\n如图修改line29\n7.\n返回键 保存并退出 确定\n最后一步把刚才目录里修改过得文件移动回来\n8.找个群试一下，如果可以在画图红包主题处输入文字就成功了（本文来自bear962464.cn）\n教程结束，大家快乐的搞怪吧\nmt管理器下载地址\nhttps://www.coolapk.com/apk/bin.mt.plus\n本教程来自bear962464.cn\n转载请注明原出处\n关于对未来智能设备的拙见请看链接\nhttp://bear962464.cn/2019/09/12/417/\nhttp://bear962464.cn/2019/09/06/323/\n","date":"2019-09-04T00:00:00Z","permalink":"https://96bear.github.io/p/%E9%A2%86%E4%B8%8D%E4%BA%86%E7%9A%84qq%E7%94%BB%E5%9B%BE%E7%BA%A2%E5%8C%85%E6%95%99%E7%A8%8B/","title":"领不了的QQ画图红包教程"},{"content":" 名称 com.bilibili.tv1.5.6\n版本 1.5.6\n大小 6.75M\n下载地址\n链接:\nhttps://pan.baidu.com/s/1kBUWrQUIXDfvcqaKUyjJuA\n提取码:\nai0w\n使用截图\n小黑镇楼\n","date":"2019-09-03T00:00:00Z","permalink":"https://96bear.github.io/p/bilibili%E5%93%94%E5%93%A9%E5%93%94%E5%93%A9tv%E7%89%88apk/","title":"bilibili哔哩哔哩TV版apk"},{"content":"这?脸看上去是不是很欠揍\n","date":"2019-09-02T00:00:00Z","permalink":"https://96bear.github.io/p/qq%E7%94%BB%E5%9B%BE%E7%BA%A2%E5%8C%85/","title":"QQ画图红包"},{"content":" 一家人就是要整整齐齐 ","date":"2019-09-02T00:00:00Z","permalink":"https://96bear.github.io/p/%E7%81%B5%E9%AD%82%E7%94%BB%E6%89%8B%E4%BB%ACqq%E7%94%BB%E5%9B%BE/","title":"灵魂画手们–QQ画图"},{"content":"记忆宫殿或许是虚构，比喻，但是完全可以大脑中分块记忆 我在想，有没有害怕丢失记忆的人，仔细记住生活中发生的每件事 这样的人是不是都记忆力超强？这种方法会造成大脑的疲惫么？ 也许会，也许不会？\n","date":"2019-09-01T00:00:00Z","permalink":"https://96bear.github.io/p/%E8%AE%B0%E5%BF%86/","title":"记忆"},{"content":"1. strcpy char *strcpy(char *destin, char *source); 功能：将source指向的字符串拷到destin。\n1 int main() 2 { 3 4 char dest[5]; 5 char *src=\u0026ldquo;123456\u0026rdquo;; 6 strcpy(dest, src); 7 printf(\u0026ldquo;dest= %s, %s, %s\u0026rdquo;, dest, dest+4, dest+5); 8 9 return 0; 10 }\n从结果可知确实将src的内容复制过去了，但是全部复制导致dest满了，使用不当就会出错！ 2. strncpy char *strncpy(char *destin, char *source, int len); 功能：将source指向的len个字符串拷到destin。\n1 int main() 2 { 3 4 char dest[5]; 5 char *src=\u0026ldquo;123456\u0026rdquo;; 6 strncpy(dest, src, 3); 7 dest[3]= \u0026lsquo;\\0\u0026rsquo;; 8 printf(\u0026ldquo;dest= %s, %s, %s\u0026rdquo;, dest, dest+4, dest+5); 9 10 return 0; 11 }\n结果可知加上‘\\0’结束符后dest内容变的更安全，strcpy和strncpy要额外加字符结束符！ 3. strcat char* strcat(char * str1,char * str2); 功能: 把字符串str2接到str1后面,str1最后的\u0026rsquo;\\0\u0026rsquo;被取消\n1 int main() 2 { 3 4 char dest[5]=\u0026ldquo;abcd\u0026rdquo;; 5 char *src=\u0026ldquo;123456\u0026rdquo;; 6 strcat(dest, src); 7 printf(\u0026ldquo;dest= %s\u0026rdquo;, dest); 8 9 return 0; 10 }\n4. strncat char *strncat(char *dest, const char *src, size_t maxlen) 功能: 将字符串src中前maxlen个字符连接到dest中\n1 int main() 2 { 3 4 char dest[10]=\u0026ldquo;abcd\u0026rdquo;; 5 char *src=\u0026ldquo;123456\u0026rdquo;; 6 strncat(dest, src, 8); 7 printf(\u0026ldquo;dest= %s\u0026rdquo;, dest); 8 9 return 0; 10 }\n与strncpy不同，strncat会自动在末尾加‘\\0’，若指定长度超过源字符串长度，则只复制源字符串长度即停止，更安全！ 5. strcmp int strcmp(char * str1,char * str2); 功能: 比较两个字符串str1,str2 返回: str1\u0026lt;str2,返回负数;str1=str2,返回 0;str1\u0026gt;str2,返回正数\n1 int main() 2 { 3 4 char dest[10]=\u0026ldquo;abcd\u0026rdquo;; 5 char *src=\u0026ldquo;a23456\u0026rdquo;; 6 char d2[8]=\u0026ldquo;abcd\u0026rdquo;; 7 int res; 8 res=strcmp(dest, src); 9 printf(\u0026ldquo;res= %d \\n\u0026rdquo;, res); 10 res=strcmp(dest, d2); 11 printf(\u0026ldquo;res= %d \\n\u0026rdquo;, res); 12 13 return 0; 14 }\n结果可知每一位都要比较，且与原字符数组长度无关。 6. strncmp int strncmp(char *str1,char *str2,int count) 功能: 对str1和str2中的前count个字符按字典顺序比较 返回: 小于0：str1\u0026lt;str2，等于0：str1=str2，大于0：str1\u0026gt;str2\nint main() {\nchar dest[10]=\u0026ldquo;abcd\u0026rdquo;; char *src=\u0026ldquo;a23456\u0026rdquo;; char d2[8]=\u0026ldquo;abcd\u0026rdquo;; int res; res=strncmp(dest, src, 1); printf(\u0026ldquo;res= %d \\n\u0026rdquo;, res); res=strncmp(dest, d2, 1); printf(\u0026ldquo;res= %d \\n\u0026rdquo;, res);\nreturn 0; }\n7. strchr char* strchr(char* str,char ch); 功能: 找出str指向的字符串中第一次出现字符ch的位置 返回: 返回指向该位置的指针,如找不到,则返回空指针\n1 int main() 2 { 3 4 char dest[10]=\u0026ldquo;abcd\u0026rdquo;; 5 char* rp; 6 char ch= \u0026lsquo;c\u0026rsquo;; 7 rp=strchr(dest, ch); 8 if(NULL == rp) 9 printf(\u0026ldquo;no %c exist\u0026rdquo;, ch); 10 else11 printf(\u0026ldquo;pos of %c is %d\u0026rdquo;, ch, (int)(rp-dest+1)); 12 13 return 0; 14 }\n8. strrchr char *strrchr(const char *s, int c) 功能: 得到字符串s中最后一个含有c字符的位置指针 返回: 位置指针\n1 int main() 2 { 3 4 char dest[10]=\u0026ldquo;abcdabc\u0026rdquo;; 5 char* rp; 6 char ch= \u0026lsquo;c\u0026rsquo;; 7 rp=strrchr(dest, ch); 8 if(NULL == rp) 9 printf(\u0026ldquo;no %c exist\u0026rdquo;, ch); 10 else11 printf(\u0026ldquo;pos of %c is %d\u0026rdquo;, ch, (int)(rp-dest+1)); 12 13 return 0; 14 }\nstrrchr 比strchr多的 r 意指反向寻找，位置都是从1开始计数（非从0开始） 9. strstr char* strstr(char* str1,char* str2); 功能:找出str2字符串在str1字符串中第一次出现的位置(不包括str2的串结束符) 返回: 返回该位置的指针,如找不到,返回空指针\n1 int main() 2 { 3 4 char dest[10]=\u0026ldquo;abcdabc\u0026rdquo;; 5 char* rp; 6 char ch1[]= \u0026ldquo;c\u0026rdquo;; 7 char str2[]= \u0026ldquo;cda\u0026rdquo;; 8 rp=strstr(dest, ch1); 9 if(NULL == rp) 10 printf(\u0026ldquo;no %s exist\u0026rdquo;, ch1); 11 else12 printf(\u0026ldquo;substring is %s \\n\u0026rdquo;, rp); 13 14 rp=strstr(dest, str2); 15 if(NULL == rp) 16 printf(\u0026ldquo;no %s exist\u0026rdquo;, str2); 17 else18 printf(\u0026ldquo;substring is %s \u0026ldquo;, rp); 19 20 return 0; 21 }\n可以找单个字符串（字符不符合参数要求） 10. strnset char *strnset(char *s, int ch, size_t n) 功能: 将字符串s中前n个字符设置为ch的值 返回: 指向s的指针\n1 int main() 2 { 3 4 char dest[10]=\u0026ldquo;abcdabc\u0026rdquo;; 5 char* rp; 6 char ch= \u0026lsquo;F\u0026rsquo;; 7 rp=strnset(dest, ch, 4); 8 printf(\u0026ldquo;after strnset dest is %s \\n\u0026rdquo;, rp); 9 10 return 0; 11 }\n11. strset char *strset(char *s, int ch) 功能: 将字符串s中所有字符设置为ch的值 返回: 指向s的指针\n1 int main() 2 { 3 4 char dest[10]=\u0026ldquo;abcdabc\u0026rdquo;; 5 char* rp; 6 char ch= \u0026lsquo;F\u0026rsquo;; 7 rp=strset(dest, ch); 8 printf(\u0026ldquo;after strnset dest is %s \\n\u0026rdquo;, rp); 9 printf(\u0026ldquo;after strnset dest is %s \\n\u0026rdquo;, dest); 10 return 0; 11 }\n结果的 rp和dest 都被修改为同一内容！ 12. strtok char *strtok(char *s1, const char *s2) 功能:分解s1字符串，用特定分隔符(s2)分隔成多个字符串 返回: 字符串s1中首次出现s2中的字符前的子字符串指针 strtok()在参数s1的字符串中发现参数s2中包涵的分割字符时，则会将该字符改为\\0字符。在第一次调用时，strtok()必需给予参数s1字符串，往后的调用则将参数s1设置成 NULL。每次调用成功则返回指向被分割出片段的指针。\n1 int main() 2 { 3 4 char dest[]=\u0026ldquo;ab,cd,ef,c\u0026rdquo;; 5 char* rp; 6 char ch[]= \u0026ldquo;,\u0026rdquo;; 7 rp=strtok(dest, ch); 8 while(NULL != rp) 9 { 10 printf(\u0026ldquo;dest: %s \u0026ldquo;, dest); 11 printf(\u0026ldquo;rp: %s \\n\u0026rdquo;, rp); 12 rp=strtok(NULL, ch); 13 } 14 15 return 0; 16 }\n说明：尽量使用可重入版的strtok，Windows平台下为strtok_s，Linux平台下为strtok_r。 牢记strtok函数族的分隔规则：忽略字符串前后的分隔符，连续的分隔符被当做一个处理。 在使用strtok前，请对源字符串进行备份，除非你可以接受字符串被修改这一事实（修改为分隔的第一个字符串）。 13. strupr char *strupr(char *s) 功能: 将字符串s中的字符变为大写\n1 int main() 2 { 3 4 char dest[]=\u0026ldquo;ab,cd,EF,c\u0026rdquo;; 5 char* rp; 6 rp=strupr(dest); 7 printf(\u0026ldquo;dest: %s, rp: %s\u0026rdquo;, dest, rp); 8 9 return 0; 10 }\n原字符串dest 也被修改！！，对符号和大写字符无影响。 char *strlwr(char *s)与它相反，将字符串中的字符变为小写字符 还有一些 memxxx() 函数下次单独说明，有问题欢迎评论~~\n","date":"2019-08-31T00:00:00Z","permalink":"https://96bear.github.io/p/c-string.h%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E4%BB%8B%E7%BB%8D/","title":"C \u003cstring.h\u003e常用函数介绍"},{"content":"无法启动承载网络，组或资源的状态不是执行请求操作的正确状态\n解决： 打开命令提示符，输入 netsh wlan show drivers\n检查网卡驱动是否支持，找到一行「支持的承载网络」：若为否，如下图\n造成以上的原因： 一般都是使用驱动精灵等软件更新了无线网卡驱动，因为win10系统有些无线网卡不能使用最新版的驱动，要安装win7或者win8系统下旧版本的驱动才能正常开启wifi，所以使用win10的用户不建议使用驱动精灵这一类软件更新无线网卡驱动。 解决方法： 简单说就是 回滚到旧无线网卡驱动 1. 右键“此电脑” -\u0026gt; “管理” -\u0026gt; “设备管理器” -\u0026gt; \u0026ldquo;网络适配器\u0026rdquo; 找到无线网卡，一般名字里面带Wireless、bgn、/b/g/g、802.11、无线 这些关键字的就是无线网卡。\n右击无线网卡，点更新驱动。依次如下操作， 最后把这些可选驱动每一个都安装试试（点下一步安装），安装完一个就用WiFi共享大软件开启WiFi试试，直到不再提示无线网卡不支持承载为止。或用 netsh wlan show drivers 此命令，直到显示支持的承载网络：是 如果所有旧驱动安装后都不支持承载的话，就到笔记本的官网下载win7或者win8版本的无线网卡驱动手动安装（安装前最好先卸载之前的驱动），优先下载win7版本的，如果没有win7的在下载win8的。 实在不行，可以用驱动管理软件，去回滚驱动，我用的是 Driver Booster 参考链接：http://wifi.ggsafe.com/articles/20150820073323279.shtml dengdeng\nMeasure Measure\n","date":"2019-08-31T00:00:00Z","permalink":"https://96bear.github.io/p/%E5%85%B3%E4%BA%8E-win10-%E5%88%9B%E5%BB%BAwifi%E7%83%AD%E7%82%B9-%E9%97%AE%E9%A2%98/","title":"关于 win10 创建WiFi热点 问题"},{"content":"1.从传入的mm个字符中找出最长的一个字符串,并通过形参指针max传回该串地址 char *fun(char (*a)[81], int num, char *max) { int i; max=a[0]; for(i=0;i\u0026lt;num;i++) if(strlen(max)\u0026lt;strlen(a[i])) { max=a[i]; } return max; } 2.编写一个函数，用来删除字符串中的所有空格。 例如，输入asd af aa z67，则输出为asdafaaz67。 void fun (char *str) { int i=0; char *p; p=str; for(p=str;*p!=\u0026rsquo;\\0\u0026rsquo;;p++) { if(*p!=\u0026rsquo; \u0026lsquo;) str[i++]=*p; } } 3. 定义一个fun函数，该函数的功能是：判断字符串是否为回文，若是，则函数返回1，否则返回0。回文是指顺读和倒读都一样的字符串。 int fun(char *str) { int i=0,n,flag=1; while(str[i]) i++; i\u0026ndash;; for(n=0;n\u0026lt;i;n++,i\u0026ndash;) if(str[i]!=str[n]) { flag=0; break; } return flag; } 4.\n","date":"2019-08-31T00:00:00Z","permalink":"https://96bear.github.io/p/%E6%9C%89%E8%B6%A3%E7%9A%84%E5%87%BD%E6%95%B0/","title":"有趣的函数"},{"content":"\n//问题出在时间上，计算N次方调用头文件省时间\n//使用函数形式为pow(a,b)\n#include\u0026lt;stdio.h\u0026gt;\n#include\u0026lt;math.h\u0026gt;\ndouble f( int n, double a[], double x )\n{\nint i,m;\ndouble product,sum=0;\nfor(m=0;m\u0026lt;=n;m++)\n{\ndouble product=a[m]*pow(x,m);\nsum+=product;\n}\nreturn sum;\n}\ndouble f( int n, double a[], double x )\n{\nint i,m;\ndouble product,sum=0;\nfor(m=0;m\u0026lt;=n;m++)\n{\nproduct=a[m];\nfor(i=0;i\u0026lt;m;i++)\nproduct=product*x;\nsum+=product;\n}\nreturn sum;\n}\n","date":"2019-08-30T00:00:00Z","permalink":"https://96bear.github.io/p/10002/","title":"10002"},{"content":"\n谢谢！\n","date":"2019-08-30T00:00:00Z","permalink":"https://96bear.github.io/p/8.27/","title":"8.27"},{"content":"不要抱有二战的心态，一往无前，没有后路\n时间还够，为什么还想浪费一年？怎么总想着退缩？\nPAT考试也想着退款，成不成，我得试一试啊！\n总是在考虑什么？你所谓的牵绊都是给自己找的退缩借口！\n拼一拼，试一试！\n以后签名带上棱角\n","date":"2019-08-30T00:00:00Z","permalink":"https://96bear.github.io/p/%E4%B8%8D%E7%96%AF%E9%AD%94%E4%B8%8D%E6%88%90%E6%B4%BB/","title":"不疯魔不成活"},{"content":"/* 卡拉兹(Callatz)猜想： 对任何一个自然数n，如果它是偶数，那么把它砍掉一半；如果它是奇数，那么把(3n+1)砍掉一半。这样一直反复砍下去， 最后一定在某一步得到n=1。卡拉兹在1950年的世界数学家大会上公布了这个猜想，传说当时耶鲁大学师生齐动员， 拼命想证明这个貌似很傻很天真的命题，结果闹得学生们无心学业，一心只证(3n+1)，以至于有人说这是一个阴谋， 卡拉兹是在蓄意延缓美国数学界教学与科研的进展……\n我们今天的题目不是证明卡拉兹猜想，而是对给定的任一不超过1000的正整数n，简单地数一下，需要多少步（砍几下）才能得到n=1？\n输入格式：每个测试输入包含1个测试用例，即给出自然数n的值。\n输出格式：输出从n计算到1需要的步数。\n输入样例： 3 输出样例： 5 */\n#include\nint main() { int n,count=0; scanf(\u0026quot;%d\u0026quot;,\u0026amp;n); while(n!=1) { switch(n%2) { case 0 : n=n/2; count++; break; case 1 : n=(3*n+1)/2; count++; break; default : break; } } printf(\u0026quot;%d\u0026quot;,count); return 0; }\n#include int main() { int n,count=0; scanf(\u0026quot;%d\u0026quot;,\u0026amp;n); while(n!=1) { count++; if(n%2==1) n=(3*n+1)/2; else n=n/2; } printf(\u0026quot;%d\\n\u0026quot;,count); return 0; } #include int main() { int n,count=0; scanf(\u0026quot;%d\u0026quot;,\u0026amp;n); for(;n!=1;) { count++; if(n%2==1) n=(3*n+1)/2; else n=n/2; } printf(\u0026quot;%d\\n\u0026quot;,count); return 0; }\n","date":"2019-08-12T00:00:00Z","permalink":"https://96bear.github.io/p/10001/","title":"10001"},{"content":"Windows系统下cmd命令大全： 1.calc：启动计算器 2.appwiz.cpl：程序和功能 3.certmgr.msc：证书管理实用程序 4.charmap：启动字符映射表 5.chkdsk.exe：Chkdsk磁盘检查(管理员身份运行命令提示符) 6.cleanmgr: 打开磁盘清理工具 7.cliconfg：SQL SERVER 客户端网络实用工具 8.cmstp：连接管理器配置文件安装程序 9.cmd.exe：CMD命令提示符 10.自动关机命令 Shutdown -s -t 600：表示600秒后自动关机 shutdown -a ：可取消定时关机 Shutdown -r -t 600：表示600秒后自动重启 rundll32 user32.dll,LockWorkStation：表示锁定计算机 11.colorcpl：颜色管理，配置显示器和打印机等中的色彩 12.CompMgmtLauncher：计算机管理 13.compmgmt.msc：计算机管理 14.credwiz：备份或还原储存的用户名和密码 15.comexp.msc：打开系统组件服务 16.control：控制面版 17.dcomcnfg：打开系统组件服务 18.Dccw：显示颜色校准 19.devmgmt.msc：设备管理器 20.desk.cpl：屏幕分辨率 21.dfrgui：优化驱动器 Windows 7→dfrg.msc：磁盘碎片整理程序 22.dialer：电话拨号程序 23.diskmgmt.msc：磁盘管理 24.dvdplay：DVD播放器 25.dxdiag：检查DirectX信息 26.eudcedit：造字程序 27.eventvwr：事件查看器 28.explorer：打开资源管理器 29.Firewall.cpl：Windows防火墙 30.FXSCOVER：传真封面编辑器 31.fsmgmt.msc：共享文件夹管理器 32.gpedit.msc：组策略 33.hdwwiz.cpl：设备管理器 34.inetcpl.cpl：Internet属性 35.intl.cpl：区域 36.iexpress：木马捆绑工具，系统自带 37.joy.cpl：游戏控制器 38.logoff：注销命令 39.lusrmgr.msc：本地用户和组 40.lpksetup：语言包安装/删除向导，安装向导会提示下载语言包 41.lusrmgr.msc：本机用户和组 42.main.cpl：鼠标属性 43.mmsys.cpl：声音 44.magnify：放大镜实用程序 45.mem.exe：显示内存使用情况(如果直接运行无效，可以先管理员身份运行命令提示符，在命令提示符里输入mem.exe\u0026gt;d:a.txt 即可打开d盘查看a.txt，里面的就是内存使用情况了。当然什么盘什么文件名可自己决定。) 46.MdSched:Windows内存诊断程序 47.mmc：打开控制台 48.mobsync：同步命令 49.mplayer2：简易widnows media player 50.Msconfig.exe：系统配置实用程序 51.msdt：微软支持诊断工具 52.msinfo32：系统信息 53.mspaint：画图 54.Msra：Windows远程协助 55.mstsc：远程桌面连接 56.NAPCLCFG.MSC：客户端配置 57.ncpa.cpl：网络连接 58.narrator：屏幕“讲述人” 59.Netplwiz：高级用户帐户控制面板，设置登陆安全相关的选项 60.netstat : an(TC)命令检查接口 61.notepad：打开记事本 62.Nslookup：IP地址侦测器 63.odbcad32：ODBC数据源管理器 64.OptionalFeatures：打开“打开或关闭Windows功能”对话框 65.osk：打开屏幕键盘 66.perfmon.msc：计算机性能监测器 67.perfmon：计算机性能监测器 68.PowerShell：提供强大远程处理能力 69.printmanagement.msc：打印管理 70.powercfg.cpl：电源选项 71.psr：问题步骤记录器 72.Rasphone：网络连接 73.Recdisc：创建系统修复光盘 74.Resmon：资源监视器 75.Rstrui：系统还原 76.regedit.exe：注册表 77.regedt32：注册表编辑器 78.rsop.msc：组策略结果集 79.sdclt：备份状态与配置，就是查看系统是否已备份 80.secpol.msc：本地安全策略 81.services.msc：本地服务设置 82.sfc /scannow：扫描错误并复原/windows文件保护 83.sfc.exe：系统文件检查器 84.shrpubw：创建共享文件夹 85.sigverif：文件签名验证程序 86.slui：Windows激活，查看系统激活信息 87.slmgr.vbs -dlv ：显示详细的许可证信息 88.snippingtool：截图工具，支持无规则截图 89.soundrecorder：录音机，没有录音时间的限制 90.StikyNot：便笺 91.sysdm.cpl：系统属性 92.sysedit：系统配置编辑器 93.syskey：系统加密，一旦加密就不能解开，保护系统的双重密码 94.taskmgr：任务管理器(旧版) 95.TM任务管理器(新版) 96.taskschd.msc：任务计划程序 97.timedate.cpl：日期和时间 98.UserAccountControlSettings用户账户控制设置 99.utilman：辅助工具管理器 100.wf.msc：高级安全Windows防火墙 101.WFS：Windows传真和扫描 102.wiaacmgr：扫描仪和照相机向导 103.winver：关于Windows 104.wmimgmt.msc：打开windows管理体系结构(WMI) 105.write：写字板 106.wscui.cpl：操作中心 107.wuapp：Windows更新 108.wscript：windows脚本宿主设置 以上既是Windows10系统的cmd命令大全，大家觉得有用的话就收藏起来吧，欢迎大家在本站了解更多系统实用技巧。\n","date":"2019-08-11T00:00:00Z","permalink":"https://96bear.github.io/p/windows%E7%B3%BB%E7%BB%9F%E4%B8%8Bcmd%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/","title":"Windows系统下cmd命令大全"}]